(function(t){function e(e){for(var a,o,s=e[0],d=e[1],l=e[2],p=0,u=[];p<s.length;p++)o=s[p],i[o]&&u.push(i[o][0]),i[o]=0;for(a in d)Object.prototype.hasOwnProperty.call(d,a)&&(t[a]=d[a]);c&&c(e);while(u.length)u.shift()();return r.push.apply(r,l||[]),n()}function n(){for(var t,e=0;e<r.length;e++){for(var n=r[e],a=!0,s=1;s<n.length;s++){var d=n[s];0!==i[d]&&(a=!1)}a&&(r.splice(e--,1),t=o(o.s=n[0]))}return t}var a={},i={app:0},r=[];function o(e){if(a[e])return a[e].exports;var n=a[e]={i:e,l:!1,exports:{}};return t[e].call(n.exports,n,n.exports,o),n.l=!0,n.exports}o.m=t,o.c=a,o.d=function(t,e,n){o.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},o.r=function(t){"undefined"!==typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,e){if(1&e&&(t=o(t)),8&e)return t;if(4&e&&"object"===typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(o.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)o.d(n,a,function(e){return t[e]}.bind(null,a));return n},o.n=function(t){var e=t&&t.__esModule?function(){return t["default"]}:function(){return t};return o.d(e,"a",e),e},o.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},o.p="/vue-grid/dist/";var s=window["webpackJsonp"]=window["webpackJsonp"]||[],d=s.push.bind(s);s.push=e,s=s.slice();for(var l=0;l<s.length;l++)e(s[l]);var c=d;r.push([0,"chunk-vendors"]),n()})({0:function(t,e,n){t.exports=n("56d7")},"034f":function(t,e,n){"use strict";var a=n("64a9"),i=n.n(a);i.a},"0940":function(t,e,n){},"11ce":function(t,e,n){},"209a":function(t,e,n){"use strict";var a=n("a601"),i=n.n(a);i.a},"20d3":function(t,e,n){},"3b33":function(t,e,n){t.exports=n.p+"img/grid-localization.2457de17.png"},"3cc5":function(t,e,n){},"3f9a":function(t,e,n){"use strict";var a=n("72ce"),i=n.n(a);i.a},4423:function(t,e,n){"use strict";var a=n("0940"),i=n.n(a);i.a},"4b64":function(t,e,n){"use strict";var a=n("5897"),i=n.n(a);i.a},"549d":function(t,e,n){"use strict";var a=n("20d3"),i=n.n(a);i.a},"56d7":function(t,e,n){"use strict";n.r(e);n("cadf"),n("551c"),n("097d");var a=n("2b0e"),i=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{attrs:{id:"app"}},[n("Navbar"),n("router-view",{attrs:{id:"main"}}),n("PageFooter")],1)},r=[],o=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("b-navbar",{attrs:{toggleable:"md",variant:"light",type:"light"}},[a("div",{staticClass:"container"},[a("b-navbar-toggle",{attrs:{target:"nav_collapse"}}),a("b-collapse",{attrs:{"is-nav":"",id:"nav_collapse"}},[a("b-navbar-nav",[a("b-nav-item",{attrs:{to:"/"}},[a("img",{staticClass:"logo",attrs:{src:n("a48e")}})])],1),a("b-navbar-nav",{staticClass:"ml-auto"},[a("b-nav-item",{attrs:{to:"/demos"}},[t._v("Demos")]),a("b-nav-item",{attrs:{to:"/docs"}},[t._v("Docs")]),a("b-nav-item",{attrs:{href:"https://www.jqwidgets.com/blog/"}},[t._v("Blog")]),a("b-nav-item",{attrs:{to:"/github"}},[t._v("GitHub")])],1)],1)],1)])},s=[],d={name:"Navbar"},l=d,c=(n("bc99"),n("2877")),p=Object(c["a"])(l,o,s,!1,null,"f3ee81e4",null);p.options.__file="Navbar.vue";var u=p.exports,m=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("footer",{staticClass:"page-footer"},[a("b-navbar",{attrs:{id:"bottom-nav",toggleable:"md",variant:"light",type:"light"}},[a("div",{staticClass:"container"},[a("b-navbar-toggle",{attrs:{target:"nav_collapse"}}),a("b-collapse",{attrs:{"is-nav":"",id:"nav_collapse"}},[a("b-navbar-nav",[a("b-nav-item",{attrs:{to:"/"}},[a("img",{staticClass:"bottom-logo",attrs:{src:n("a48e")}}),a("div",{staticClass:"rights"},[t._v("jQWidgets Â© 2011-2018. All Rights Reserved.")])])],1),a("b-navbar-nav",{staticClass:"ml-auto"},[a("b-nav-item",{attrs:{to:"/demos"}},[t._v("Demos")]),a("b-nav-item",{attrs:{to:"/docs"}},[t._v("Docs")]),a("b-nav-item",{attrs:{to:"/blog"}},[t._v("Blog")]),a("b-nav-item",{attrs:{to:"/github"}},[t._v("GitHub")])],1)],1)],1)])],1)},f=[],y=(n("e684"),{}),h=Object(c["a"])(y,m,f,!1,null,"542e9aea",null);h.options.__file="Footer.vue";var v=h.exports,x={components:{Navbar:u,PageFooter:v}},g=x,C=(n("034f"),Object(c["a"])(g,i,r,!1,null,null,null));C.options.__file="App.vue";var w=C.exports,_=n("8c4f"),q=function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("div",{staticClass:"home"},[a("div",{staticClass:"image"},[a("h2",[t._v("jQWidgets Vue Grid")]),a("router-link",{attrs:{to:"/demos"}},[a("button",{staticClass:"demos-button"},[t._v("\n                Demos\n            ")])]),a("router-link",{attrs:{to:"/docs"}},[a("button",{staticClass:"docs-button"},[t._v("\n                Docs\n            ")])])],1),a("div",{staticClass:"grid-demo"},[a("JqxGrid",{attrs:{width:t.width,theme:"material",source:t.dataAdapter,columns:t.columns,pageable:!0,autoheight:!0,sortable:!0,filterable:!0,altrows:!0,enabletooltip:!0,editable:!0,selectionmode:"multiplecellsadvanced",columngroups:t.columngroups}})],1),a("div",{staticClass:"section right"},[a("b-container",[a("b-row",[a("b-col",{attrs:{cols:"4"}},[a("h3",[t._v("Outlook-Style Data Grouping")]),a("p",[t._v("\n                        Our Data Grid widget enables users to group data with simple drag and drop.\n                        Users can also rearrange the grouping hierarchy by dragging and dropping the grouping headers in the group panel.\n                    ")])]),a("b-col",{attrs:{cols:"8"}},[a("img",{attrs:{src:n("821c")}})])],1)],1)],1),a("div",{staticClass:"section left"},[a("b-container",[a("b-row",[a("b-col",{attrs:{cols:"8"}},[a("img",{attrs:{src:n("8453")}})]),a("b-col",{attrs:{cols:"4"}},[a("h3",[t._v("Nested Data Grids")]),a("p",[t._v("\n                        jqxGrid has a very flexible layout that enables easy nesting of any content, UI elements and widgets including nested data grids.\n                    ")])])],1)],1)],1),a("div",{staticClass:"section right"},[a("b-container",[a("b-row",[a("b-col",{attrs:{cols:"4"}},[a("h3",[t._v("Row Details")]),a("p",[t._v("\n                        Row details are built-in feature of the Vue data grid. You can change the height of the row details area and use custom data templates.\n                        You can also use jqxGrid APIs to expand and collapse the grid row details area.\n                    ")])]),a("b-col",{attrs:{cols:"8"}},[a("img",{attrs:{src:n("5fa5")}})])],1)],1)],1),a("div",{staticClass:"section left"},[a("b-container",[a("b-row",[a("b-col",{attrs:{cols:"8"}},[a("img",{attrs:{src:n("dfa4")}})]),a("b-col",{attrs:{cols:"4"}},[a("h3",[t._v("Column Types")]),a("p",[t._v("\n                        The infrastructure of the Vue Grid is designed to support multiple column types. The data grid provides built-in 'Text', 'Number', 'DropDownList', 'DateTime' and 'CheckBox' columns.\n                        Our Vue grid also supports custom data rendering. Developers can easily replace the default rendering logic and use custom columns and cells rendering.\n                    ")])])],1)],1)],1),a("div",{staticClass:"section right"},[a("b-container",[a("b-row",[a("b-col",{attrs:{cols:"4"}},[a("h3",[t._v("Pinned Columns")]),a("p",[t._v("\n                        jqxGrid supports Excel-like pinned (frozen) columns. This feature also allows you to pin columns to the left the gridview's canvas.\n                        The pinned columns are very useful when working with large tables and it makes it easy to scroll and compare data from different parts of the table.\n                    ")])]),a("b-col",{attrs:{cols:"8"}},[a("img",{attrs:{src:n("58fa")}})])],1)],1)],1),a("div",{staticClass:"section left"},[a("b-container",[a("b-row",[a("b-col",{attrs:{cols:"8"}},[a("img",{attrs:{src:n("e805")}})]),a("b-col",{attrs:{cols:"4"}},[a("h3",[t._v("Cells Formatting")]),a("p",[t._v("\n                        Our Vue grid offers a cell formatting feature where you can easily specify a formatting string for grid column.\n                        You can format dates, numeric values like decimal numbers, integer and floating-point numbers, currency and percentage values.\n                    ")])])],1)],1)],1),a("div",{staticClass:"section right"},[a("b-container",[a("b-row",[a("b-col",{attrs:{cols:"4"}},[a("h3",[t._v("Localization")]),a("p",[t._v("\n                        Our Vue grid supports localization for multi-language web sites and applications. All text elements used in control buttons, menu items and elements can be localized.\n                    ")])]),a("b-col",{attrs:{cols:"8"}},[a("img",{attrs:{src:n("3b33")}})])],1)],1)],1)])},G=[],b=n("b8ed"),M={components:{JqxGrid:b["a"]},data:function(){return{width:"70%",dataAdapter:new jqx.dataAdapter(this.source),columns:[{text:"Product Name",columngroup:"ProductDetails",datafield:"ProductName",width:250},{text:"Quantity per Unit",columngroup:"ProductDetails",datafield:"QuantityPerUnit",cellsalign:"right",align:"right"},{text:"Unit Price",columngroup:"ProductDetails",datafield:"UnitPrice",align:"right",cellsalign:"right",cellsformat:"c2"},{text:"Units In Stock",datafield:"UnitsInStock",cellsalign:"right",cellsrenderer:this.cellsrenderer,width:100},{text:"Discontinued",columntype:"checkbox",datafield:"Discontinued",align:"center"}],columngroups:[{text:"Product Details",align:"center",name:"ProductDetails"}]}},beforeCreate:function(){this.source={datatype:"xml",datafields:[{name:"ProductName",type:"string"},{name:"QuantityPerUnit",type:"int"},{name:"UnitPrice",type:"float"},{name:"UnitsInStock",type:"float"},{name:"Discontinued",type:"bool"}],root:"Products",record:"Product",id:"ProductID",url:"./sampledata/products.xml"}},mounted:function(){for(var t=document.getElementsByClassName("jqx-button"),e=0;e<t.length;e++)t[e].removeAttribute("type")},methods:{cellsrenderer:function(t,e,n,a,i){return n<20?'<span style="margin: 4px; float: '+i.cellsalign+'; color: #ff0000;">'+n+"</span>":'<span style="margin: 4px; float: '+i.cellsalign+'; color: #008000;">'+n+"</span>"}}},j=M,S=(n("3f9a"),Object(c["a"])(j,q,G,!1,null,"b3bfc5ac",null));S.options.__file="Home.vue";var T=S.exports,A=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("b-container",{staticClass:"demos"},[n("b-row",[n("b-col",{attrs:{cols:"3"}},[n("div",{staticClass:"menu"},[n("p",{staticClass:"title"},[t._v("Demos")]),n("ul",[n("li",[n("router-link",{attrs:{to:"/demos/default-functionality"}},[t._v("Default Functionality")])],1),n("li",[n("router-link",{attrs:{to:"/demos/data-editing"}},[t._v("Data Editing")])],1),n("li",[n("router-link",{attrs:{to:"/demos/data-export"}},[t._v("Data Export")])],1),n("li",[n("router-link",{attrs:{to:"/demos/refresh-data"}},[t._v("Refresh Data")])],1),n("li",[n("router-link",{attrs:{to:"/demos/row-details"}},[t._v("Row Details")])],1),n("li",[n("router-link",{attrs:{to:"/demos/nested-grids"}},[t._v("Nested Grids")])],1),n("li",[n("router-link",{attrs:{to:"/demos/virtual-scrolling"}},[t._v("Virtual Scrolling")])],1),n("li",[n("router-link",{attrs:{to:"/demos/virtual-paging"}},[t._v("Virtual Paging")])],1)])])]),n("b-col",{attrs:{cols:"9"}},[n("div",{staticClass:"content"},[n("router-view")],1)])],1)],1)},N=[],J={name:"demos",components:{}},D=J,E=(n("549d"),Object(c["a"])(D,A,N,!1,null,"465066d9",null));E.options.__file="Demos.vue";var B=E.exports,F=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"docs"},[n("b-container",[n("b-row",[n("b-col",{attrs:{cols:"3"}},[n("div",{staticClass:"menu"},[n("p",{staticClass:"title"},[t._v("Guides")]),n("ul",[n("li",[n("router-link",{attrs:{to:"/docs/getting-started"}},[t._v("Getting Started")])],1),n("li",[n("router-link",{attrs:{to:"/docs/fundamentals"}},[t._v("Fundamentals")])],1),n("li",[n("router-link",{attrs:{to:"/docs/data-binding"}},[t._v("Data Binding")])],1),n("li",[n("router-link",{attrs:{to:"/docs/sorting"}},[t._v("Sorting")])],1),n("li",[n("router-link",{attrs:{to:"/docs/filtering"}},[t._v("Filtering")])],1),n("li",[n("router-link",{attrs:{to:"/docs/paging"}},[t._v("Paging")])],1),n("li",[n("router-link",{attrs:{to:"/docs/grouping"}},[t._v("Grouping")])],1),n("li",[n("router-link",{attrs:{to:"/docs/editing"}},[t._v("Editing")])],1)]),n("ul",[n("li",[n("router-link",{attrs:{to:"/docs/api-reference"}},[t._v("API Reference")])],1)])])]),n("b-col",{attrs:{cols:"9"}},[n("div",{staticClass:"content"},[n("router-view")],1)])],1)],1)],1)},k=[],O=(n("4b64"),{}),P=Object(c["a"])(O,F,k,!1,null,"53765d7f",null);P.options.__file="Docs.vue";var R=P.exports,L=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("b-container",{staticClass:"not-found"},[n("div",[n("h1",[t._v("404")]),n("h3",[t._v("Page not found")])])])},I=[],z={name:"PageNotFound"},H=z,U=(n("db02"),Object(c["a"])(H,L,I,!1,null,null,null));U.options.__file="PageNotFound.vue";var W=U.exports,V=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"default-functionality"},[n("h1",[t._v("jQWidgets Grid Default Functionality")]),n("p",[t._v("\n            This demo illustrates the basic functionality of the Grid plugin. The jQWidgets Grid plugin offers rich support for interacting with data, including paging, grouping and sorting.\n        ")]),n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.getWidth,source:t.dataAdapter,columns:t.columns,pageable:!0,autoheight:!0,sortable:!0,filterable:!0,altrows:!0,editable:!0,selectionmode:"multiplecellsadvanced",columngroups:t.columngroups}})],1),n("div",[n("pre",[n("code",{ref:"code"},[t._v("\n    <template>\n        <JqxGrid :theme=\"'material'\" :width=\"getWidth\" :source=\"dataAdapter\" :columns=\"columns\"\n                 :pageable=\"true\" :autoheight=\"true\" :sortable=\"true\" :filterable=\"true\" :altrows=\"true\" \n                 :editable=\"true\" :selectionmode=\"'multiplecellsadvanced'\" :columngroups=\"columngroups\">\n        </JqxGrid>\n    </template>\n    <script>\n        import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n        export default {\n            components: {\n                JqxGrid\n            },\n            data: function () {\n                return {\n                    getWidth: '99%',\n                    dataAdapter: new jqx.dataAdapter(this.source),\n                    columns: [\n                        { text: 'Product Name', columngroup: 'ProductDetails', datafield: 'ProductName', width: 250 },\n                        { text: 'Quantity per Unit', columngroup: 'ProductDetails', datafield: 'QuantityPerUnit', align: 'right', cellsalign: 'right' },\n                        { text: 'Unit Price', columngroup: 'ProductDetails', datafield: 'UnitPrice', align: 'right', cellsalign: 'right', cellsformat: 'c2' },\n                        { text: 'Units In Stock', datafield: 'UnitsInStock', cellsalign: 'right', cellsrenderer: this.cellsrenderer, width: 100 },\n                        { text: 'Discontinued', columntype: 'checkbox', datafield: 'Discontinued', align: 'center' }\n                    ],\n                    columngroups: [\n                        { text: 'Product Details', align: 'center', name: 'ProductDetails' }\n                    ]\n                }\n            },\n            beforeCreate: function () {\n                this.source = {\n                    datatype: 'xml',\n                    datafields: [\n                        { name: 'ProductName', type: 'string' },\n                        { name: 'QuantityPerUnit', type: 'int' },\n                        { name: 'UnitPrice', type: 'float' },\n                        { name: 'UnitsInStock', type: 'float' },\n                        { name: 'Discontinued', type: 'bool' }\n                    ],\n                    root: 'Products',\n                    record: 'Product',\n                    id: 'ProductID',\n                    url: '../sampledata/products.xml'\n                };\n            },\n            methods: {\n                cellsrenderer: function (row, columnsfield, value, defaulthtml, columnproperties, rowdata) {\n                    if (value < 20) {\n                        return '<span style=\"margin: 4px; float: ' + columnproperties.cellsalign + '; color: #ff0000;\">' + value + '</span>';\n                    }\n                    else {\n                        return '<span style=\"margin: 4px; float: ' + columnproperties.cellsalign + '; color: #008000;\">' + value + '</span>';\n                    }\n                }\n            }\n        }\n    <\/script>\n")])])])])],1)},Q=[],Y=n("a780"),K={components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{getWidth:"99%",dataAdapter:new jqx.dataAdapter(this.source),columns:[{text:"Product Name",columngroup:"ProductDetails",datafield:"ProductName",width:250},{text:"Quantity per Unit",columngroup:"ProductDetails",datafield:"QuantityPerUnit",align:"right",cellsalign:"right"},{text:"Unit Price",columngroup:"ProductDetails",datafield:"UnitPrice",align:"right",cellsalign:"right",cellsformat:"c2"},{text:"Units In Stock",datafield:"UnitsInStock",cellsalign:"right",cellsrenderer:this.cellsrenderer,width:100},{text:"Discontinued",columntype:"checkbox",datafield:"Discontinued",align:"center"}],columngroups:[{text:"Product Details",align:"center",name:"ProductDetails"}]}},beforeCreate:function(){this.source={datatype:"xml",datafields:[{name:"ProductName",type:"string"},{name:"QuantityPerUnit",type:"int"},{name:"UnitPrice",type:"float"},{name:"UnitsInStock",type:"float"},{name:"Discontinued",type:"bool"}],root:"Products",record:"Product",id:"ProductID",url:"./sampledata/products.xml"}},mounted:function(){this.$refs.code.innerHTML=formatCode(this.$refs.code.innerHTML);for(var t=document.getElementsByClassName("jqx-button"),e=0;e<t.length;e++)t[e].removeAttribute("type")},methods:{cellsrenderer:function(t,e,n,a,i,r){return n<20?'<span style="margin: 4px; float: '+i.cellsalign+'; color: #ff0000;">'+n+"</span>":'<span style="margin: 4px; float: '+i.cellsalign+'; color: #008000;">'+n+"</span>"}}},X=K,Z=Object(c["a"])(X,V,Q,!1,null,null,null);Z.options.__file="DefaultFunctionality.vue";var tt=Z.exports,et=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"data-editing"},[n("h1",[t._v("jQWidgets Grid Data Editing")]),n("p",[t._v("\n            This demo illustrates editing in Vue Grid. In order to enter in edit mode, select a grid cell and start typing, Click or press the F2 key. You can also navigate through the cells using the keyboard arrows or with the Tab and Shift + Tab key combinations. To cancel the cell editing, press the Esc key. To save the changes press the Enter key or select another Grid cell. Pressing the 'Space' key when a checkbox cell is selected will toggle the check state. You can have different editing modes including customized editors. In addition you can disable the editing for certain rows. There is also an option for full row edit.\n        ")]),n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.getWidth,source:t.dataAdapter,columns:t.columns,editable:!0,enabletooltips:!0,selectionmode:"multiplecellsadvanced"},on:{cellbeginedit:function(e){t.cellBeginEditEvent(e)},cellendedit:function(e){t.cellEndEditEvent(e)}}}),n("div",{staticStyle:{height:"50px","font-size":"12px","font-family":"Verdana","margin-top":"30px"}},[n("div",{ref:"beginEdit"}),n("div",{ref:"endEdit",staticStyle:{"margin-top":"10px"}})])],1),n("div",[n("pre",[n("code",{ref:"code"},[t._v("\n    <template>\n        <div>\n            <JqxGrid @cellbeginedit=\"cellBeginEditEvent($event)\" @cellendedit=\"cellEndEditEvent($event)\"\n                     :theme=\"'material'\" :width=\"getWidth\" :source=\"dataAdapter\" :columns=\"columns\"\n                     :editable=\"true\" :enabletooltips=\"true\" :selectionmode=\"'multiplecellsadvanced'\">\n            </JqxGrid>\n            <div style=\"font-size: 12px; font-family: Verdana; margin-top: 30px;\">\n                <div ref=\"beginEdit\"></div>\n                <div ref=\"endEdit\" style=\"margin-top: 10px;\"></div>\n            </div>\n        </div>\n    </template>\n    <script>\n        import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n        export default {\n            components: {\n                JqxGrid\n            },\n            data: function () {\n                return {\n                    getWidth: '99%',\n                    dataAdapter: new jqx.dataAdapter(this.source),\n                    columns: [\n                        { text: 'First Name', columntype: 'textbox', datafield: 'firstname', width: 120 },\n                        { text: 'Last Name', datafield: 'lastname', columntype: 'textbox', width: 120 },\n                        { text: 'Product', columntype: 'dropdownlist', datafield: 'productname', width: 195 },\n                        { text: 'Available', datafield: 'available', columntype: 'checkbox', width: 67 },\n                        {\n                            text: 'Ship Date', datafield: 'date', columntype: 'datetimeinput', width: 110, align: 'right', cellsalign: 'right', cellsformat: 'd',\n                            validation: (cell, value) => {\n                                if (value == '')\n                                    return true;\n                                let year = value.getFullYear();\n                                if (year >= 2017) {\n                                    return { result: false, message: 'Ship Date should be before 1/1/2017' };\n                                }\n                                return true;\n                            }\n                        },\n                        {\n                            text: 'Quantity', datafield: 'quantity', width: 70, align: 'right', cellsalign: 'right', columntype: 'numberinput',\n                            validation: (cell, value) => {\n                                if (value < 0 || value > 150) {\n                                    return { result: false, message: 'Quantity should be in the 0-150 interval' };\n                                }\n                                return true;\n                            },\n                            createeditor: (row, cellvalue, editor) => {\n                                editor.jqxNumberInput({ decimalDigits: 0, digits: 3 });\n                            }\n                        },\n                        {\n                            text: 'Price', datafield: 'price', align: 'right', cellsalign: 'right', cellsformat: 'c2', columntype: 'numberinput',\n                            validation: (cell, value) => {\n                                if (value < 0 || value > 15) {\n                                    return { result: false, message: 'Price should be in the 0-15 interval' };\n                                }\n                                return true;\n                            },\n                            createeditor: (row, cellvalue, editor) => {\n                                editor.jqxNumberInput({ digits: 3 });\n                            }\n                        }\n                    ]\n                }\n            },\n            beforeCreate: function () {\n                this.source = {\n                    localdata: generatedata(500, false),\n                    datatype: 'array',\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'available', type: 'bool' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'date', type: 'date' }\n                        ]\n                };\n            },\n            methods: {\n                cellBeginEditEvent: function (event) {\n                    let args = event.args;\n                    this.$refs.beginEdit.innerHTML = 'Event Type: cellbeginedit, Column: ' + args.datafield + ', Row: ' + (1 + args.rowindex) + ', Value: ' + args.value;\n                },\n                cellEndEditEvent: function (event) {\n                    let args = event.args;\n                    this.$refs.endEdit.innerHTML = 'Event Type: cellendedit, Column: ' + args.datafield + ', Row: ' + (1 + args.rowindex) + ', Value: ' + args.value;\n                }\n            }\n        }\n    <\/script>\n")])])])]),n("p",[t._v("*generatedata function is implemented in the generatedata.js. The file is included in the download package and can be found in the installation_folder/demos/jqxgrid folder.")])],1)},nt=[],at={components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{getWidth:"99%",dataAdapter:new jqx.dataAdapter(this.source),columns:[{text:"First Name",columntype:"textbox",datafield:"firstname",width:120},{text:"Last Name",datafield:"lastname",columntype:"textbox",width:120},{text:"Product",columntype:"dropdownlist",datafield:"productname",width:195},{text:"Available",datafield:"available",columntype:"checkbox",width:67},{text:"Ship Date",datafield:"date",columntype:"datetimeinput",width:110,align:"right",cellsalign:"right",cellsformat:"d",validation:function(t,e){if(""==e)return!0;var n=e.getFullYear();return!(n>=2017)||{result:!1,message:"Ship Date should be before 1/1/2017"}}},{text:"Quantity",datafield:"quantity",width:70,align:"right",cellsalign:"right",columntype:"numberinput",validation:function(t,e){return!(e<0||e>150)||{result:!1,message:"Quantity should be in the 0-150 interval"}},createeditor:function(t,e,n){n.jqxNumberInput({decimalDigits:0,digits:3})}},{text:"Price",datafield:"price",align:"right",cellsalign:"right",cellsformat:"c2",columntype:"numberinput",validation:function(t,e){return!(e<0||e>15)||{result:!1,message:"Price should be in the 0-15 interval"}},createeditor:function(t,e,n){n.jqxNumberInput({digits:3})}}]}},beforeCreate:function(){this.source={localdata:generatedata(500,!1),datatype:"array",datafields:[{name:"firstname",type:"string"},{name:"lastname",type:"string"},{name:"productname",type:"string"},{name:"available",type:"bool"},{name:"quantity",type:"number"},{name:"price",type:"number"},{name:"date",type:"date"}]}},mounted:function(){this.$refs.code.innerHTML=formatCode(this.$refs.code.innerHTML)},methods:{cellBeginEditEvent:function(t){var e=t.args;this.$refs.beginEdit.innerHTML="Event Type: cellbeginedit, Column: "+e.datafield+", Row: "+(1+e.rowindex)+", Value: "+e.value},cellEndEditEvent:function(t){var e=t.args;this.$refs.endEdit.innerHTML="Event Type: cellendedit, Column: "+e.datafield+", Row: "+(1+e.rowindex)+", Value: "+e.value}}},it=at,rt=Object(c["a"])(it,et,nt,!1,null,null,null);rt.options.__file="DataEditing.vue";var ot=rt.exports,st=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"data-export"},[n("h1",[t._v("jQWidgets Grid Data Export")]),n("p",[t._v("\n            This demo illustrates data export in Vue Grid. With Vue Grid, you can export your data to Excel, XML, CSV, TSV, JSON, PDF and HTML.\n        ")]),n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid",attrs:{theme:"material",width:t.getWidth,source:t.dataAdapter,columns:t.columns,sortable:!0,altrows:!0,selectionmode:"multiplecellsadvanced"}}),n("div",{staticStyle:{height:"60px","margin-top":"15px"}},[n("div",{staticStyle:{float:"left"}},[n("JqxButton",{attrs:{theme:"material"},on:{click:function(e){t.excelBtnOnClick()}}},[t._v("Export to Excel")]),n("br"),n("JqxButton",{attrs:{theme:"material"},on:{click:function(e){t.xmlBtnOnClick()}}},[t._v("Export to XML")])],1),n("div",{staticStyle:{float:"left","margin-left":"10px"}},[n("JqxButton",{attrs:{theme:"material"},on:{click:function(e){t.csvBtnOnClick()}}},[t._v("Export to CSV")]),n("br"),n("JqxButton",{attrs:{theme:"material"},on:{click:function(e){t.tsvBtnOnClick()}}},[t._v("Export to TSV")])],1),n("div",{staticStyle:{float:"left","margin-left":"10px"}},[n("JqxButton",{attrs:{theme:"material"},on:{click:function(e){t.htmlBtnOnClick()}}},[t._v("Export to HTML")]),n("br"),n("JqxButton",{attrs:{theme:"material"},on:{click:function(e){t.jsonBtnOnClick()}}},[t._v("Export to JSON")])],1),n("div",{staticStyle:{float:"left","margin-left":"10px"}},[n("JqxButton",{attrs:{theme:"material"},on:{click:function(e){t.pdfBtnOnClick()}}},[t._v("Export to PDF")])],1)])],1),n("div",[n("pre",[n("code",{ref:"code"},[t._v("\n    <template>\n        <div style=\"font-size: 13px; font-family: Verdana; float: left\">\n            <JqxGrid ref=\"myGrid\"\n                     :theme=\"'material'\" :width=\"getWidth\" :source=\"dataAdapter\" :columns=\"columns\"\n                     :sortable=\"true\" :altrows=\"true\" :selectionmode=\"'multiplecellsadvanced'\">\n            </JqxGrid>\n            <div style=\"height: 60px; margin-top: 15px;\">\n                <div style=\"float: left\">\n                    <JqxButton :theme=\"'material'\" @click=\"excelBtnOnClick()\">Export to Excel</JqxButton>\n                    <br /><br />\n                    <JqxButton :theme=\"'material'\" @click=\"xmlBtnOnClick()\">Export to XML</JqxButton>\n                </div>\n                <div style=\"float: left; margin-left: 10px\">\n                    <JqxButton :theme=\"'material'\" @click=\"csvBtnOnClick()\">Export to CSV</JqxButton>\n                    <br /><br />\n                    <JqxButton :theme=\"'material'\" @click=\"tsvBtnOnClick()\">Export to TSV</JqxButton>\n                </div>\n                <div style=\"float: left; margin-left: 10px\">\n                    <JqxButton :theme=\"'material'\" @click=\"htmlBtnOnClick()\">Export to HTML</JqxButton>\n                    <br /><br />\n                    <JqxButton :theme=\"'material'\" @click=\"jsonBtnOnClick()\">Export to JSON</JqxButton>\n                </div>\n                <div style=\"float: left; margin-left: 10px\">\n                    <JqxButton :theme=\"'material'\" @click=\"pdfBtnOnClick()\">Export to PDF</JqxButton>\n                </div>\n            </div>\n        </div>\n    </template>\n    <script>\n        import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n        import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n        export default {\n            components: {\n                JqxGrid,\n                JqxButton\n            },\n            data: function () {\n                return {\n                    getWidth: '99%',\n                    dataAdapter: new jqx.dataAdapter(this.source),\n                    columns: [\n                        { text: 'First Name', datafield: 'firstname', width: 130 },\n                        { text: 'Last Name', datafield: 'lastname', width: 130 },\n                        { text: 'Product', datafield: 'productname', width: 200 },\n                        { text: 'Available', datafield: 'available', columntype: 'checkbox', width: 67, align: 'center', cellsalign: 'center' },\n                        { text: 'Ship Date', datafield: 'date', width: 120, align: 'right', cellsalign: 'right', cellsformat: 'd' },\n                        { text: 'Quantity', datafield: 'quantity', width: 70, align: 'right', cellsalign: 'right' },\n                        { text: 'Price', datafield: 'price', align: 'right', cellsalign: 'right', cellsformat: 'c2' }\n                    ]\n                }\n            },\n            beforeCreate: function () {\n                this.source = {\n                    localdata: generatedata(100, false),\n                    datatype: 'array',\n                    datafields: [\n                        { name: 'firstname', type: 'string' },\n                        { name: 'lastname', type: 'string' },\n                        { name: 'productname', type: 'string' },\n                        { name: 'available', type: 'bool' },\n                        { name: 'date', type: 'date' },\n                        { name: 'quantity', type: 'number' },\n                        { name: 'price', type: 'number' }\n                    ]\n                };\n            },\n            methods: {\n                excelBtnOnClick: function () {\n                    this.$refs.myGrid.exportdata('xls', 'jqxGrid');\n                },\n                xmlBtnOnClick: function () {\n                    this.$refs.myGrid.exportdata('xml', 'jqxGrid');\n                },\n                csvBtnOnClick: function () {\n                    this.$refs.myGrid.exportdata('csv', 'jqxGrid');\n                },\n                tsvBtnOnClick: function () {\n                    this.$refs.myGrid.exportdata('tsv', 'jqxGrid');\n                },\n                htmlBtnOnClick: function () {\n                    this.$refs.myGrid.exportdata('html', 'jqxGrid');\n                },\n                jsonBtnOnClick: function () {\n                    this.$refs.myGrid.exportdata('json', 'jqxGrid');\n                },\n                pdfBtnOnClick: function () {\n                    this.$refs.myGrid.exportdata('pdf', 'jqxGrid');\n                }\n            }\n        }\n    <\/script>\n")])])])]),n("p",[t._v("*generatedata function is implemented in the generatedata.js. The file is included in the download package and can be found in the installation_folder/demos/jqxgrid folder.")])],1)},dt=[],lt=n("3af0"),ct={components:{JqxTabs:Y["a"],JqxGrid:b["a"],JqxButton:lt["a"]},data:function(){return{getWidth:"99%",dataAdapter:new jqx.dataAdapter(this.source),columns:[{text:"First Name",datafield:"firstname",width:130},{text:"Last Name",datafield:"lastname",width:130},{text:"Product",datafield:"productname",width:200},{text:"Available",datafield:"available",columntype:"checkbox",width:67,cellsalign:"center",align:"center"},{text:"Ship Date",datafield:"date",width:120,align:"right",cellsalign:"right",cellsformat:"d"},{text:"Quantity",datafield:"quantity",width:70,align:"right",cellsalign:"right"},{text:"Price",datafield:"price",cellsalign:"right",align:"right",cellsformat:"c2"}]}},beforeCreate:function(){this.source={localdata:generatedata(100,!1),datatype:"array",datafields:[{name:"firstname",type:"string"},{name:"lastname",type:"string"},{name:"productname",type:"string"},{name:"available",type:"bool"},{name:"date",type:"date"},{name:"quantity",type:"number"},{name:"price",type:"number"}]}},mounted:function(){this.$refs.code.innerHTML=formatCode(this.$refs.code.innerHTML)},methods:{excelBtnOnClick:function(){this.$refs.myGrid.exportdata("xls","jqxGrid")},xmlBtnOnClick:function(){this.$refs.myGrid.exportdata("xml","jqxGrid")},csvBtnOnClick:function(){this.$refs.myGrid.exportdata("csv","jqxGrid")},tsvBtnOnClick:function(){this.$refs.myGrid.exportdata("tsv","jqxGrid")},htmlBtnOnClick:function(){this.$refs.myGrid.exportdata("html","jqxGrid")},jsonBtnOnClick:function(){this.$refs.myGrid.exportdata("json","jqxGrid")},pdfBtnOnClick:function(){this.$refs.myGrid.exportdata("pdf","jqxGrid")}}},pt=ct,ut=Object(c["a"])(pt,st,dt,!1,null,null,null);ut.options.__file="DataExport.vue";var mt=ut.exports,ft=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"refresh-data"},[n("h1",[t._v("jQWidgets Grid Refresh Data")]),n("p",[t._v("\n            This demo illustrates how to dynamically update and clear the Vue Grid's source.\n        ")]),n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid",attrs:{theme:"material",width:t.getWidth,source:t.dataAdapter,columns:t.columns}}),n("div",{staticStyle:{height:"25px","margin-top":"15px"}},[n("JqxButton",{attrs:{theme:"material"},on:{click:function(e){t.refreshBtnOnClick()}}},[t._v("Refresh Data")]),n("JqxButton",{attrs:{theme:"material"},on:{click:function(e){t.clearBtnOnClick()}}},[t._v("Clear")])],1)],1),n("div",[n("pre",[n("code",{ref:"code"},[t._v("\n    <template>\n        <div>\n            <JqxGrid ref=\"myGrid\" :theme=\"'material'\"\n                     :width=\"getWidth\" :source=\"dataAdapter\" :columns=\"columns\">\n            </JqxGrid>\n            <div style=\"height: 20px; margin-top: 15px\">\n                <JqxButton :theme=\"'material'\" @click=\"refreshBtnOnClick()\">Refresh Data</JqxButton>\n                <JqxButton :theme=\"'material'\" @click=\"clearBtnOnClick()\">Clear</JqxButton>\n            </div>\n        </div>\n    </template>\n    <script>\n        import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n        import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n        export default {\n            components: {\n                JqxGrid,\n                JqxButton\n            },\n            data: function () {\n                return {\n                    getWidth: '99%',\n                    dataAdapter: new jqx.dataAdapter(this.source),\n                    columns: [\n                        { text: 'First Name', dataField: 'firstname', width: 130 },\n                        { text: 'Last Name', dataField: 'lastname', width: 130 },\n                        { text: 'Product', dataField: 'productname', width: 180 },\n                        { text: 'Quantity', dataField: 'quantity', width: 80, cellsalign: 'right' },\n                        { text: 'Unit Price', dataField: 'price', width: 90, cellsalign: 'right', cellsformat: 'c2' },\n                        { text: 'Total', dataField: 'total', cellsalign: 'right', minwidth: 100, cellsformat: 'c2' }\n                    ]\n                }\n            },\n            beforeCreate: function () {\n                this.source = {\n                    localdata: generatedata(100, false),\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ],\n                    datatype: 'array'\n                };\n            },\n            methods: {\n                refreshBtnOnClick: function () {\n                    this.source.localdata = generatedata(100, false);\n                    // passing `cells` to the `updatebounddata` method will refresh only the cells values when the new rows count is equal to the previous rows count.\n                    this.$refs.myGrid.updatebounddata('cells');\n                },\n                clearBtnOnClick: function () {\n                    this.$refs.myGrid.clear();\n                }\n            }\n        }\n    <\/script>\n    <style>\n        .jqx-button {\n            width: 50px;\n            display: inline;\n            margin-right: 5px;\n        }\n    </style>\n")])])])]),n("p",[t._v("*generatedata function is implemented in the generatedata.js. The file is included in the download package and can be found in the installation_folder/demos/jqxgrid folder.")])],1)},yt=[],ht={components:{JqxTabs:Y["a"],JqxGrid:b["a"],JqxButton:lt["a"]},data:function(){return{getWidth:"99%",dataAdapter:new jqx.dataAdapter(this.source),columns:[{text:"First Name",dataField:"firstname",width:130},{text:"Last Name",dataField:"lastname",width:130},{text:"Product",dataField:"productname",width:180},{text:"Quantity",dataField:"quantity",width:80,cellsalign:"right"},{text:"Unit Price",dataField:"price",width:90,cellsalign:"right",cellsformat:"c2"},{text:"Total",dataField:"total",cellsalign:"right",minwidth:100,cellsformat:"c2"}]}},beforeCreate:function(){this.source={localdata:generatedata(100,!1),datafields:[{name:"firstname",type:"string"},{name:"lastname",type:"string"},{name:"productname",type:"string"},{name:"quantity",type:"number"},{name:"price",type:"number"},{name:"total",type:"number"}],datatype:"array"}},mounted:function(){this.$refs.code.innerHTML=formatCode(this.$refs.code.innerHTML)},methods:{refreshBtnOnClick:function(){this.source.localdata=generatedata(100,!1),this.$refs.myGrid.updatebounddata("cells")},clearBtnOnClick:function(){this.$refs.myGrid.clear()}}},vt=ht,xt=(n("a7ac"),Object(c["a"])(vt,ft,yt,!1,null,"cd60ee7a",null));xt.options.__file="RefreshData.vue";var gt=xt.exports,Ct=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"row-details"},[n("h1",[t._v("jQWidgets Grid Row Details")]),n("p",[t._v("\n            This demo shows how to display row details after each Vue Grid row.\n        ")]),n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid",attrs:{theme:"material",width:t.getWidth,source:t.dataAdapter,columns:t.columns,rowdetails:!0,initrowdetails:t.initrowdetails,rowdetailstemplate:t.rowdetailstemplate,ready:t.ready}})],1),n("div",[n("pre",[n("code",{ref:"code"},[t._v("\n    <template>\n        <div>\n           <JqxGrid ref=\"myGrid\" :theme=\"'material'\"\n                    :width=\"getWidth\" :source=\"dataAdapter\" :columns=\"columns\"\n                    :rowdetails=\"true\" :initrowdetails=\"initrowdetails\"\n                    :rowdetailstemplate=\"rowdetailstemplate\" :ready=\"ready\">\n           </JqxGrid>\n        </div>\n    </template>\n    <script>\n        import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n        import JqxTabs from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxtabs.vue';\n        export default {\n            components: {\n                JqxGrid,\n                JqxTabs\n            },\n            data: function () {\n                return {\n                    getWidth: '99%',\n                    dataAdapter: new jqx.dataAdapter(this.source),\n                    columns: [\n                        { text: 'First Name', datafield: 'firstname' },\n                        { text: 'Last Name', datafield: 'lastname' },\n                        { text: 'Title', datafield: 'title' },\n                        { text: 'City', datafield: 'city' },\n                        { text: 'Country', datafield: 'country' }\n                    ],\n                    rowdetailstemplate: {\n                        rowdetails: '<div style=\"margin: 10px;\"><ul style=\"margin-left: 30px;\"><li class=\"title\"></li><li>Notes</li></ul><div class=\"information\"></div><div class=\"notes\"></div></div>',\n                        rowdetailsheight: 200\n                    }\n                }\n            },\n            beforeCreate: function () {\n                const generateData = () => {\n                    let data = new Array();\n                    let firstNames = ['Nancy', 'Andrew', 'Janet', 'Margaret', 'Steven', 'Michael', 'Robert', 'Laura', 'Anne'];\n                    let lastNames = ['Davolio', 'Fuller', 'Leverling', 'Peacock', 'Buchanan', 'Suyama', 'King', 'Callahan', 'Dodsworth'];\n                    let titles = ['Sales Representative', 'Vice President, Sales', 'Sales Representative', 'Sales Representative', 'Sales Manager', 'Sales Representative', 'Sales Representative', 'Inside Sales Coordinator', 'Sales Representative'];\n                    let titleofcourtesy = ['Ms.', 'Dr.', 'Ms.', 'Mrs.', 'Mr.', 'Mr.', 'Mr.', 'Ms.', 'Ms.'];\n                    let birthdate = ['08-Dec-48', '19-Feb-52', '30-Aug-63', '19-Sep-37', '04-Mar-55', '02-Jul-63', '29-May-60', '09-Jan-58', '27-Jan-66'];\n                    let hiredate = ['01-May-92', '14-Aug-92', '01-Apr-92', '03-May-93', '17-Oct-93', '17-Oct-93', '02-Jan-94', '05-Mar-94', '15-Nov-94'];\n                    let address = ['507 - 20th Ave. E. Apt. 2A', '908 W. Capital Way', '722 Moss Bay Blvd.', '4110 Old Redmond Rd.', '14 Garrett Hill', 'Coventry House', 'Miner Rd.', 'Edgeham Hollow', 'Winchester Way', '4726 - 11th Ave. N.E.', '7 Houndstooth Rd.'];\n                    let city = ['Seattle', 'Tacoma', 'Kirkland', 'Redmond', 'London', 'London', 'London', 'Seattle', 'London'];\n                    let postalcode = ['98122', '98401', '98033', '98052', 'SW1 8JR', 'EC2 7JR', 'RG1 9SP', '98105', 'WG2 7LT'];\n                    let country = ['USA', 'USA', 'USA', 'USA', 'UK', 'UK', 'UK', 'USA', 'UK'];\n                    let homephone = ['(206) 555-9857', '(206) 555-9482', '(206) 555-3412', '(206) 555-8122', '(71) 555-4848', '(71) 555-7773', '(71) 555-5598', '(206) 555-1189', '(71) 555-4444'];\n                    let notes = ['Education includes a BA in psychology from Colorado State University in 1970.  She also completed `The Art of the Cold Call.`  Nancy is a member of Toastmasters International.',\n                        'Andrew received his BTS commercial in 1974 and a Ph.D. in international marketing from the University of Dallas in 1981.  He is fluent in French and Italian and reads German.  He joined the company as a sales representative, was promoted to sales manager in January 1992 and to vice president of sales in March 1993.  Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.',\n                        'Janet has a BS degree in chemistry from Boston College (1984).  She has also completed a certificate program in food retailing management.  Janet was hired as a sales associate in 1991 and promoted to sales representative in February 1992.',\n                        'Margaret holds a BA in English literature from Concordia College (1958) and an MA from the American Institute of Culinary Arts (1966).  She was assigned to the London office temporarily from July through November 1992.',\n                        'Steven Buchanan graduated from St. Andrews University, Scotland, with a BSC degree in 1976.  Upon joining the company as a sales representative in 1992, he spent 6 months in an orientation program at the Seattle office and then returned to his permanent post in London.  He was promoted to sales manager in March 1993.  Mr. Buchanan has completed the courses `Successful Telemarketing` and `International Sales Management.`  He is fluent in French.',\n                        'Michael is a graduate of Sussex University (MA, economics, 1983) and the University of California at Los Angeles (MBA, marketing, 1986).  He has also taken the courses `Multi-Cultural Selling` and `Time Management for the Sales Professional.`  He is fluent in Japanese and can read and write French, Portuguese, and Spanish.',\n                        'Robert King served in the Peace Corps and traveled extensively before completing his degree in English at the University of Michigan in 1992, the year he joined the company.  After completing a course entitled `Selling in Europe,` he was transferred to the London office in March 1993.',\n                        'Laura received a BA in psychology from the University of Washington.  She has also completed a course in business French.  She reads and writes French.',\n                        'Anne has a BA degree in English from St. Lawrence College.  She is fluent in French and German.'];\n                    let k = 0;\n                    for (let i = 0; i < firstNames.length; i++) {\n                        let datarecord = {};\n                        datarecord['firstname'] = firstNames[k];\n                        datarecord['lastname'] = lastNames[k];\n                        datarecord['title'] = titles[k];\n                        datarecord['titleofcourtesy'] = titleofcourtesy[k];\n                        datarecord['birthdate'] = birthdate[k];\n                        datarecord['hiredate'] = hiredate[k];\n                        datarecord['address'] = address[k];\n                        datarecord['city'] = city[k];\n                        datarecord['postalcode'] = postalcode[k];\n                        datarecord['country'] = country[k];\n                        datarecord['homephone'] = homephone[k];\n                        datarecord['notes'] = notes[k];\n                        data[i] = datarecord;\n                        k++;\n                    }\n                    return data;\n                };\n                this.source = {\n                    localdata: generateData(),\n                    datatype: 'array'\n                };\n            },\n            methods: {\n                initrowdetails: function (index, parentElement, gridElement, datarecord) {\n                    let tabsdiv = parentElement.children[0];\n                    let information = tabsdiv.children[1];\n                    let notes = tabsdiv.children[2];\n                    let title = tabsdiv.children[0].children[0];\n                    if (tabsdiv != null) {\n                        title.innerHTML = datarecord.firstname;\n                        let container = document.createElement('div');\n                        container.style.margin = '5px';\n                        information.appendChild(container);\n                        let photocolumn = document.createElement('div');\n                        let leftcolumn = document.createElement('div');\n                        let rightcolumn = document.createElement('div');\n                        photocolumn.style.cssText = 'float: left; width: 15%';\n                        leftcolumn.style.cssText = 'float: left; width: 45%';\n                        rightcolumn.style.cssText = 'float: left; width: 40%';\n                        container.appendChild(photocolumn);\n                        container.appendChild(leftcolumn);\n                        container.appendChild(rightcolumn);\n                        let image = document.createElement('div');\n                        image.style.marginTop = '10px';\n                        let photo = document.createElement('div');\n                        photo.style.margin = '10px';\n                        photo.className = 'jqx-rc-all';\n                        photo.innerHTML = '<b>Photo:</b>';\n                        let img = document.createElement('img');\n                        img.height = 60;\n                        img.style.marginLeft = '10px';\n                        img.src = '/images/' + datarecord.firstname.toLowerCase() + '.png';\n                        image.appendChild(photo);\n                        image.appendChild(img);\n                        photocolumn.appendChild(image);\n                        let firstname = '<div style=\"margin: 10px;\"><b>First Name:</b> ' + datarecord.firstname + '</div>';\n                        let lastname = '<div style=\"margin: 10px;\"><b>Last Name:</b> ' + datarecord.lastname + '</div>';\n                        title = '<div style=\"margin: 10px;\"><b>Title:</b> ' + datarecord.title + '</div>';\n                        let address = '<div style=\"margin: 10px;\"><b>Address:</b> ' + datarecord.address + '</div>';\n                        leftcolumn.insertAdjacentHTML('beforeend', firstname);\n                        leftcolumn.insertAdjacentHTML('beforeend', lastname);\n                        leftcolumn.insertAdjacentHTML('beforeend', title);\n                        leftcolumn.insertAdjacentHTML('beforeend', address);\n                        let postalcode = '<div style=\"margin: 10px;\"><b>Postal Code:</b> ' + datarecord.postalcode + '</div>';\n                        let city = '<div style=\"margin: 10px;\"><b>City:</b> ' + datarecord.city + '</div>';\n                        let phone = '<div style=\"margin: 10px;\"><b>Phone:</b> ' + datarecord.homephone + '</div>';\n                        let hiredate = '<div style=\"margin: 10px;\"><b>Hire Date:</b> ' + datarecord.hiredate + '</div>';\n                        rightcolumn.insertAdjacentHTML('beforeend', postalcode);\n                        rightcolumn.insertAdjacentHTML('beforeend', city);\n                        rightcolumn.insertAdjacentHTML('beforeend', phone);\n                        rightcolumn.insertAdjacentHTML('beforeend', hiredate);\n                        let notesContainer = document.createElement('div');\n                        notesContainer.style.cssText = 'white-space: normal; margin: 5px;';\n                        notesContainer.innerHTML = '<span>' + datarecord.notes + '</span>';\n                        notes.appendChild(notesContainer);\n                        tabsdiv.className = 'tabs';\n                        jqwidgets.createInstance('.tabs', 'jqxTabs', { theme: 'material', width: '95%', height: 170 })\n                    }\n                },\n                ready: function () {\n                    this.$refs.myGrid.showrowdetails(1);\n                }\n            }\n        }\n    <\/script>\n")])])])])],1)},wt=[],_t={components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{getWidth:"99%",dataAdapter:new jqx.dataAdapter(this.source),columns:[{text:"First Name",datafield:"firstname"},{text:"Last Name",datafield:"lastname"},{text:"Title",datafield:"title"},{text:"City",datafield:"city"},{text:"Country",datafield:"country"}],rowdetailstemplate:{rowdetails:'<div style="margin: 10px;"><ul style="margin-left: 30px;"><li class="title"></li><li>Notes</li></ul><div class="information"></div><div class="notes"></div></div>',rowdetailsheight:200}}},beforeCreate:function(){var t=function(){for(var t=new Array,e=["Nancy","Andrew","Janet","Margaret","Steven","Michael","Robert","Laura","Anne"],n=["Davolio","Fuller","Leverling","Peacock","Buchanan","Suyama","King","Callahan","Dodsworth"],a=["Sales Representative","Vice President, Sales","Sales Representative","Sales Representative","Sales Manager","Sales Representative","Sales Representative","Inside Sales Coordinator","Sales Representative"],i=["Ms.","Dr.","Ms.","Mrs.","Mr.","Mr.","Mr.","Ms.","Ms."],r=["08-Dec-48","19-Feb-52","30-Aug-63","19-Sep-37","04-Mar-55","02-Jul-63","29-May-60","09-Jan-58","27-Jan-66"],o=["01-May-92","14-Aug-92","01-Apr-92","03-May-93","17-Oct-93","17-Oct-93","02-Jan-94","05-Mar-94","15-Nov-94"],s=["507 - 20th Ave. E. Apt. 2A","908 W. Capital Way","722 Moss Bay Blvd.","4110 Old Redmond Rd.","14 Garrett Hill","Coventry House","Miner Rd.","Edgeham Hollow","Winchester Way","4726 - 11th Ave. N.E.","7 Houndstooth Rd."],d=["Seattle","Tacoma","Kirkland","Redmond","London","London","London","Seattle","London"],l=["98122","98401","98033","98052","SW1 8JR","EC2 7JR","RG1 9SP","98105","WG2 7LT"],c=["USA","USA","USA","USA","UK","UK","UK","USA","UK"],p=["(206) 555-9857","(206) 555-9482","(206) 555-3412","(206) 555-8122","(71) 555-4848","(71) 555-7773","(71) 555-5598","(206) 555-1189","(71) 555-4444"],u=["Education includes a BA in psychology from Colorado State University in 1970.  She also completed `The Art of the Cold Call.`  Nancy is a member of Toastmasters International.","Andrew received his BTS commercial in 1974 and a Ph.D. in international marketing from the University of Dallas in 1981.  He is fluent in French and Italian and reads German.  He joined the company as a sales representative, was promoted to sales manager in January 1992 and to vice president of sales in March 1993.  Andrew is a member of the Sales Management Roundtable, the Seattle Chamber of Commerce, and the Pacific Rim Importers Association.","Janet has a BS degree in chemistry from Boston College (1984).  She has also completed a certificate program in food retailing management.  Janet was hired as a sales associate in 1991 and promoted to sales representative in February 1992.","Margaret holds a BA in English literature from Concordia College (1958) and an MA from the American Institute of Culinary Arts (1966).  She was assigned to the London office temporarily from July through November 1992.","Steven Buchanan graduated from St. Andrews University, Scotland, with a BSC degree in 1976.  Upon joining the company as a sales representative in 1992, he spent 6 months in an orientation program at the Seattle office and then returned to his permanent post in London.  He was promoted to sales manager in March 1993.  Mr. Buchanan has completed the courses `Successful Telemarketing` and `International Sales Management.`  He is fluent in French.","Michael is a graduate of Sussex University (MA, economics, 1983) and the University of California at Los Angeles (MBA, marketing, 1986).  He has also taken the courses `Multi-Cultural Selling` and `Time Management for the Sales Professional.`  He is fluent in Japanese and can read and write French, Portuguese, and Spanish.","Robert King served in the Peace Corps and traveled extensively before completing his degree in English at the University of Michigan in 1992, the year he joined the company.  After completing a course entitled `Selling in Europe,` he was transferred to the London office in March 1993.","Laura received a BA in psychology from the University of Washington.  She has also completed a course in business French.  She reads and writes French.","Anne has a BA degree in English from St. Lawrence College.  She is fluent in French and German."],m=0,f=0;f<e.length;f++){var y={};y["firstname"]=e[m],y["lastname"]=n[m],y["title"]=a[m],y["titleofcourtesy"]=i[m],y["birthdate"]=r[m],y["hiredate"]=o[m],y["address"]=s[m],y["city"]=d[m],y["postalcode"]=l[m],y["country"]=c[m],y["homephone"]=p[m],y["notes"]=u[m],t[f]=y,m++}return t};this.source={localdata:t(),datatype:"array"}},mounted:function(){this.$refs.code.innerHTML=formatCode(this.$refs.code.innerHTML)},methods:{initrowdetails:function(t,e,n,a){var i=e.children[0],r=i.children[1],o=i.children[2],s=i.children[0].children[0];if(null!=i){s.innerHTML=a.firstname;var d=document.createElement("div");d.style.margin="5px",r.appendChild(d);var l=document.createElement("div"),c=document.createElement("div"),p=document.createElement("div");l.style.cssText="float: left; width: 15%",c.style.cssText="float: left; width: 45%",p.style.cssText="float: left; width: 40%",d.appendChild(l),d.appendChild(c),d.appendChild(p);var u=document.createElement("div");u.style.marginTop="10px";var m=document.createElement("div");m.style.margin="10px",m.className="jqx-rc-all",m.innerHTML="<b>Photo:</b>";var f=document.createElement("img");f.height=60,f.style.marginLeft="10px",f.src="./images/"+a.firstname.toLowerCase()+".png",u.appendChild(m),u.appendChild(f),l.appendChild(u);var y='<div style="margin: 10px;"><b>First Name:</b> '+a.firstname+"</div>",h='<div style="margin: 10px;"><b>Last Name:</b> '+a.lastname+"</div>";s='<div style="margin: 10px;"><b>Title:</b> '+a.title+"</div>";var v='<div style="margin: 10px;"><b>Address:</b> '+a.address+"</div>";c.insertAdjacentHTML("beforeend",y),c.insertAdjacentHTML("beforeend",h),c.insertAdjacentHTML("beforeend",s),c.insertAdjacentHTML("beforeend",v);var x='<div style="margin: 10px;"><b>Postal Code:</b> '+a.postalcode+"</div>",g='<div style="margin: 10px;"><b>City:</b> '+a.city+"</div>",C='<div style="margin: 10px;"><b>Phone:</b> '+a.homephone+"</div>",w='<div style="margin: 10px;"><b>Hire Date:</b> '+a.hiredate+"</div>";p.insertAdjacentHTML("beforeend",x),p.insertAdjacentHTML("beforeend",g),p.insertAdjacentHTML("beforeend",C),p.insertAdjacentHTML("beforeend",w);var _=document.createElement("div");_.style.cssText="white-space: normal; margin: 5px;",_.innerHTML="<span>"+a.notes+"</span>",o.appendChild(_),i.className="tabs",jqwidgets.createInstance(".tabs","jqxTabs",{theme:"material",width:"95%",height:170})}},ready:function(){this.$refs.myGrid.showrowdetails(1)}}},qt=_t,Gt=Object(c["a"])(qt,Ct,wt,!1,null,null,null);Gt.options.__file="RowDetails.vue";var bt=Gt.exports,Mt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"nested-grids"},[n("h1",[t._v("jQWidgets Grid Nested Grids")]),n("p",[t._v("\n            This is a demo of the nested grid feature in Vue Grid. The nested grid is a second grid which appears when a row selector is clicked in the first grid. The nested grid is usually used to show relevant information to the row in the first grid.\n        ")]),n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid",attrs:{theme:"material",width:t.getWidth,source:t.employeesAdapter,columns:t.columns,rowdetails:!0,rowsheight:35,initrowdetails:t.initRowDetails,ready:t.ready,rowdetailstemplate:t.rowdetailstemplate}})],1),n("div",[n("pre",[n("code",{ref:"code"},[t._v("\n    <template>\n        <div>\n           <JqxGrid ref=\"myGrid\" :theme=\"'material'\"\n                    :width=\"getWidth\" :source=\"employeesAdapter\" :columns=\"columns\"\n                    :rowdetails=\"true\" :rowsheight=\"35\" :initrowdetails=\"initRowDetails\"\n                    :ready=\"ready\" :rowdetailstemplate=\"rowdetailstemplate\">\n           </JqxGrid>\n        </div>\n    </template>\n    <script>\n        import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n        export default {\n            components: {\n                JqxGrid,\n            },\n            data: function () {\n                return {\n                    getWidth: '99%',\n                    employeesAdapter: new jqx.dataAdapter(this.source),\n                    columns: [\n                        { text: 'Photo', width: 50, cellsrenderer: this.photoRenderer },\n                        { text: 'First Name', datafield: 'FirstName', cellsrenderer: this.renderer },\n                        { text: 'Last Name', datafield: 'LastName', cellsrenderer: this.renderer },\n                        { text: 'Title', datafield: 'Title', cellsrenderer: this.renderer },\n                        { text: 'Address', datafield: 'Address', cellsrenderer: this.renderer },\n                        { text: 'City', datafield: 'City', cellsrenderer: this.renderer }\n                    ],\n                    rowdetailstemplate: {\n                        rowdetails: '<div id=\"nestedGrid\" style=\"margin: 10px;\"></div>', rowdetailsheight: 200, rowdetailshidden: true\n                    }\n                }\n            },\n            beforeCreate: function () {\n                this.source = {\n                    datafields: [\n                        { name: 'FirstName' },\n                        { name: 'LastName' },\n                        { name: 'Title' },\n                        { name: 'Address' },\n                        { name: 'City' }\n                    ],\n                    root: 'Employees',\n                    record: 'Employee',\n                    id: 'EmployeeID',\n                    datatype: 'xml',\n                    url: '/sampledata/employees.xml'\n                };\n                const ordersSource = {\n                    datafields: [\n                        { name: 'EmployeeID', type: 'string' },\n                        { name: 'ShipName', type: 'string' },\n                        { name: 'ShipAddress', type: 'string' },\n                        { name: 'ShipCity', type: 'string' },\n                        { name: 'ShipCountry', type: 'string' },\n                        { name: 'ShippedDate', type: 'date' }\n                    ],\n                    root: 'Orders',\n                    record: 'Order',\n                    datatype: 'xml',\n                    url: '/sampledata/orderdetails.xml'\n                }\n                this.ordersDataAdapter = new jqx.dataAdapter(ordersSource, { autoBind: true });\n                this.nestedGrids = [];\n            },\n            methods: {\n                initRowDetails: function (index, parentElement, gridElement, record) {\n                    let id = record.uid.toString();\n                    let nestedGridContainer = parentElement.children[0];\n                    this.nestedGrids[index] = nestedGridContainer;\n                    let filtergroup = new jqx.filter();\n                    let filter_or_operator = 1;\n                    let filtervalue = id;\n                    let filtercondition = 'equal';\n                    let filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n                    // fill the orders depending on the id.\n                    let orders = this.ordersDataAdapter.records;\n                    let ordersbyid = [];\n                    for (let i = 0; i < orders.length; i++) {\n                        let result = filter.evaluate(orders[i]['EmployeeID']);\n                        if (result)\n                            ordersbyid.push(orders[i]);\n                    }\n                    let ordersSource = {\n                        datafields: [\n                            { name: 'EmployeeID', type: 'string' },\n                            { name: 'ShipName', type: 'string' },\n                            { name: 'ShipAddress', type: 'string' },\n                            { name: 'ShipCity', type: 'string' },\n                            { name: 'ShipCountry', type: 'string' },\n                            { name: 'ShippedDate', type: 'date' }\n                        ],\n                        id: 'OrderID',\n                        localdata: ordersbyid\n                    }\n                    let nestedGridAdapter = new jqx.dataAdapter(ordersSource);\n                    if (nestedGridContainer != null) {\n                        let settings = {\n                            theme: 'material',\n                            width: '95%',\n                            height: '90%',\n                            source: nestedGridAdapter,\n                            columns: [\n                                { text: 'Ship Name', datafield: 'ShipName' },\n                                { text: 'Ship Address', datafield: 'ShipAddress' },\n                                { text: 'Ship City', datafield: 'ShipCity' },\n                                { text: 'Ship Country', datafield: 'ShipCountry' },\n                                { text: 'Shipped Date', datafield: 'ShippedDate' }\n                            ]\n                        };\n                        jqwidgets.createInstance(`#${nestedGridContainer.id}`, 'jqxGrid', settings);\n                    }\n                },\n                photoRenderer: function (row, column, value) {\n                    let name = this.$refs.myGrid.getrowdata(row).FirstName;\n                    let imgurl = '/images/' + name.toLowerCase() + '.png';\n                    let img = '<div style=\"background: white;\"><img style=\"margin: 2px; margin-left: 10px;\" width=\"32\" height=\"32\" src=\"' + imgurl + '\"></div>';\n                    return img;\n                },\n                renderer: function (row, column, value) {\n                    return '<span style=\"margin-left: 4px; margin-top: 9px; float: left;\">' + value + '</span>';\n                },\n                ready: function () {\n                    this.$refs.myGrid.showrowdetails(1);\n                }\n            }\n        }\n    <\/script>\n")])])])])],1)},jt=[],St=(n("6b54"),{components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{getWidth:"99%",employeesAdapter:new jqx.dataAdapter(this.source),columns:[{text:"Photo",width:50,cellsrenderer:this.photoRenderer},{text:"First Name",datafield:"FirstName",cellsrenderer:this.renderer},{text:"Last Name",datafield:"LastName",cellsrenderer:this.renderer},{text:"Title",datafield:"Title",cellsrenderer:this.renderer},{text:"Address",datafield:"Address",cellsrenderer:this.renderer},{text:"City",datafield:"City",cellsrenderer:this.renderer}],rowdetailstemplate:{rowdetails:'<div id="nestedGrid" style="margin: 10px;"></div>',rowdetailsheight:200,rowdetailshidden:!0}}},beforeCreate:function(){this.source={datafields:[{name:"FirstName"},{name:"LastName"},{name:"Title"},{name:"Address"},{name:"City"}],root:"Employees",record:"Employee",id:"EmployeeID",datatype:"xml",url:"./sampledata/employees.xml"};var t={datafields:[{name:"EmployeeID",type:"string"},{name:"ShipName",type:"string"},{name:"ShipAddress",type:"string"},{name:"ShipCity",type:"string"},{name:"ShipCountry",type:"string"},{name:"ShippedDate",type:"date"}],root:"Orders",record:"Order",datatype:"xml",url:"./sampledata/orderdetails.xml"};this.ordersDataAdapter=new jqx.dataAdapter(t,{autoBind:!0}),this.nestedGrids=[]},mounted:function(){this.$refs.code.innerHTML=formatCode(this.$refs.code.innerHTML)},methods:{initRowDetails:function(t,e,n,a){var i=a.uid.toString(),r=e.children[0];this.nestedGrids[t]=r;for(var o=new jqx.filter,s=i,d="equal",l=o.createfilter("stringfilter",s,d),c=this.ordersDataAdapter.records,p=[],u=0;u<c.length;u++){var m=l.evaluate(c[u]["EmployeeID"]);m&&p.push(c[u])}var f={datafields:[{name:"EmployeeID",type:"string"},{name:"ShipName",type:"string"},{name:"ShipAddress",type:"string"},{name:"ShipCity",type:"string"},{name:"ShipCountry",type:"string"},{name:"ShippedDate",type:"date"}],id:"OrderID",localdata:p},y=new jqx.dataAdapter(f);if(null!=r){var h={theme:"material",width:"95%",height:"90%",source:y,columns:[{text:"Ship Name",datafield:"ShipName"},{text:"Ship Address",datafield:"ShipAddress"},{text:"Ship City",datafield:"ShipCity"},{text:"Ship Country",datafield:"ShipCountry"},{text:"Shipped Date",datafield:"ShippedDate"}]};jqwidgets.createInstance("#".concat(r.id),"jqxGrid",h)}},photoRenderer:function(t,e,n){var a=this.$refs.myGrid.getrowdata(t).FirstName,i="./images/"+a.toLowerCase()+".png",r='<div style="background: white;"><img style="margin: 2px; margin-left: 10px;" width="32" height="32" src="'+i+'"></div>';return r},renderer:function(t,e,n){return'<span style="margin-left: 4px; margin-top: 9px; float: left;">'+n+"</span>"},ready:function(){this.$refs.myGrid.showrowdetails(1)}}}),Tt=St,At=Object(c["a"])(Tt,Mt,jt,!1,null,null,null);At.options.__file="NestedGrids.vue";var Nt=At.exports,Jt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"virtual-scrolling"},[n("h1",[t._v("jQWidgets Grid Virtual Scrolling")]),n("p",[t._v("\n            In this demo Vue Grid uses a virtualized scrolling which enables you to handle very large data sets without any impact on client side performance. The demo shows scrolling through 1 million records.\n        ")]),n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.getWidth,source:t.dataAdapter,columns:t.columns,virtualmode:!0,rendergridrows:t.rendergridrows}})],1),n("div",[n("pre",[n("code",{ref:"code"},[t._v("\n    <template>\n        <div>\n           <JqxGrid :theme=\"'material'\" :width=\"getWidth\" :source=\"dataAdapter\" :columns=\"columns\"\n                    :virtualmode=\"true\" :rendergridrows=\"rendergridrows\">\n           </JqxGrid>\n        </div>\n    </template>\n    <script>\n        import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n        export default {\n            components: {\n                JqxGrid\n            },\n            data: function () {\n                return {\n                    getWidth: '99%',\n                    dataAdapter: new jqx.dataAdapter(this.source),\n                    columns: [\n                        { text: 'Id', datafield: 'id', width: 100 },\n                        { text: 'First Name', datafield: 'firstname', width: 120 },\n                        { text: 'Last Name', datafield: 'lastname', width: 120 },\n                        { text: 'Product', datafield: 'productname', width: 180 },\n                        { text: 'Quantity', datafield: 'quantity', width: 80, cellsalign: 'right' },\n                        { text: 'Unit Price', datafield: 'price', width: 90, cellsalign: 'right', cellsformat: 'c2' },\n                        { text: 'Total', datafield: 'total', cellsalign: 'right', cellsformat: 'c2' }\n                    ]\n                }\n            },\n            beforeCreate: function () {\n                this.source = {\n                    datatype: 'array',\n                    localdata: {},\n                    totalrecords: 1000000\n                }\n                this.firstNames = [\n                    'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n                ];\n                this.lastNames = [\n                    'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n                ];\n                this.productNames = [\n                    'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n                ];\n                this.priceValues = [\n                    '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n                ];\n            },\n            methods: {\n                generateData: function (startindex, endindex) {\n                    let data = {};\n                    for (let i = startindex; i < endindex; i++) {\n                        let row = {};\n                        let productindex = Math.floor(Math.random() * this.productNames.length);\n                        let price = parseFloat(this.priceValues[productindex]);\n                        let quantity = 1 + Math.round(Math.random() * 10);\n                        row['id'] = i;\n                        row['firstname'] = this.firstNames[Math.floor(Math.random() * this.firstNames.length)];\n                        row['lastname'] = this.lastNames[Math.floor(Math.random() * this.lastNames.length)];\n                        row['productname'] = this.productNames[productindex];\n                        row['price'] = price;\n                        row['quantity'] = quantity;\n                        row['total'] = price * quantity;\n                        data[i] = row;\n                    }\n                    return data;\n                },\n                rendergridrows: function (params) {\n                    let data = this.generateData(params.startindex, params.endindex);\n                    return data;\n                }\n            }\n        }\n    <\/script>\n")])])])])],1)},Dt=[],Et={components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{getWidth:"99%",dataAdapter:new jqx.dataAdapter(this.source),columns:[{text:"Id",datafield:"id",width:100},{text:"First Name",datafield:"firstname",width:120},{text:"Last Name",datafield:"lastname",width:120},{text:"Product",datafield:"productname",width:180},{text:"Quantity",datafield:"quantity",width:80,cellsalign:"right"},{text:"Unit Price",datafield:"price",width:90,cellsalign:"right",cellsformat:"c2"},{text:"Total",datafield:"total",cellsalign:"right",cellsformat:"c2"}]}},beforeCreate:function(){this.source={datatype:"array",localdata:{},totalrecords:1e6},this.firstNames=["Andrew","Nancy","Shelley","Regina","Yoshi","Antoni","Mayumi","Ian","Peter","Lars","Petra","Martin","Sven","Elio","Beate","Cheryl","Michael","Guylene"],this.lastNames=["Fuller","Davolio","Burke","Murphy","Nagase","Saavedra","Ohno","Devling","Wilson","Peterson","Winkler","Bein","Petersen","Rossi","Vileid","Saylor","Bjorn","Nodier"],this.productNames=["Black Tea","Green Tea","Caffe Espresso","Doubleshot Espresso","Caffe Latte","White Chocolate Mocha","Cramel Latte","Caffe Americano","Cappuccino","Espresso Truffle","Espresso con Panna","Peppermint Mocha Twist"],this.priceValues=["2.25","1.5","3.0","3.3","4.5","3.6","3.8","2.5","5.0","1.75","3.25","4.0"]},mounted:function(){this.$refs.code.innerHTML=formatCode(this.$refs.code.innerHTML)},methods:{generateData:function(t,e){for(var n={},a=t;a<e;a++){var i={},r=Math.floor(Math.random()*this.productNames.length),o=parseFloat(this.priceValues[r]),s=1+Math.round(10*Math.random());i["id"]=a,i["firstname"]=this.firstNames[Math.floor(Math.random()*this.firstNames.length)],i["lastname"]=this.lastNames[Math.floor(Math.random()*this.lastNames.length)],i["productname"]=this.productNames[r],i["price"]=o,i["quantity"]=s,i["total"]=o*s,n[a]=i}return n},rendergridrows:function(t){var e=this.generateData(t.startindex,t.endindex);return e}}},Bt=Et,Ft=Object(c["a"])(Bt,Jt,Dt,!1,null,null,null);Ft.options.__file="VirtualScrolling.vue";var kt=Ft.exports,Ot=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"virtual-paging"},[n("h1",[t._v("jQWidgets Grid Virtual Paging")]),n("p",[t._v("\n            In this demo Grid uses a virtualized paging which enables you to handle very large data sets without any impact on client side performance.\n        ")]),n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.getWidth,source:t.dataAdapter,columns:t.columns,autoheight:!0,virtualmode:!0,pageable:!0,rendergridrows:t.rendergridrows}})],1),n("div",[n("pre",[n("code",{ref:"code"},[t._v("\n    <template>\n        <div>\n           <JqxGrid :theme=\"'material'\" :width=\"getWidth\" :source=\"dataAdapter\" \n                    :columns=\"columns\" :autoheight=\"true\" :virtualmode=\"true\" \n                    :pageable=\"true\" :rendergridrows=\"rendergridrows\">\n           </JqxGrid>\n        </div>\n    </template>\n    <script>\n        import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n        export default {\n            components: {\n                JqxGrid\n            },\n            data: function () {\n                return {\n                    getWidth: '99%',\n                    dataAdapter: new jqx.dataAdapter(this.source),\n                    columns: [\n                        { text: 'Id', datafield: 'id', width: 50 },\n                        { text: 'First Name', datafield: 'firstname', width: 120 },\n                        { text: 'Last Name', datafield: 'lastname', width: 120 },\n                        { text: 'Product', datafield: 'productname', width: 180 },\n                        { text: 'Quantity', datafield: 'quantity', width: 100, cellsalign: 'right' },\n                        { text: 'Unit Price', datafield: 'price', width: 100, cellsalign: 'right', cellsformat: 'c2' },\n                        { text: 'Total', datafield: 'total', cellsrenderer: this.totalcolumnrenderer, cellsalign: 'right' }\n                    ]\n                }\n            },\n            beforeCreate: function () {\n                this.source = {\n                    datatype: 'array',\n                    localdata: {},\n                    totalrecords: 1000000\n                }\n                this.firstNames = [\n                    'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n                ];\n                this.lastNames = [\n                    'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n                ];\n                this.productNames = [\n                    'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n                ];\n                this.priceValues = [\n                    '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n                ];\n            },\n            methods: {\n                generateData: function (startindex, endindex) {\n                    let data = {};\n                    for (let i = startindex; i < endindex; i++) {\n                        let row = {};\n                        let productindex = Math.floor(Math.random() * this.productNames.length);\n                        let price = parseFloat(this.priceValues[productindex]);\n                        let quantity = 1 + Math.round(Math.random() * 10);\n                        row['id'] = i;\n                        row['firstname'] = this.firstNames[Math.floor(Math.random() * this.firstNames.length)];\n                        row['lastname'] = this.lastNames[Math.floor(Math.random() * this.lastNames.length)];\n                        row['productname'] = this.productNames[productindex];\n                        row['price'] = price;\n                        row['quantity'] = quantity;\n                        row['total'] = price * quantity;\n                        data[i] = row;\n                    }\n                    return data;\n                },\n                rendergridrows: function (params) {\n                    let data = this.generateData(params.startindex, params.endindex);\n                    return data;\n                },\n                totalcolumnrenderer: function (row, column, cellvalue) {\n                    let newCellValue = jqx.dataFormat.formatnumber(cellvalue, 'c2');\n                    return '<span style=\"margin: 6px 3px; font-size: 12px; float: right; font-weight: bold;\">' + newCellValue + '</span>';\n                }\n            }\n        }\n    <\/script>\n")])])])])],1)},$t=[],Pt={components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{getWidth:"99%",dataAdapter:new jqx.dataAdapter(this.source),columns:[{text:"Id",datafield:"id",width:50},{text:"First Name",datafield:"firstname",width:120},{text:"Last Name",datafield:"lastname",width:120},{text:"Product",datafield:"productname",width:180},{text:"Quantity",datafield:"quantity",width:100,cellsalign:"right"},{text:"Unit Price",datafield:"price",width:100,cellsalign:"right",cellsformat:"c2"},{text:"Total",datafield:"total",cellsrenderer:this.totalcolumnrenderer,cellsalign:"right"}]}},beforeCreate:function(){this.source={datatype:"array",localdata:{},totalrecords:1e6},this.firstNames=["Andrew","Nancy","Shelley","Regina","Yoshi","Antoni","Mayumi","Ian","Peter","Lars","Petra","Martin","Sven","Elio","Beate","Cheryl","Michael","Guylene"],this.lastNames=["Fuller","Davolio","Burke","Murphy","Nagase","Saavedra","Ohno","Devling","Wilson","Peterson","Winkler","Bein","Petersen","Rossi","Vileid","Saylor","Bjorn","Nodier"],this.productNames=["Black Tea","Green Tea","Caffe Espresso","Doubleshot Espresso","Caffe Latte","White Chocolate Mocha","Cramel Latte","Caffe Americano","Cappuccino","Espresso Truffle","Espresso con Panna","Peppermint Mocha Twist"],this.priceValues=["2.25","1.5","3.0","3.3","4.5","3.6","3.8","2.5","5.0","1.75","3.25","4.0"]},mounted:function(){this.$refs.code.innerHTML=formatCode(this.$refs.code.innerHTML);for(var t=document.getElementsByClassName("jqx-button"),e=0;e<t.length;e++)t[e].removeAttribute("type")},methods:{generateData:function(t,e){for(var n={},a=t;a<e;a++){var i={},r=Math.floor(Math.random()*this.productNames.length),o=parseFloat(this.priceValues[r]),s=1+Math.round(10*Math.random());i["id"]=a,i["firstname"]=this.firstNames[Math.floor(Math.random()*this.firstNames.length)],i["lastname"]=this.lastNames[Math.floor(Math.random()*this.lastNames.length)],i["productname"]=this.productNames[r],i["price"]=o,i["quantity"]=s,i["total"]=o*s,n[a]=i}return n},rendergridrows:function(t){var e=this.generateData(t.startindex,t.endindex);return e},totalcolumnrenderer:function(t,e,n){var a=jqx.dataFormat.formatnumber(n,"c2");return'<span style="margin: 6px 3px; font-size: 12px; float: right; font-weight: bold;">'+a+"</span>"}}},Rt=Pt,Lt=Object(c["a"])(Rt,Ot,$t,!1,null,null,null);Lt.options.__file="VirtualPaging.vue";var It=Lt.exports,zt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"getting-started"},[n("h1",[t._v("Vue Grid - Getting Started")]),n("h3",[t._v("Overview")]),n("p",[t._v("\n            Ð¢he Grid component for Vue is a powerful widget that displays tabular data. It offers rich support for interacting with data, including paging, grouping, sorting, filtering and editing.\n        ")]),n("h3",[t._v("Installation")]),t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),n("div",[n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:"99%",source:t.dataAdapter,columns:t.columns}})],1),n("div",[n("pre",[n("code",{ref:"code"},[t._v(" <template>\n     <JqxGrid :width=\"'98%'\" :source=\"dataAdapter\" :columns=\"columns\" />\n </template>\n \n <script>\n import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n export default {\n     components: {\n         JqxGrid\n     },\n     data: function () {\n         return {\n             dataAdapter: new jqx.dataAdapter(this.source),\n             columns: [\n                 { text: 'Contact Name', datafield: 'ContactName', width: 240 },\n                 { text: 'Contact Title', datafield: 'Title', width: 240 },\n                 { text: 'City', datafield: 'City', width: 150 },\n                 { text: 'Country', datafield: 'Country' }\n             ]\n         }\n     },\n     beforeCreate: function () {\n         this.source = {\n             localdata: [\n                 ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n                 ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n                 ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n                 ['Thomas Hardy', 'Sales Representative', 'London', 'UK'],\n                 ['Christina Berglund', 'Order Administrator', 'Lule', 'Sweden'],\n                 ['Hanna Moos', 'Sales Representative', 'Mannheim', 'Germany'],\n                 ['Frdrique Citeaux', 'Marketing Manager', 'Strasbourg', 'France'],\n                 ['Martn Sommer', 'Owner', 'Madrid', 'Spain'],\n                 ['Laurence Lebihan', 'Owner', 'Marseille', 'France'],\n                 ['Elizabeth Lincoln', 'Accounting Manager', 'Tsawassen', 'Canada'],\n                 ['Victoria Ashworth', 'Sales Representative', 'London', 'UK'],\n                 ['Patricio Simpson', 'Sales Agent', 'Buenos Aires', 'Argentina']\n             ],\n             datafields: [\n                 { name: 'ContactName', type: 'string', map: '0' },\n                 { name: 'Title', type: 'string', map: '1' },\n                 { name: 'City', type: 'string', map: '2' },\n                 { name: 'Country', type: 'string', map: '3' }\n             ],\n             datatype: 'array'\n         };\n     }\n }\n <\/script>\n")])])])])],1)])},Ht=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticStyle:{"margin-bottom":"0.5em"}},[n("span",{staticStyle:{"font-size":"15px"}},[n("strong",[t._v("I.")])]),t._v(" First, install "),n("span",{staticClass:"keyword"},[t._v("jQWidgets")]),t._v(" dependency:")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",[n("strong",[t._v("npm install jqwidgets-scripts --save--dev")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticStyle:{"margin-bottom":"0.5em"}},[n("span",{staticStyle:{"font-size":"15px"}},[n("strong",[t._v("II.")])]),t._v(" Copy the "),n("span",{staticClass:"keyword"},[t._v("styles")]),t._v(" folder from "),n("span",{staticClass:"keyword"},[t._v("node_modules/jqwidgets-scripts/jqwidgets")]),t._v(" to the "),n("span",{staticClass:"keyword"},[t._v("public")]),t._v(" folder.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticStyle:{"margin-bottom":"0.5em"}},[n("span",{staticStyle:{"font-size":"15px"}},[n("strong",[t._v("III.")])]),t._v(" Refer the "),n("span",{staticClass:"keyword"},[t._v("jqx.base.css")]),t._v(" file and the files of the other themes that you use in "),n("span",{staticClass:"keyword"},[t._v("index.html")]),t._v(":")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",[n("strong",[t._v('<link rel="stylesheet" type="text/css" href="./styles/jqx.base.css" />')])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticStyle:{"margin-bottom":"0.5em"}},[n("span",{staticStyle:{"font-size":"15px"}},[n("strong",[t._v("IV.")])]),t._v(" After we have jQWidgets installed, we can start using them in our Vue application."),n("br"),t._v("\n            Â Â Â Â Â You should import "),n("span",{staticClass:"keyword"},[t._v("JqxGrid")]),t._v(" in the component's file:\n        ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",[n("strong",[t._v("import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticStyle:{"margin-bottom":"0.5em"}},[n("span",{staticStyle:{"font-size":"15px"}},[n("strong",[t._v("V.")])]),t._v(" And then add it to the component section like this:")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",[t._v("components: {\n    JqxGrid\n},\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",{staticStyle:{"margin-bottom":"0.5em"}},[n("span",{staticStyle:{"font-size":"15px"}},[n("strong",[t._v("VI.")])]),t._v(" Then, you are ready to use "),n("span",{staticClass:"keyword"},[t._v("JqxGrid")]),t._v(" in the Vue template. "),n("br"),t._v("\n            Â Â Â Â Â Here is a simple example of how jQWidgets Grid is used in Vue:\n        ")])}],Ut={components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{dataAdapter:new jqx.dataAdapter(this.source),columns:[{text:"Contact Name",datafield:"ContactName",width:240},{text:"Contact Title",datafield:"Title",width:240},{text:"City",datafield:"City",width:150},{text:"Country",datafield:"Country"}]}},beforeCreate:function(){this.source={localdata:[["Maria Anders","Sales Representative","Berlin","Germany"],["Ana Trujillo","Owner","Mxico D.F.","Mexico"],["Antonio Moreno","Owner","Mxico D.F.","Mexico"],["Thomas Hardy","Sales Representative","London","UK"],["Christina Berglund","Order Administrator","Lule","Sweden"],["Hanna Moos","Sales Representative","Mannheim","Germany"],["Frdrique Citeaux","Marketing Manager","Strasbourg","France"],["Martn Sommer","Owner","Madrid","Spain"],["Laurence Lebihan","Owner","Marseille","France"],["Elizabeth Lincoln","Accounting Manager","Tsawassen","Canada"],["Victoria Ashworth","Sales Representative","London","UK"],["Patricio Simpson","Sales Agent","Buenos Aires","Argentina"]],datafields:[{name:"ContactName",type:"string",map:"0"},{name:"Title",type:"string",map:"1"},{name:"City",type:"string",map:"2"},{name:"Country",type:"string",map:"3"}],datatype:"array"}},mounted:function(){this.$refs.code.innerHTML=formatCode(this.$refs.code.innerHTML)}},Wt=Ut,Vt=(n("209a"),Object(c["a"])(Wt,zt,Ht,!1,null,"17ed4374",null));Vt.options.__file="GettingStarted.vue";var Qt=Vt.exports,Yt=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"fundamentals"},[n("h1",[t._v("Vue Grid - Fundamentals")]),n("h3",[t._v("Configuration")]),t._m(0),t._m(1),t._m(2),t._m(3),n("h3",[t._v("Template")]),t._m(4),t._m(5),n("br"),n("h3",[t._v("Properties")]),t._m(6),t._m(7),n("br"),n("h3",[t._v("Events")]),t._m(8),t._m(9),n("br"),t._m(10),t._m(11),n("br"),n("h3",[t._v("Methods")]),t._m(12),t._m(13),n("p",[t._v("\n            Here how you can use a component's method:\n        ")]),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),n("p",[t._v("\n            If you have followed the above steps, this is what the result would be:\n        ")]),n("div",[n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid",attrs:{theme:"material",width:t.width,source:t.dataAdapter,columns:t.columns,columnsresize:!0,pageable:!0},on:{pagechanged:function(e){t.onPageChanged()}}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid ref=\"myGrid\" @pagechanged=\"onPageChanged()\"\n             :theme=\"'material'\" :width=\"width\" :source=\"dataAdapter\"\n             :columns=\"columns\" :columnsresize=\"true\"\n             :pageable=\"true\">\n    </JqxGrid>\n</template>\n<script>\n    // Import the components that will be used\n    import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n    export default {\n        components: {\n            // Adding imported widgets here\n            JqxGrid\n        },\n        data: function () {\n            // Define properties which will use in the widget\n            return {\n                width: '99%',\n                dataAdapter: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'Name', datafield: 'name', width: 200 },\n                    { text: 'Beverage Type', datafield: 'type', width: 200 },\n                    { text: 'Calories', datafield: 'calories', width: 100 },\n                    { text: 'Total Fat', datafield: 'totalfat', width: 120 },\n                    { text: 'Protein', datafield: 'protein', minwidth: 120 }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            // Add here any data where you want to transform before components be rendered\n            this.source = {\n                datatype: 'json',\n                datafields: [\n                    { name: 'name', type: 'string' },\n                    { name: 'type', type: 'string' },\n                    { name: 'calories', type: 'int' },\n                    { name: 'totalfat', type: 'string' },\n                    { name: 'protein', type: 'string' }\n                ],\n                id: 'id',\n                url: '/sampledata/beverages.txt'\n            };\n        },\n        methods: {\n            // Add here all used callbacks and/or events\n            onPageChanged: function () {\n                // Do something...\n                let info = this.$refs.myGrid.getpaginginformation();\n                console.log(info);\n            }\n        }\n    }\n<\/script>")])])])])],1)])},Kt=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            After you have created your "),n("span",{staticClass:"keyword"},[t._v("App.vue")]),t._v(" file, here is how you should structure it:"),n("br"),t._v("\n            The Grid component for Vue requires the following import:\n        ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v('import JqxGrid from "jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue";')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("Add the "),n("span",{staticClass:"keyword"},[t._v("jqxGrid")]),t._v(" component to the components section of the the Vue class:")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",[t._v("components: {\n    JqxGrid\n},\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            The App.vue has a "),n("span",{staticClass:"keyword"},[t._v("<template>")]),t._v(" structural tag where we determine the application structure.\n            There we will also set the tags for the new components - "),n("span",{staticClass:"keyword"},[t._v("<JqxGrid/>")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v('<template>\n    <JqxGrid :theme="\'material\'" :width="width" :source="dataAdapter"\n             :columns="columns" :columnsresize="true"\n             :pageable="true">\n    </JqxGrid>\n</template>')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            The properties of the "),n("span",{staticClass:"keyword"},[t._v("<JqxGrid/>")]),t._v(" component are defined in the "),n("span",[t._v("data")]),t._v(" member of the Vue class.\n            We should put them in the "),n("span",{staticClass:"keyword"},[t._v("return")]),t._v(" object of the data function:\n        ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("data: function () {\n    return {\n        width: '99%',\n        dataAdapter: new jqx.dataAdapter(this.source),\n        columns: [\n            { text: 'Name', datafield: 'name', width: 200 },\n            { text: 'Beverage Type', datafield: 'type', width: 200 },\n            { text: 'Calories', datafield: 'calories', width: 110 },\n            { text: 'Total Fat', datafield: 'totalfat', width: 120 },\n            { text: 'Protein', datafield: 'protein', minwidth: 120 }\n        ]\n    }\n}")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            The events in Vue are set as an attribute with "),n("span",{staticClass:"keyword"},[t._v("@")]),t._v(" prefix, for example:\n        ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v('<JqxGrid @pagechanged="onPageChanged()"\n         :theme="\'material\'" :width="width" :source="dataAdapter"\n         :columns="columns" :columnsresize="true"\n         :pageable="true">\n</JqxGrid>')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            All events that are bound to a component are implemented in the "),n("span",{staticClass:"keyword"},[t._v("methods")]),t._v(" member of the Vue class.\n")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("methods: {\n    onPageChanged: function () {\n        // Do something...\n    }\n}")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            To use a component's method we should have its reference. In Vue we refer to a component by the special "),n("span",{staticClass:"keyword"},[t._v("$refs")]),t._v(" property.\n            Before that we need to add the desired name reference to that component:\n        ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"preCode"},[n("code",[t._v('<JqxGrid ref="myGrid"></JqxGrid>')])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"preCode"},[n("code",[t._v("this.$refs.myGrid.getpaginginformation();")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("methods: {\n    // Add here all used callbacks and/or events\n    onPageChanged: function () {\n        // Do something...\n        let info = this.$refs.myGrid.getpaginginformation();\n        console.log(info);\n    }\n}")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            If we want to add additional methods we should also implement them in the "),n("span",{staticClass:"keyword"},[t._v("methods")]),t._v(" member.\n        ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            In case we need to do some precalculation or something else before the components are rendered, we should use the "),n("span",{staticClass:"keyword"},[t._v("beforeCreate")]),t._v(" member.\n            In this case:\n        ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("beforeCreate: function () {\n    // Add here any data where you want to transform before components be rendered\n    this.source = {\n        datatype: 'json',\n        datafields: [\n            { name: 'name', type: 'string' },\n            { name: 'type', type: 'string' },\n            { name: 'calories', type: 'int' },\n            { name: 'totalfat', type: 'string' },\n            { name: 'protein', type: 'string' }\n        ],\n        id: 'id',\n        url: '/sampledata/beverages.txt'\n    };\n}")])])}],Xt={components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{width:"99%",dataAdapter:new jqx.dataAdapter(this.source),columns:[{text:"Name",datafield:"name",width:200},{text:"Beverage Type",datafield:"type",width:200},{text:"Calories",datafield:"calories",width:100},{text:"Total Fat",datafield:"totalfat",width:120},{text:"Protein",datafield:"protein",minwidth:120}]}},mounted:function(){for(var t=document.getElementsByClassName("code"),e=0;e<t.length;e++)t[e].innerHTML=formatCode(t[e].innerHTML);for(var n=document.getElementsByClassName("jqx-button"),a=0;a<n.length;a++)n[a].removeAttribute("type")},beforeCreate:function(){this.source={datatype:"json",datafields:[{name:"name",type:"string"},{name:"type",type:"string"},{name:"calories",type:"int"},{name:"totalfat",type:"string"},{name:"protein",type:"string"}],id:"id",url:"./sampledata/beverages.txt"}},methods:{onPageChanged:function(){var t=this.$refs.myGrid.getpaginginformation();console.log(t)}}},Zt=Xt,te=(n("72d7"),Object(c["a"])(Zt,Yt,Kt,!1,null,null,null));te.options.__file="Fundamentals.vue";var ee=te.exports,ne=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"data-binding-docs"},[n("h1",[t._v("Vue Grid - Data Binding")]),n("br"),t._m(0),t._m(1),t._m(2),n("strong",{staticClass:"subtitle"},[t._v("Bind the Grid to an array")]),t._m(3),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.width,source:t.arrayDataAdapter,columns:t.arrayColumns}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid :theme=\"'material'\" :width=\"width\" :source=\"dataAdapter\" \n             :columns=\"columns\" >\n    </JqxGrid>\n</template>\n<script>\n    import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                dataAdapter: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'Name', datafield: 'firstname', width: 120 },\n                    { text: 'Last Name', datafield: 'lastname', width: 120 },\n                    { text: 'Product', datafield: 'productname', width: 180 },\n                    { text: 'Quantity', datafield: 'quantity', width: 80, cellsalign: 'right' },\n                    { text: 'Unit Price', datafield: 'price', width: 90, cellsalign: 'right', cellsformat: 'c2' },\n                    { text: 'Total', datafield: 'total', cellsalign: 'right', cellsformat: 'c2' }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                localdata: generatedata(50),\n                datatype: 'array',\n                datafields:\n                    [\n                        { name: 'firstname', type: 'string' },\n                        { name: 'lastname', type: 'string' },\n                        { name: 'productname', type: 'string' },\n                        { name: 'quantity', type: 'number' },\n                        { name: 'price', type: 'number' },\n                        { name: 'total', type: 'number' }\n                    ]\n            };\n        }\n    }\n<\/script>\n")])])])]),n("p",[t._v("*generatedata function is implemented in the generatedata.js. The file is included in the download package and can be found in the installation_folder/demos/jqxgrid folder.")])],1),n("strong",{staticClass:"subtitle"},[t._v("Bind the Grid to XML data")]),t._m(4),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.width,source:t.xmlDataAdapter,columns:t.xmlColumns}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid :theme=\"'material'\" :width=\"width\" :source=\"dataAdapter\" \n             :columns=\"columns\" >\n    </JqxGrid>\n</template>\n<script>\n    import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                dataAdapter: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'Company Name', datafield: 'CompanyName', width: 250 },\n                    { text: 'Contact Name', datafield: 'ContactName', width: 150 },\n                    { text: 'Contact Title', datafield: 'ContactTitle', width: 180 },\n                    { text: 'City', datafield: 'City', width: 120 },\n                    { text: 'Postal Code', datafield: 'PostalCode', width: 90 },\n                    { text: 'Country', datafield: 'Country', width: 100 }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                datatype: 'xml',\n                datafields: [\n                    { name: 'CompanyName', map: 'm\\\\:properties>d\\\\:CompanyName', type: 'string' },\n                    { name: 'ContactName', map: 'm\\\\:properties>d\\\\:ContactName', type: 'string' },\n                    { name: 'ContactTitle', map: 'm\\\\:properties>d\\\\:ContactTitle', type: 'string' },\n                    { name: 'City', map: 'm\\\\:properties>d\\\\:City', type: 'string' },\n                    { name: 'PostalCode', map: 'm\\\\:properties>d\\\\:PostalCode', type: 'string' },\n                    { name: 'Country', map: 'm\\\\:properties>d\\\\:Country', type: 'string' }\n                ],\n                root: 'entry',\n                record: 'content',\n                id: 'm\\\\:properties>d\\\\:CustomerID',\n                url: '/sampledata/customers.xml'\n            };\n        }\n    }\n<\/script>\n")])])])])],1),n("strong",{staticClass:"subtitle"},[t._v("Bind the Grid to JSON data")]),t._m(5),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.width,source:t.jsonDataAdapter,columns:t.jsonColumns}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid :theme=\"'material'\" :width=\"width\" :source=\"dataAdapter\" \n             :columns=\"columns\" >\n    </JqxGrid>\n</template>\n<script>\n    import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                dataAdapter: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'Name', datafield: 'name', width: 250 },\n                    { text: 'Beverage Type', datafield: 'type', width: 250 },\n                    { text: 'Calories', datafield: 'calories', width: 180 },\n                    { text: 'Total Fat', datafield: 'totalfat', width: 120 },\n                    { text: 'Protein', datafield: 'protein', minwidth: 120 }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                datatype: 'json',\n                datafields: [\n                    { name: 'name', type: 'string' },\n                    { name: 'type', type: 'string' },\n                    { name: 'calories', type: 'int' },\n                    { name: 'totalfat', type: 'string' },\n                    { name: 'protein', type: 'string' }\n                ],\n                id: 'id',\n                url: '/sampledata/beverages.txt'\n            };\n        }\n    }\n<\/script>\n")])])])])],1),n("strong",{staticClass:"subtitle"},[t._v("Bind the Grid to tab-separated values (TSV)")]),t._m(6),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.width,source:t.tsvDataAdapter,columns:t.tsvColumns}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid :theme=\"'material'\" :width=\"width\" :source=\"dataAdapter\" \n             :columns=\"columns\" >\n    </JqxGrid>\n</template>\n<script>\n    import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                dataAdapter: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'Year', datafield: 'Year' },\n                    { text: 'HPI', datafield: 'HPI', cellsformat: 'f2' },\n                    { text: 'Build Cost', datafield: 'BuildCost', cellsformat: 'f2' },\n                    { text: 'Population', datafield: 'Population', cellsformat: 'f2' },\n                    { text: 'Rate', datafield: 'Rate', cellsformat: 'f5', minwidth: 100 }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                datatype: 'tab',\n                datafields: [\n                    { name: 'Year', type: 'int' },\n                    { name: 'HPI', type: 'float' },\n                    { name: 'BuildCost', type: 'float' },\n                    { name: 'Population', type: 'float' },\n                    { name: 'Rate', type: 'float' }\n                ],\n                url: '/sampledata/homeprices.txt'\n            };\n        }\n    }\n<\/script>\n")])])])])],1),n("strong",{staticClass:"subtitle"},[t._v("Bind the Grid to comma-separated values (CSV)")]),t._m(7),n("div",[n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.width,source:t.csvDataAdapter,columns:t.csvColumns}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid :theme=\"'material'\" :width=\"width\" :source=\"dataAdapter\" \n             :columns=\"columns\" >\n    </JqxGrid>\n</template>\n<script>\n    import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                dataAdapter: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'Date', datafield: 'Date', cellsformat: 'D', width: 250 },\n                    { text: 'S&P 500', datafield: 'S&P 500', width: 300, cellsformat: 'f' },\n                    { text: 'NASDAQ', datafield: 'NASDAQ', cellsformat: 'f' }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                datatype: \"csv\",\n                datafields: [\n                    { name: 'Date', type: 'date' },\n                    { name: 'S&P 500', type: 'float' },\n                    { name: 'NASDAQ', type: 'float' }\n                ],\n                url: '/sampledata/nasdaq_vs_sp500.txt'\n            };\n        }\n    }\n<\/script>\n")])])])])],1),n("strong",{staticClass:"subtitle"},[t._v("What happens when the data source is changed? How to refresh the Grid?")]),t._m(8),n("div",[n("JqxTabs",{ref:"myTabs",attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("div",[n("JqxGrid",{ref:"myGrid",attrs:{theme:"material",height:"80%",width:t.width,source:t.refreshDataAdapter,columns:t.refreshColumns}}),n("div",{staticStyle:{height:"18%","margin-top":"5px"}},[n("JqxButton",{attrs:{theme:"material",height:15,width:50},on:{click:function(e){t.refreshBtnOnClick()}}},[t._v("Refresh")])],1)],1)]),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("\n    <template>\n        <div>\n            <JqxGrid ref=\"myGrid\" :theme=\"'material'\"\n                     :width=\"width\" :source=\"dataAdapter\" :columns=\"columns\">\n            </JqxGrid>\n            <div style=\"height: 20px; margin-top: 15px\">\n                <JqxButton :theme=\"'material'\" :width=\"50\" @click=\"refreshBtnOnClick()\">Refresh Data</JqxButton>\n            </div>\n        </div>\n    </template>\n    <script>\n        import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n        import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n        export default {\n            components: {\n                JqxGrid,\n                JqxButton\n            },\n            data: function () {\n                return {\n                    getWidth: '99%',\n                    dataAdapter: new jqx.dataAdapter(this.source),\n                    columns: [\n                        { text: 'First Name', dataField: 'firstname', width: 130 },\n                        { text: 'Last Name', dataField: 'lastname', width: 130 },\n                        { text: 'Product', dataField: 'productname', width: 180 },\n                        { text: 'Quantity', dataField: 'quantity', width: 80, cellsalign: 'right' },\n                        { text: 'Unit Price', dataField: 'price', width: 90, cellsalign: 'right', cellsformat: 'c2' },\n                        { text: 'Total', dataField: 'total', cellsalign: 'right', minwidth: 100, cellsformat: 'c2' }\n                    ]\n                }\n            },\n            beforeCreate: function () {\n                this.source = {\n                    localdata: generatedata(50),\n                    datafields:\n                        [\n                            { name: 'firstname', type: 'string' },\n                            { name: 'lastname', type: 'string' },\n                            { name: 'productname', type: 'string' },\n                            { name: 'quantity', type: 'number' },\n                            { name: 'price', type: 'number' },\n                            { name: 'total', type: 'number' }\n                        ],\n                    datatype: 'array'\n                };\n            },\n            methods: {\n                refreshBtnOnClick: function () {\n                    this.source.localdata = generatedata(50);\n                    // passing `cells` to the `updatebounddata` method will refresh only the cells values when the new rows count is equal to the previous rows count.\n                    this.$refs.myGrid.updatebounddata('cells');\n                }\n            }\n        }\n    <\/script>\n")])])])])],1)])},ae=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            JqxGrid can be bound to multiple types of data collections including arrays, xml, json, tsv, csv or remote data.\n            To data bind the Grid to a data source you need to set its "),n("span",{staticClass:"keyword"},[t._v("source")]),t._v(" property to point to an instance of "),n("span",{staticClass:"keyword"},[t._v("jqxDataAdapter")]),t._v(".\n            The source object represents a set of key/value pairs:\n        ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v(" url: A string containing the URL to which the request is sent.")]),n("li",[t._v(" data: Data to be sent to the server.")]),n("li",[t._v(" localdata: data array or data string pointing to a local data source.")]),n("li",[t._v(" datatype: the data's type. Possible values: 'xml', 'json', 'jsonp', 'tsv', 'csv', 'local', 'array', 'observablearray'.")]),n("li",[t._v(' type: The type of request to make ("POST" or "GET"), default is "GET".')]),n("li",[t._v(" id: A string containing the Id data field.")]),n("li",[t._v(" root: A string describing where the data begins and all other loops begin from this element.")]),n("li",[t._v(" record: A string describing the information for a particular record.")]),n("li",[t._v("\n                datafields: An array describing the fields in a particular record. Each datafield must define the following members:\n                "),n("ul",[n("li",[t._v("name - A string containing the data field's name.")]),n("li",[t._v("type - A string containing the data field's type. Possible values: 'string', 'date', 'number', 'float', 'int', 'bool'.")]),n("li",[t._v("\n                        format(optional) - Sets the data formatting. By setting the format, the jqxDataAdapter plug-in will try to format the data before loading it.\n                        "),n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("{ name: 'SubmitDate', type: 'date', format: \"yyyy-MM-ddTHH:mm:ss-HH:mm\" }")])])]),n("li",[t._v("map(optional) - A mapping to the data field.")]),n("li",[t._v("values - determines the foreign collection associated to the data field.")])])]),n("li",[t._v("pagenum - determines the initial page number when paging is enabled.")]),n("li",[t._v("pagesize - determines the page size when paging is enabled.")]),n("li",[t._v("\n                pager - callback function called when the current page or page size is changed.\n                "),n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("pager: function (pagenum, pagesize, oldpagenum) {\n}")])])]),n("li",[t._v("sortcolumn - determines the initial sort column. The expected value is a data field name.")]),n("li",[t._v("sortdirection - determines the sort order. The expected value is 'asc' for (A to Z) sorting or 'desc' for (Z to A) sorting.")]),n("li",[t._v("\n                sort - callback function called when the sort column or sort order is changed.\n                "),n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("sort: function (column, direction) {\n}")])])]),n("li",[t._v("\n                filter - callback function called when a filter is applied or removed.\n                "),n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("filter: function (filters, recordsArray) {\n}")])])]),n("li",[t._v("\n                addrow - callback function, called when a new row is/are added. If multiple rows are added, the rowid and rowdata parameters are arrays of row ids and rows.\n                "),n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("addrow: function (rowid, rowdata, position, commit) {\n    // synchronize with the server - send insert command\n    // call commit with parameter true if the synchronization with the server is successful\n    //and with parameter false if the synchronization failed.\n    commit(true);\n}")])])]),n("li",[t._v("\n                deleterow - callback function, called when a row is deleted. If multiple rows are deleted, the rowid parameter is an array of row ids.\n                "),n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("deleterow: function (rowid, commit) {\n    // synchronize with the server - send delete command\n    // call commit with parameter true if the synchronization with the server is successful\n    //and with parameter false if the synchronization failed.\n    commit(true);\n}")])])]),n("li",[t._v("\n                updaterow - callback function, called when a row is updated. If multiple rows are added, the rowid and rowdata parameters are arrays of row ids and rows.\n                "),n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("updaterow: function (rowid, newdata, commit) {\n    // synchronize with the server - send update command\n    // call commit with parameter true if the synchronization with the server is successful\n    // and with parameter false if the synchronization failed.\n    commit(true);\n}")])])]),n("li",[t._v("\n                processdata - extend the default data object sent to the server.\n                "),n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("let source = {\n    datatype: \"jsonp\",\n    datafields: [\n        { name: 'countryName' },\n        { name: 'name' },\n        { name: 'population', type: 'float' },\n        { name: 'continentCode' }\n    ],\n    url: \"http://ws.geonames.org/searchJSON\",\n    processdata: function (data) {\n        data.featureClass = \"P\";\n        data.style = \"full\";\n        data.maxRows = 50;\n    }\n};")])])]),n("li",[t._v("\n                formatdata - Before the data is sent to the server, you can fully override it by using the "),n("span",{staticClass:"keyword"},[t._v("formatdata")]),t._v(" function of the\n                "),n("span",{staticClass:"keyword"},[t._v("source")]),t._v(". The result that the function returns is actually what will be sent to the server.\n                "),n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("let source = {\n    datatype: \"jsonp\",\n    datafields: [\n        { name: 'countryName' },\n        { name: 'name' },\n        { name: 'population', type: 'float' },\n        { name: 'continentCode' }\n    ],\n    url: \"http://ws.geonames.org/searchJSON\",\n    data: {\n        featureClass: \"P\",\n        style: \"full\",\n        maxRows: 50\n    },\n    formatdata: function (data) {\n        return \"my data\";\n    }\n};")])])]),n("li",[t._v('contenttype: Use this option, if you want to explicitly pass in a content-type. Default is "application/x-www-form-urlencoded".')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            If you bind the Grid to remote data source using asynchronous requests (that is by default when you specify "),n("span",{staticClass:"keyword"},[t._v("url")]),t._v(" in the "),n("span",{staticClass:"keyword"},[t._v("source")]),t._v(" object and\n            you haven't set the "),n("span",{staticClass:"keyword"},[t._v("async")]),t._v(" field to false), then make sure that you call any method or set a property once the data is loaded. To ensure that you call your code when the Grid is loaded with data,\n            use the Grid's "),n("span",{staticClass:"keyword"},[t._v("ready")]),t._v(" callback function or bind to the "),n("span",{staticClass:"keyword"},[t._v("bindingcomplete")]),t._v(" event before the Grid's initialization and call your code inside the event handler.\n        ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("The data member is array. The "),n("span",{staticClass:"keyword"},[t._v("datatype")]),t._v(' member is set to "array".')])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            In the source initialization, you need to set the following:\n            "),n("ul",[n("li",[t._v("url of a xml file")]),n("li",[t._v("id field")]),n("li",[t._v("root data record")]),n("li",[t._v("record - this is the data record which will be displayed as a row in the Grid.")]),n("li",[t._v("datatype - 'xml'")]),n("li",[t._v("datafields - the record's member names. You can also specify the mapping to the member's data")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n            When you bind the Grid to JSON data, you need to set the source object's "),n("span",{staticClass:"keyword"},[t._v("datatype")]),t._v(" to 'json'."),n("br"),t._v("\n            If you want to bind the Grid to JSONP data, then you need to set the source object's "),n("span",{staticClass:"keyword"},[t._v("datatype")]),t._v(" to 'jsonp'.\n        ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("When you bind the Grid to TSV data, you need to set the source object's "),n("span",{staticClass:"keyword"},[t._v("datatype")]),t._v(" to 'tab'.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("When you bind the Grid to CSV data, you need to set the source object's "),n("span",{staticClass:"keyword"},[t._v("datatype")]),t._v(" to 'csv'.")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("To refresh the Grid, you need to simply update the source and call the "),n("span",{staticClass:"keyword"},[t._v("updatebounddata")]),t._v(" method.")])}],ie={components:{JqxTabs:Y["a"],JqxGrid:b["a"],JqxButton:lt["a"]},data:function(){return{width:"99%",arrayDataAdapter:new jqx.dataAdapter(this.arraySource),xmlDataAdapter:new jqx.dataAdapter(this.xmlSource),jsonDataAdapter:new jqx.dataAdapter(this.jsonSource),tsvDataAdapter:new jqx.dataAdapter(this.tsvSource),csvDataAdapter:new jqx.dataAdapter(this.csvSource),refreshDataAdapter:new jqx.dataAdapter(this.refreshSource),arrayColumns:[{text:"Name",datafield:"firstname",width:120},{text:"Last Name",datafield:"lastname",width:120},{text:"Product",datafield:"productname",width:180},{text:"Quantity",datafield:"quantity",width:80,cellsalign:"right"},{text:"Unit Price",datafield:"price",width:90,cellsalign:"right",cellsformat:"c2"},{text:"Total",datafield:"total",cellsalign:"right",cellsformat:"c2"}],xmlColumns:[{text:"Company Name",datafield:"CompanyName",width:250},{text:"Contact Name",datafield:"ContactName",width:150},{text:"Contact Title",datafield:"ContactTitle",width:180},{text:"City",datafield:"City",width:120},{text:"Postal Code",datafield:"PostalCode",width:90},{text:"Country",datafield:"Country",width:100}],jsonColumns:[{text:"Name",datafield:"name",width:250},{text:"Beverage Type",datafield:"type",width:250},{text:"Calories",datafield:"calories",width:180},{text:"Total Fat",datafield:"totalfat",width:120},{text:"Protein",datafield:"protein",minwidth:120}],tsvColumns:[{text:"Year",datafield:"Year"},{text:"HPI",datafield:"HPI",cellsformat:"f2"},{text:"Build Cost",datafield:"BuildCost",cellsformat:"f2"},{text:"Population",datafield:"Population",cellsformat:"f2"},{text:"Rate",datafield:"Rate",cellsformat:"f5",minwidth:100}],csvColumns:[{text:"Date",datafield:"Date",cellsformat:"D",width:250},{text:"S&P 500",datafield:"S&P 500",width:300,cellsformat:"f"},{text:"NASDAQ",datafield:"NASDAQ",cellsformat:"f"}],refreshColumns:[{text:"First Name",dataField:"firstname",width:130},{text:"Last Name",dataField:"lastname",width:130},{text:"Product",dataField:"productname",width:180},{text:"Quantity",dataField:"quantity",width:80,cellsalign:"right"},{text:"Unit Price",dataField:"price",width:90,cellsalign:"right",cellsformat:"c2"},{text:"Total",dataField:"total",cellsalign:"right",minwidth:100,cellsformat:"c2"}]}},beforeCreate:function(){this.arraySource={localdata:generatedata(50),datatype:"array",datafields:[{name:"firstname",type:"string"},{name:"lastname",type:"string"},{name:"productname",type:"string"},{name:"quantity",type:"number"},{name:"price",type:"number"},{name:"total",type:"number"}]},this.xmlSource={datatype:"xml",datafields:[{name:"CompanyName",map:"m\\:properties>d\\:CompanyName",type:"string"},{name:"ContactName",map:"m\\:properties>d\\:ContactName",type:"string"},{name:"ContactTitle",map:"m\\:properties>d\\:ContactTitle",type:"string"},{name:"City",map:"m\\:properties>d\\:City",type:"string"},{name:"PostalCode",map:"m\\:properties>d\\:PostalCode",type:"string"},{name:"Country",map:"m\\:properties>d\\:Country",type:"string"}],root:"entry",record:"content",id:"m\\:properties>d\\:CustomerID",url:"./sampledata/customers.xml"},this.jsonSource={datatype:"json",datafields:[{name:"name",type:"string"},{name:"type",type:"string"},{name:"calories",type:"int"},{name:"totalfat",type:"string"},{name:"protein",type:"string"}],id:"id",url:"./sampledata/beverages.txt"},this.tsvSource={datatype:"tab",datafields:[{name:"Year",type:"int"},{name:"HPI",type:"float"},{name:"BuildCost",type:"float"},{name:"Population",type:"float"},{name:"Rate",type:"float"}],url:"./sampledata/homeprices.txt"},this.csvSource={datatype:"csv",datafields:[{name:"Date",type:"date"},{name:"S&P 500",type:"float"},{name:"NASDAQ",type:"float"}],url:"./sampledata/nasdaq_vs_sp500.txt"},this.refreshSource={localdata:generatedata(50,!1),datafields:[{name:"firstname",type:"string"},{name:"lastname",type:"string"},{name:"productname",type:"string"},{name:"quantity",type:"number"},{name:"price",type:"number"},{name:"total",type:"number"}],datatype:"array"}},mounted:function(){for(var t=document.getElementsByClassName("code"),e=0;e<t.length;e++)t[e].innerHTML=formatCode(t[e].innerHTML)},methods:{refreshBtnOnClick:function(){this.refreshSource.localdata=generatedata(50,!1),this.$refs.myGrid.updatebounddata("cells")}}},re=ie,oe=(n("e54c"),Object(c["a"])(re,ne,ae,!1,null,null,null));oe.options.__file="DataBindingDocs.vue";var se=oe.exports,de=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"sorting-docs"},[n("h1",[t._v("Vue Grid - Sorting")]),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("sortable")]),t._v(" property enables or disables the data sorting."),n("br"),t._v("\n        In the code example below, the Grid data sorting is enabled:\n        "),n("br"),n("br"),t._m(0),n("br"),t._v("\n        To enable or disable the sorting of a Grid column, you can set its "),n("span",{staticClass:"keyword"},[t._v("sortable")]),t._v(" property to false. "),n("br"),t._v('\n        In the code example below, the sorting of the "ShipName" column is disabled.\n        '),n("br"),n("br"),t._m(1),n("br"),t._v("\n        When the sorting data type is Date, Number or Boolean, the "),n("span",{staticClass:"keyword"},[t._v("type")]),t._v(" property in the "),n("span",{staticClass:"keyword"},[t._v("datafields")]),t._v(" array should be set.\n        "),n("br"),t._v("\n        In this code example, the data type of the ShippedDate column is Date and the "),n("span",{staticClass:"keyword"},[t._v("type")]),t._v(' property is set to "date". The\n        Freight column displays floating-point numbers and the '),n("span",{staticClass:"keyword"},[t._v("type")]),t._v(" property is set to 'float'.\n        "),n("br"),n("br"),t._m(2),n("br"),t._v("\n\n        The "),n("span",{staticClass:"keyword"},[t._v("sortcolumn")]),t._v(" property specifies the default Grid sort column, i.e. when the grid is displayed, the data will be sorted.\n        The "),n("span",{staticClass:"keyword"},[t._v("sortdirection")]),t._v(" property specifies the sort order of the sort column.\n        "),n("br"),n("br"),n("strong",[t._v("Sorting with the Grid API")]),n("br"),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("sortby")]),t._v(" function can be used to sort the Grid through the API. This function should be called when the grid data is fully loaded.\n        The first parameter is the Column's dataField. The second parameter is the sort order - 'asc' or 'desc'.\n        "),n("br"),n("br"),t._m(3),n("br"),t._v("\n        To remove the sorting, call the "),n("span",{staticClass:"keyword"},[t._v("removesort")]),t._v(" function. "),n("br"),t._v("\n        When the data is sorted, the Grid raises the "),n("span",{staticClass:"keyword"},[t._v("sort")]),t._v(" event.\n        "),n("br"),n("br"),t._m(4),n("br"),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid",attrs:{theme:"material",width:t.width,source:t.dataAdapter,columns:t.columns,sortable:!0},on:{sort:function(e){t.onSort(e)}}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid ref=\"myGrid\" @sort=\"onSort($event)\"\n             :theme=\"'material'\" :width=\"width\" :source=\"dataAdapter\" \n             :columns=\"columns\" :sortable=\"true\">\n    </JqxGrid>\n</template>\n<script>\nimport JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\nexport default {\n    components: {\n        JqxGrid\n    },\n    data: function () {\n        return {\n            width: '99%',\n            dataAdapter: new jqx.dataAdapter(this.source),\n            columns: [\n                { text: 'Ship Name', datafield: 'ShipName', width: 250 },\n                { text: 'Shipped Date', datafield: 'ShippedDate', width: 230, cellsformat: 'D' },\n                { text: 'Freight', datafield: 'Freight', width: 130, cellsformat: 'F2', cellsalign: 'right' },\n                { text: 'Ship Address', datafield: 'ShipAddress', width: 350 },\n                { text: 'Ship City', datafield: 'ShipCity', width: 100 },\n                { text: 'Ship Country', datafield: 'ShipCountry', width: 100 }\n            ]\n        }\n    },\n    beforeCreate: function () {\n        this.source = {\n            datatype: \"xml\",\n            datafields: [\n                { name: 'ShippedDate', map: 'm\\\\:properties>d\\\\:ShippedDate', type: 'date' },\n                { name: 'Freight', map: 'm\\\\:properties>d\\\\:Freight', type: 'float' },\n                { name: 'ShipName', map: 'm\\\\:properties>d\\\\:ShipName', type: 'string' },\n                { name: 'ShipAddress', map: 'm\\\\:properties>d\\\\:ShipAddress', type: 'string' },\n                { name: 'ShipCity', map: 'm\\\\:properties>d\\\\:ShipCity', type: 'string' },\n                { name: 'ShipCountry', map: 'm\\\\:properties>d\\\\:ShipCountry', type: 'string' }\n            ],\n            root: \"entry\",\n            record: \"content\",\n            id: 'OrderID',\n            url: '/sampledata/orders.xml',\n            sortcolumn: 'ShipName',\n            sortdirection: 'asc'\n        };\n    },\n    methods: {\n        onSort: function (event) {\n            let sortinformation = event.args.sortinformation;\n            let sortdirection = sortinformation.sortdirection;\n            let sortcolumn = sortinformation.sortcolumn;\n            console.log(\"Sorted by: \" + sortcolumn);\n        }\n    }\n}\n<\/script>\n")])])])])],1),n("br"),n("br"),t._v("\n        By default, when the sorting is enabled and the user clicks a column's header, the sort order is changed.\n        The jqxGrid "),n("span",{staticClass:"keyword"},[t._v("sorttogglestates")]),t._v(" property can be used to modify this behavior. The possible values of this property are:\n        "),n("br"),n("br"),t._v("\n        0 - disables toggling. The Grid is sortable only through the API."),n("br"),t._v("\n        1 - enables togging. Click on a column header toggles the sort direction.  In this mode, there are 2 possible sort direction values - 'asc', and 'desc'."),n("br"),t._v("\n        2 - default toggle mode. Click on a column header toggles the sort direction. In this mode, there are 3 possible sort direction values - 'asc', 'desc' and null.\n        When the sort direction is null, the sorting is cleared.\n        "),n("br"),n("br"),n("strong",[t._v("Custom Sorting")]),n("br"),n("br"),t._v("\n        To override the default sorting logic, you need to set the "),n("span",{staticClass:"keyword"},[t._v("sort")]),t._v(" member of the Grid's "),n("span",{staticClass:"keyword"},[t._v("source")]),t._v(" object to a custom sorting function.\n        The Grid will pass two parameters to this function - the sort column's datafield and the sort direction.\n        "),n("br"),n("br"),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid2",attrs:{theme:"material",width:t.width,source:t.dataAdapter2,columns:t.columns2,pageable:!0,sortable:!0,autoheight:!0,ready:t.ready}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid ref=\"myGrid\" :theme=\"'material'\"\n             :width=\"width\" :source=\"dataAdapter\" :columns=\"columns\"\n             :pageable=\"true\" :sortable=\"true\" :autoheight=\"true\" :ready=\"ready\">\n    </JqxGrid>\n</template>\n<script>\n    import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                dataAdapter: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'First Name', datafield: 'firstname' },\n                    { text: 'Last Name', datafield: 'lastname' },\n                    { text: 'Product', datafield: 'productname' },\n                    { text: 'Quantity', datafield: 'quantity', cellsalign: 'right' },\n                    { text: 'Unit Price', datafield: 'price', cellsalign: 'right', cellsformat: 'c2' },\n                    { text: 'Total', datafield: 'total', cellsalign: 'right', cellsformat: 'c2' }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            const data = generatedata(50);\n            const compare = (value1, value2) => {\n                value1 = String(value1).toLowerCase();\n                value2 = String(value2).toLowerCase();\n                try {\n                    let tmpvalue1 = parseFloat(value1);\n                    if (isNaN(tmpvalue1)) {\n                        if (value1 < value2) { return -1; }\n                        if (value1 > value2) { return 1; }\n                    }\n                    else {\n                        let tmpvalue2 = parseFloat(value2);\n                        if (tmpvalue1 < tmpvalue2) { return -1; }\n                        if (tmpvalue1 > tmpvalue2) { return 1; }\n                    }\n                }\n                catch (error) {\n                    let er = error;\n                }\n                return 0;\n            };\n            const customsortfunc = (column, direction) => {\n                let sortdata = new Array();\n                if (direction == 'ascending') direction = true;\n                if (direction == 'descending') direction = false;\n                if (direction != null) {\n                    for (let i = 0; i < data.length; i++) {\n                        sortdata.push(data[i]);\n                    }\n                }\n                else sortdata = data;\n                let tmpToString = Object.prototype.toString;\n                Object.prototype.toString = (typeof column == 'function') ? column : () => { return this[column] };\n                if (direction != null) {\n                    sortdata.sort(compare);\n                    if (!direction) {\n                        sortdata.reverse();\n                    }\n                }\n                this.source.localdata = sortdata;\n                this.$refs.myGrid.updatebounddata('sort');\n                Object.prototype.toString = tmpToString;\n            };\n            this.source = {\n                localdata: data,\n                sort: customsortfunc,\n                datafields:\n                    [\n                        { name: 'firstname', type: 'string' },\n                        { name: 'lastname', type: 'string' },\n                        { name: 'productname', type: 'string' },\n                        { name: 'quantity', type: 'number' },\n                        { name: 'price', type: 'number' },\n                        { name: 'total', type: 'number' }\n                    ],\n                datatype: 'array'\n            };\n        },\n        methods: {\n            ready: function () {\n                this.$refs.myGrid.sortby('firstname', 'asc');\n            }\n        }\n    }\n<\/script>")])])])]),n("p",[t._v("*generatedata function is implemented in the generatedata.js. The file is included in the download package and can be found in the installation_folder/demos/jqxgrid folder.")])],1)])},le=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v(' <JqxGrid :width="width" :source="dataAdapter" :columns="columns"\n    :sorting="true">\n</JqxGrid>')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("columns: [\n    { text: 'Ship Name', datafield: 'ShipName', width: 250, sortable: false },\n    { text: 'Shipped Date', datafield: 'ShippedDate', width: 230, cellsformat: 'D' },\n    { text: 'Freight', datafield: 'Freight', width: 130, cellsformat: 'F2', cellsalign: 'right' },\n    { text: 'Ship Address', datafield: 'ShipAddress', width: 350 },\n    { text: 'Ship City', datafield: 'ShipCity', width: 100 },\n    { text: 'Ship Country', datafield: 'ShipCountry', width: 100 }\n]")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("this.source = {\n    datatype: \"xml\",\n    datafields: [\n        { name: 'ShippedDate', type: 'date' },\n        { name: 'Freight', type: 'float' },\n        { name: 'ShipName' },\n        { name: 'ShipAddress'},\n        { name: 'ShipCity'},\n        { name: 'ShipCountry' }\n    ],\n    root: \"entry\",\n    record: \"content\",\n    id: 'OrderID',\n    url: url,\n    sortcolumn: 'ShipName',\n    sortdirection: 'asc'\n};")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("mounted: function () {\n    this.$refs.myGrid.sortby('ShipName', 'asc');\n}")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v('<JqxGrid ref="myGrid" @sort="onSort($event)"\n         :width="width" :source="source" :columns="columns">\n</JqxGrid>')])])}],ce=(n("55dd"),{components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{width:"99%",dataAdapter:new jqx.dataAdapter(this.source),dataAdapter2:new jqx.dataAdapter(this.source2),columns:[{text:"Ship Name",datafield:"ShipName",width:250},{text:"Shipped Date",datafield:"ShippedDate",width:230,cellsformat:"D"},{text:"Freight",datafield:"Freight",width:130,cellsformat:"F2",cellsalign:"right"},{text:"Ship Address",datafield:"ShipAddress",width:350},{text:"Ship City",datafield:"ShipCity",width:100},{text:"Ship Country",datafield:"ShipCountry",width:100}],columns2:[{text:"First Name",datafield:"firstname"},{text:"Last Name",datafield:"lastname"},{text:"Product",datafield:"productname"},{text:"Quantity",datafield:"quantity",cellsalign:"right"},{text:"Unit Price",datafield:"price",cellsalign:"right",cellsformat:"c2"},{text:"Total",datafield:"total",cellsalign:"right",cellsformat:"c2"}]}},beforeCreate:function(){var t=this;this.source={datatype:"xml",datafields:[{name:"ShippedDate",map:"m\\:properties>d\\:ShippedDate",type:"date"},{name:"Freight",map:"m\\:properties>d\\:Freight",type:"float"},{name:"ShipName",map:"m\\:properties>d\\:ShipName",type:"string"},{name:"ShipAddress",map:"m\\:properties>d\\:ShipAddress",type:"string"},{name:"ShipCity",map:"m\\:properties>d\\:ShipCity",type:"string"},{name:"ShipCountry",map:"m\\:properties>d\\:ShipCountry",type:"string"}],root:"entry",record:"content",id:"OrderID",url:"./sampledata/orders.xml",sortcolumn:"ShipName",sortdirection:"asc"};var e=generatedata(50),n=function(t,e){t=String(t).toLowerCase(),e=String(e).toLowerCase();try{var n=parseFloat(t);if(isNaN(n)){if(t>e)return-1;if(t>e)return 1}else{var a=parseFloat(e);if(n<a)return-1;if(n>a)return 1}}catch(i){}return 0},a=function(a,i){var r=new Array;if("ascending"==i&&(i=!0),"descending"==i&&(i=!1),null!=i)for(var o=0;o<e.length;o++)r.push(e[o]);else r=e;var s=Object.prototype.toString;Object.prototype.toString="function"==typeof a?a:function(){return t[a]},null!=i&&(r.sort(n),i||r.reverse()),t.source2.localdata=r,t.$refs.myGrid2.updatebounddata("sort"),Object.prototype.toString=s};this.source2={localdata:e,sort:a,datafields:[{name:"firstname",type:"string"},{name:"lastname",type:"string"},{name:"productname",type:"string"},{name:"quantity",type:"number"},{name:"price",type:"number"},{name:"total",type:"number"}],datatype:"array"}},mounted:function(){for(var t=document.getElementsByClassName("code"),e=0;e<t.length;e++)t[e].innerHTML=formatCode(t[e].innerHTML);for(var n=document.getElementsByClassName("jqx-button"),a=0;a<n.length;a++)n[a].removeAttribute("type")},methods:{ready:function(){this.$refs.myGrid2.sortby("firstname","asc")},onSort:function(t){var e=t.args.sortinformation,n=(e.sortdirection,e.sortcolumn);console.log("Sorted by: "+n)}}}),pe=ce,ue=Object(c["a"])(pe,de,le,!1,null,null,null);ue.options.__file="Sorting.vue";var me=ue.exports,fe=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"filtering-docs"},[n("h1",[t._v("Vue Grid - Filtering")]),n("br"),t._v("\n        To enable the filtering feature, you need to set the "),n("span",{staticClass:"keyword"},[t._v("filterable")]),t._v(" property to true.\n        When the value of the "),n("span",{staticClass:"keyword"},[t._v("filterable")]),t._v(" property is true, the Grid displays a filtering panel in the columns popup menus.\n        jqxGrid has several methods that allow you to handle the data filtering - "),n("span",{staticClass:"keyword"},[t._v("addfilter")]),t._v(", "),n("span",{staticClass:"keyword"},[t._v("removefilter")]),t._v(", "),n("span",{staticClass:"keyword"},[t._v("applyfilters")]),t._v(" and "),n("span",{staticClass:"keyword"},[t._v("clearfilters")]),t._v(".\n        The first method adds a filter to a grid column. The "),n("span",{staticClass:"keyword"},[t._v("removefilter")]),t._v(" method removes a filter from a grid column. The "),n("span",{staticClass:"keyword"},[t._v("applyfilters")]),t._v(" method applies all filters to the grid and refreshes its contents. The last method clears the filtering.\n        "),n("br"),t._v("\n        Let's see how to add a filter:\n        "),n("br"),n("br"),t._v("\n        1. The first step is to create a filter group. The filter group is a group of one or more filtering criterias.\n        "),n("br"),n("br"),t._m(0),n("br"),t._v("\n\n        2. The next step is to create the filters. Each filter must have a filter value - this is the value we compare each cell value with.\n        The filter condition specifies how the filter will compare each cell value with the filter value. The filter condition value depends on the filter's type\n        (jqxGrid supports string, numeric and date filters). If you want to get the list of the supported grid filtering conditions, you can use the "),n("span",{staticClass:"keyword"},[t._v("getoperatorsbyfiltertype")]),t._v("\n        method of filter group.The "),n("span",{staticClass:"keyword"},[t._v("createfilter")]),t._v(" method is used to create the filter.\n        "),n("br"),n("br"),t._m(1),n("br"),t._v("\n\n        3. The third step is to add the filters to the filter group. In the code example below, we added two filters in the filter group with operator 'or'.\n        This means that each cell value will be evaluated by filter1 and filter2 and the evaluation result will be true,\n        if the filter1's returned value is true or filter2's returned value is true.\n        "),n("br"),n("br"),t._m(2),n("br"),t._v("\n\n        4. In the final step, we add the filter group to the first column and apply the filters by calling the "),n("span",{staticClass:"keyword"},[t._v("applyfilters")]),t._v(" method.\n        "),n("br"),n("br"),t._m(3),n("br"),t._v("\n\n        If you want to remove the filter, call the "),n("span",{staticClass:"keyword"},[t._v("removefilter")]),t._v(" method and then the "),n("span",{staticClass:"keyword"},[t._v("applyfilters")]),t._v(" method.\n        "),n("br"),n("br"),t._m(4),n("br"),t._v("\n\n        If you want to clear all filters, use the "),n("span",{staticClass:"keyword"},[t._v("clearfilters")]),t._v(" method.\n        "),n("br"),n("br"),t._m(5),n("br"),n("strong",[t._v("Custom Filter Conditions")]),n("br"),n("br"),t._v("\n        To customzie the filter conditions, you need to do the following:"),n("br"),n("br"),t._v("\n        1. Update the "),n("span",{staticClass:"keyword"},[t._v("Localization Strings")]),t._v(". The filter conditions displayed in the filter dropdowns are loaded from the jqxGrid's localization object."),n("br"),t._v("\n        *Use the Grid's "),n("span",{staticClass:"keyword"},[t._v("ready")]),t._v(" callback or bind to the "),n("span",{staticClass:"keyword"},[t._v("bindingcomplete")]),t._v(" event before the Grid's initialization.\n        "),n("br"),n("br"),t._v("\n        2. The second step is to update the conditions within the Filter object. In order to achieve that, you need to add a function called "),n("span",{staticClass:"keyword"},[t._v("updatefilterconditions")]),t._v(".\n        That function is invoked by jqxGrid with 2 parameters - the type of the filter and the default filter conditions.\n        As a result, the function should return an array of strings depending on the filter's type. That array will be used by the filter object.\n        "),n("br"),n("br"),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid",attrs:{theme:"material",width:t.width,source:t.source,autoheight:!0,columns:t.columns,filterable:!0,autoshowfiltericon:!0,ready:t.ready,updatefilterconditions:t.updatefilterconditions}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid ref=\"myGrid\" :theme=\"'material'\" :width=\"width\" :source=\"source\" \n             :autoheight=\"true\" :columns=\"columns\" :filterable=\"true\" \n             :autoshowfiltericon=\"true\" :ready=\"ready\" :updatefilterconditions=\"updatefilterconditions\">\n    </JqxGrid>\n</template>\n<script>\nimport JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                source: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'Contact Name', datafield: 'ContactName' },\n                    { text: 'Contact Title', datafield: 'Title' },\n                    { text: 'City', datafield: 'City' },\n                    { text: 'Country', datafield: 'Country' }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                localdata: [\n                    ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n                    ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n                    ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n                ],\n                datafields: [\n                    { name: 'ContactName', type: 'string', map: '0' },\n                    { name: 'Title', type: 'string', map: '1' },\n                    { name: 'City', type: 'string', map: '2' },\n                    { name: 'Country', type: 'string', map: '3' }\n                ],\n                datatype: 'array'\n            };\n        },\n        methods: {\n            updatefilterconditions: function (type, defaultconditions) {\n                let stringcomparisonoperators = ['CONTAINS', 'DOES_NOT_CONTAIN'];\n                let numericcomparisonoperators = ['LESS_THAN', 'GREATER_THAN'];\n                let datecomparisonoperators = ['LESS_THAN', 'GREATER_THAN'];\n                let booleancomparisonoperators = ['EQUAL', 'NOT_EQUAL'];\n                switch (type) {\n                    case 'stringfilter':\n                        return stringcomparisonoperators;\n                    case 'numericfilter':\n                        return numericcomparisonoperators;\n                    case 'datefilter':\n                        return datecomparisonoperators;\n                    case 'booleanfilter':\n                        return booleancomparisonoperators;\n                }\n            },\n            ready: function () {\n                let localizationObject = {\n                    filterstringcomparisonoperators: ['contains', 'does not contain'],\n                    // filter numeric comparison operators.\n                    filternumericcomparisonoperators: ['less than', 'greater than'],\n                    // filter date comparison operators.\n                    filterdatecomparisonoperators: ['less than', 'greater than'],\n                    // filter bool comparison operators.\n                    filterbooleancomparisonoperators: ['equal', 'not equal']\n                }\n                this.$refs.myGrid.localizestrings(localizationObject);\n            }\n        }\n    }\n<\/script>\n")])])])])],1),n("br"),n("br"),n("strong",[t._v("Add filters to multiple columns through the API")]),n("br"),n("br"),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid2",attrs:{theme:"material",width:t.width,source:t.source2,autoheight:!0,columns:t.columns2,sortable:!0,filterable:!0,autoshowfiltericon:!0,ready:t.ready2}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v('<template>\n    <JqxGrid ref="myGrid" :theme="\'material\'" :width="width" :source="source"\n             :autoheight="true" :columns="columns" :sortable="true"\n             :filterable="true" :autoshowfiltericon="true" :ready="ready">\n    </JqxGrid>\n</template>\n<script>\nimport JqxGrid from "jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue";\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: \'99%\',\n                source: new jqx.dataAdapter(this.source),\n                columns: [\n                   { text: \'First Name\', datafield: \'firstname\', width: 160 },\n                    { text: \'Last Name\', datafield: \'lastname\', width: 160 },\n                    { text: \'Product\', datafield: \'productname\', width: 170 },\n                    { text: \'Order Date\', datafield: \'date\', filtertype: \'date\', width: 160, cellsformat: \'dd-MMMM-yyyy\' },\n                    { text: \'Quantity\', datafield: \'quantity\', width: 80, cellsalign: \'right\' },\n                    { text: \'Unit Price\', datafield: \'price\', cellsalign: \'right\', cellsformat: \'c2\' }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                localdata: localdata: [\n                    { firstname: "Andrew", lastname: "Burke", productname: "White Chocolate Mocha", quantity: 5, price: 3.8 },\n                    { firstname: "Andrew", lastname: "Wilson", productname: "Espresso con Panna", quantity: 1, price: 5 },\n                    { firstname: "Nancy", lastname: "Fuller", productname: "Caffe Latte", quantity: 1, price: 3.5 },\n                    { firstname: "Regina", lastname: "Wilson", productname: "Doubleshot Espresso", quantity: 7, price: 4.2 },\n                    { firstname: "Mayumi", lastname: "Davolio", productname: "Caffe Espresso", quantity: 1, price: 3.6 },\n                    { firstname: "Beate", lastname: "Saavedra", productname: "Caffe Latte", quantity: 2, price: 3.5 },\n                    { firstname: "Beate", lastname: "Nodier", productname: "White Chocolate Mocha", quantity: 6, price: 3.8 },\n                    { firstname: "Petra", lastname: "Winkler", productname: "Doubleshot Espresso", quantity: 5, price: 4.6 },\n                    { firstname: "Andrew", lastname: "Rossi", productname: "Caffe Latte", quantity: 2, price: 3.5 },\n                    { firstname: "Nancy", lastname: "Saavedra", productname: "Cappuccino", quantity: 1, price: 3.8 },\n                    { firstname: "Regina", lastname: "Wilson", productname: "Doubleshot Espresso", quantity: 7, price: 4.6 },\n                    { firstname: "Mayumi", lastname: "Bjorn", productname: "Black Tea", quantity: 1, price: 3.8 },\n                    { firstname: "Beate", lastname: "Petersen", productname: "Caffe Latte", quantity: 2, price: 3.5 },\n                    { firstname: "Saavedra", lastname: "Fuller", productname: "Black Tea", quantity: 6, price: 3.8 }\n                ],\n                datatype: \'array\'\n            };\n        },\n        methods: {\n            addfilter: function () {\n                // create a filter group for the FirstName column.\n                let fNameFiltergroup = new jqx.filter();\n                // operator between the filters in the filter group. 1 is for OR. 0 is for AND.\n                let filter_or_operator = 1;\n                // create a string filter with `contains` condition.\n                let filtervalue = \'Beate\';\n                let filtercondition = \'contains\';\n                let fNameFilter1 = fNameFiltergroup.createfilter(\'stringfilter\', filtervalue, filtercondition);\n                // create second filter.\n                filtervalue = \'Andrew\';\n                filtercondition = \'starts_with\';\n                let fNameFilter2 = fNameFiltergroup.createfilter(\'stringfilter\', filtervalue, filtercondition);\n                // add the filters to the filter group.\n                fNameFiltergroup.addfilter(filter_or_operator, fNameFilter1);\n                fNameFiltergroup.addfilter(filter_or_operator, fNameFilter2);\n                // add the filter group to the `firstname` column in the Grid.\n                this.$refs.myGrid.addfilter(\'firstname\', fNameFiltergroup);\n                // create a filter group for the Quantity column.\n                let quantityFilterGroup = new jqx.filter();\n                // create a filter.\n                filter_or_operator = 1;\n                filtervalue = 3;\n                filtercondition = \'less_than\';\n                let quantityFilter1 = quantityFilterGroup.createfilter(\'numericfilter\', filtervalue, filtercondition);\n                quantityFilterGroup.addfilter(filter_or_operator, quantityFilter1);\n                // add the filter group to the `quantity` column in the Grid.\n                this.$refs.myGrid.addfilter(\'quantity\', quantityFilterGroup);\n                // apply the filters.\n                this.$refs.myGrid.applyfilters();\n            },\n            ready: function () {\n                this.addfilter();\n            }\n        }\n    }\n<\/script>\n')])])])])],1),n("br"),t._v("\n        By default the filter groups are combined with 'AND' operator. That means that the Grid will display records if they meet the criteria of the filter group applied to column 1 and the filter group applied to column 2, etc.\n        You can create any combination of filter groups using 'AND' and 'OR'.\n        "),n("br"),t._v("\n        The example below illustrates how:\n        "),n("br"),n("br"),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid3",attrs:{theme:"material",width:t.width,source:t.source3,autoheight:!0,columns:t.columns2,sortable:!0,filterable:!0,autoshowfiltericon:!0,ready:t.ready3}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v('<template>\n    <JqxGrid ref="myGrid" :theme="\'material\'" :width="width" :source="source"\n             :autoheight="true" :columns="columns" :sortable="true"\n             :filterable="true" :autoshowfiltericon="true" :ready="ready">\n    </JqxGrid>\n</template>\n<script>\nimport JqxGrid from "jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue";\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: \'99%\',\n                source: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: \'First Name\', datafield: \'firstname\', width: 160 },\n                    { text: \'Last Name\', datafield: \'lastname\', width: 160 },\n                    { text: \'Product\', datafield: \'productname\', width: 170 },\n                    { text: \'Order Date\', datafield: \'date\', filtertype: \'date\', width: 160, cellsformat: \'dd-MMMM-yyyy\' },\n                    { text: \'Quantity\', datafield: \'quantity\', width: 80, cellsalign: \'right\' },\n                    { text: \'Unit Price\', datafield: \'price\', cellsalign: \'right\', cellsformat: \'c2\' }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                localdata: [\n                    { firstname: "Andrew", lastname: "Burke", productname: "White Chocolate Mocha", quantity: 5, price: 3.8 },\n                    { firstname: "Andrew", lastname: "Wilson", productname: "Espresso con Panna", quantity: 1, price: 5 },\n                    { firstname: "Nancy", lastname: "Fuller", productname: "Caffe Latte", quantity: 1, price: 3.5 },\n                    { firstname: "Regina", lastname: "Wilson", productname: "Doubleshot Espresso", quantity: 7, price: 4.2 },\n                    { firstname: "Mayumi", lastname: "Davolio", productname: "Caffe Espresso", quantity: 1, price: 3.6 },\n                    { firstname: "Beate", lastname: "Saavedra", productname: "Caffe Latte", quantity: 2, price: 3.5 },\n                    { firstname: "Beate", lastname: "Nodier", productname: "White Chocolate Mocha", quantity: 6, price: 3.8 },\n                    { firstname: "Petra", lastname: "Winkler", productname: "Doubleshot Espresso", quantity: 5, price: 4.6 },\n                    { firstname: "Andrew", lastname: "Rossi", productname: "Caffe Latte", quantity: 2, price: 3.5 },\n                    { firstname: "Nancy", lastname: "Saavedra", productname: "Cappuccino", quantity: 1, price: 3.8 },\n                    { firstname: "Regina", lastname: "Wilson", productname: "Doubleshot Espresso", quantity: 7, price: 4.6 },\n                    { firstname: "Mayumi", lastname: "Bjorn", productname: "Black Tea", quantity: 1, price: 3.8 },\n                    { firstname: "Beate", lastname: "Petersen", productname: "Caffe Latte", quantity: 2, price: 3.5 },\n                    { firstname: "Saavedra", lastname: "Fuller", productname: "Black Tea", quantity: 6, price: 3.8 }\n                ],\n                datatype: \'array\'\n            };\n        },\n        methods: {\n            addfilter: function () {\n                // create a filter group for the FirstName column.\n                let fNameFiltergroup = new jqx.filter();\n                fNameFiltergroup.operator = \'or\';\n                // operator between the filters in the filter group. 1 is for OR. 0 is for AND.\n                let filter_or_operator = 1;\n                // create a string filter with `contains` condition.\n                let filtervalue = \'Beate\';\n                let filtercondition = \'contains\';\n                let fNameFilter1 = fNameFiltergroup.createfilter(\'stringfilter\', filtervalue, filtercondition);\n                // create second filter.\n                filtervalue = \'Andrew\';\n                filtercondition = \'starts_with\';\n                let fNameFilter2 = fNameFiltergroup.createfilter(\'stringfilter\', filtervalue, filtercondition);\n                // add the filters to the filter group.\n                fNameFiltergroup.addfilter(filter_or_operator, fNameFilter1);\n                fNameFiltergroup.addfilter(filter_or_operator, fNameFilter2);\n                // add the filter group to the `firstname` column in the Grid.\n                this.$refs.myGrid.addfilter(\'firstname\', fNameFiltergroup);\n                // create a filter group for the Quantity column.\n                let quantityFilterGroup = new jqx.filter();\n                quantityFilterGroup.operator = \'or\';\n                // create a filter.\n                filter_or_operator = 1;\n                filtervalue = 3;\n                filtercondition = \'less_than\';\n                let quantityFilter1 = quantityFilterGroup.createfilter(\'numericfilter\', filtervalue, filtercondition);\n                quantityFilterGroup.addfilter(filter_or_operator, quantityFilter1);\n                // add the filter group to the `quantity` column in the Grid.\n                this.$refs.myGrid.addfilter(\'quantity\', quantityFilterGroup);\n                // apply the filters.\n                this.$refs.myGrid.applyfilters();\n            },\n            ready: function () {\n                this.addfilter();\n            }\n        }\n    }\n<\/script>\n')])])])])],1),n("br"),t._v("\n        Using the above code, jqxGrid will display any record which meets at least one of the filtering criterias i.e a record is displayed, if it meets the condition of the 'FirstName' column's filter group or the one of the 'Quantity' column's filter group.\n    ")])},ye=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("let filtergroup = new jqx.filter();")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("let filtervalue = 'Beate';\nlet filtercondition = 'contains';\n// possible conditions for string filter: 'EMPTY', 'NOT_EMPTY', 'CONTAINS', 'CONTAINS_CASE_SENSITIVE',\n// 'DOES_NOT_CONTAIN', 'DOES_NOT_CONTAIN_CASE_SENSITIVE', 'STARTS_WITH', 'STARTS_WITH_CASE_SENSITIVE',\n// 'ENDS_WITH', 'ENDS_WITH_CASE_SENSITIVE', 'EQUAL', 'EQUAL_CASE_SENSITIVE', 'NULL', 'NOT_NULL'\n// possible conditions for numeric filter: 'EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'\n// possible conditions for date filter: 'EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'\nlet filter1 = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\nfiltervalue = 'Andrew';\nfiltercondition = 'starts_with';\nlet filter2 = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("let filter_or_operator = 1;\nfiltergroup.addfilter(filter_or_operator, filter1);\nfiltergroup.addfilter(filter_or_operator, filter2);")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("// add the filters\nthis.$refs.myGrid.addfilter('firstname', filtergroup, true);\n// apply the filters\nthis.$refs.myGrid.applyfilters();")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("this.$refs.myGrid.removefilter('firstname');\nthis.$refs.myGrid.applyfilters();")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("this.$refs.myGrid.clearfilters();")])])}],he={components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{width:"99%",source:new jqx.dataAdapter(this.source),source2:new jqx.dataAdapter(this.source2),source3:new jqx.dataAdapter(this.source3),columns:[{text:"Contact Name",datafield:"ContactName"},{text:"Contact Title",datafield:"Title"},{text:"City",datafield:"City"},{text:"Country",datafield:"Country"}],columns2:[{text:"First Name",datafield:"firstname",width:160},{text:"Last Name",datafield:"lastname",width:160},{text:"Product",datafield:"productname",width:170},{text:"Quantity",datafield:"quantity",width:80,cellsalign:"right"},{text:"Unit Price",datafield:"price",cellsalign:"right",cellsformat:"c2"}]}},beforeCreate:function(){this.source={localdata:[["Maria Anders","Sales Representative","Berlin","Germany"],["Ana Trujillo","Owner","Mxico D.F.","Mexico"],["Antonio Moreno","Owner","Mxico D.F.","Mexico"]],datafields:[{name:"ContactName",type:"string",map:"0"},{name:"Title",type:"string",map:"1"},{name:"City",type:"string",map:"2"},{name:"Country",type:"string",map:"3"}],datatype:"array"},this.source2={localdata:[{firstname:"Andrew",lastname:"Burke",productname:"White Chocolate Mocha",quantity:5,price:3.8},{firstname:"Andrew",lastname:"Wilson",productname:"Espresso con Panna",quantity:1,price:5},{firstname:"Nancy",lastname:"Fuller",productname:"Caffe Latte",quantity:1,price:3.5},{firstname:"Regina",lastname:"Wilson",productname:"Doubleshot Espresso",quantity:7,price:4.2},{firstname:"Mayumi",lastname:"Davolio",productname:"Caffe Espresso",quantity:1,price:3.6},{firstname:"Beate",lastname:"Saavedra",productname:"Caffe Latte",quantity:2,price:3.5},{firstname:"Beate",lastname:"Nodier",productname:"White Chocolate Mocha",quantity:6,price:3.8},{firstname:"Petra",lastname:"Winkler",productname:"Doubleshot Espresso",quantity:5,price:4.6},{firstname:"Andrew",lastname:"Rossi",productname:"Caffe Latte",quantity:2,price:3.5},{firstname:"Nancy",lastname:"Saavedra",productname:"Cappuccino",quantity:1,price:3.8},{firstname:"Regina",lastname:"Wilson",productname:"Doubleshot Espresso",quantity:7,price:4.6},{firstname:"Mayumi",lastname:"Bjorn",productname:"Black Tea",quantity:1,price:3.8},{firstname:"Beate",lastname:"Petersen",productname:"Caffe Latte",quantity:2,price:3.5},{firstname:"Saavedra",lastname:"Fuller",productname:"Black Tea",quantity:6,price:3.8}],datatype:"array"},this.source3={localdata:[{firstname:"Andrew",lastname:"Burke",productname:"White Chocolate Mocha",quantity:5,price:3.8},{firstname:"Andrew",lastname:"Wilson",productname:"Espresso con Panna",quantity:1,price:5},{firstname:"Nancy",lastname:"Fuller",productname:"Caffe Latte",quantity:1,price:3.5},{firstname:"Regina",lastname:"Wilson",productname:"Doubleshot Espresso",quantity:7,price:4.2},{firstname:"Mayumi",lastname:"Davolio",productname:"Caffe Espresso",quantity:1,price:3.6},{firstname:"Beate",lastname:"Saavedra",productname:"Caffe Latte",quantity:2,price:3.5},{firstname:"Beate",lastname:"Nodier",productname:"White Chocolate Mocha",quantity:6,price:3.8},{firstname:"Petra",lastname:"Winkler",productname:"Doubleshot Espresso",quantity:5,price:4.6},{firstname:"Andrew",lastname:"Rossi",productname:"Caffe Latte",quantity:2,price:3.5},{firstname:"Nancy",lastname:"Saavedra",productname:"Cappuccino",quantity:1,price:3.8},{firstname:"Regina",lastname:"Wilson",productname:"Doubleshot Espresso",quantity:7,price:4.6},{firstname:"Mayumi",lastname:"Bjorn",productname:"Black Tea",quantity:1,price:3.8},{firstname:"Beate",lastname:"Petersen",productname:"Caffe Latte",quantity:2,price:3.5},{firstname:"Saavedra",lastname:"Fuller",productname:"Black Tea",quantity:6,price:3.8}],datatype:"array"}},mounted:function(){for(var t=document.getElementsByClassName("code"),e=0;e<t.length;e++)t[e].innerHTML=formatCode(t[e].innerHTML)},methods:{updatefilterconditions:function(t,e){var n=["CONTAINS","DOES_NOT_CONTAIN"],a=["LESS_THAN","GREATER_THAN"],i=["LESS_THAN","GREATER_THAN"],r=["EQUAL","NOT_EQUAL"];switch(t){case"stringfilter":return n;case"numericfilter":return a;case"datefilter":return i;case"booleanfilter":return r}},ready:function(){var t={filterstringcomparisonoperators:["contains","does not contain"],filternumericcomparisonoperators:["less than","greater than"],filterdatecomparisonoperators:["less than","greater than"],filterbooleancomparisonoperators:["equal","not equal"]};this.$refs.myGrid.localizestrings(t)},ready2:function(){this.addfilter()},ready3:function(){this.addfilter2()},addfilter:function(){var t=new jqx.filter,e=1,n="Beate",a="contains",i=t.createfilter("stringfilter",n,a);n="Andrew",a="starts_with";var r=t.createfilter("stringfilter",n,a);t.addfilter(e,i),t.addfilter(e,r),this.$refs.myGrid2.addfilter("firstname",t);var o=new jqx.filter;e=1,n=3,a="less_than";var s=o.createfilter("numericfilter",n,a);o.addfilter(e,s),this.$refs.myGrid2.addfilter("quantity",o),this.$refs.myGrid2.applyfilters()},addfilter2:function(){var t=new jqx.filter;t.operator="or";var e=1,n="Beate",a="contains",i=t.createfilter("stringfilter",n,a);n="Andrew",a="starts_with";var r=t.createfilter("stringfilter",n,a);t.addfilter(e,i),t.addfilter(e,r),this.$refs.myGrid3.addfilter("firstname",t);var o=new jqx.filter;o.operator="or",e=1,n=3,a="less_than";var s=o.createfilter("numericfilter",n,a);o.addfilter(e,s),this.$refs.myGrid3.addfilter("quantity",o),this.$refs.myGrid3.applyfilters()}}},ve=he,xe=(n("4423"),Object(c["a"])(ve,fe,ye,!1,null,"728b29d4",null));xe.options.__file="Filtering.vue";var ge=xe.exports,Ce=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"paging-docs"},[n("h1",[t._v("Vue Grid - Paging")]),n("br"),t._v("\n        jqxGrid component has a built-in paging capability that supports paging functionality. The paging functionality is enabled when the "),n("span",{staticClass:"keyword"},[t._v("pageable")]),t._v(" property is set to true.\n        The code example below illustrates how to enable the paging functionality.\n        "),n("br"),n("br"),t._m(0),n("br"),t._v("\n        When a page is changed or the page size is changed, the Grid raises the "),n("span",{staticClass:"keyword"},[t._v("pagechanged")]),t._v(" or "),n("span",{staticClass:"keyword"},[t._v("pagesizechanged")]),t._v(" events.\n        "),n("br"),n("br"),t._m(1),n("br"),n("strong",[t._v("Grid with Basic Paging")]),n("br"),n("br"),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.width,source:t.source,columns:t.columns,autoheight:!0,pageable:!0}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid :theme=\"'material'\" :width=\"width\" :source=\"source\" :columns=\"columns\" \n             :autoheight=\"true\" :pageable=\"true\">\n    </JqxGrid>\n</template>\n<script>\nimport JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                source: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'Contact Name', datafield: 'ContactName' },\n                    { text: 'Contact Title', datafield: 'Title' },\n                    { text: 'City', datafield: 'City' },\n                    { text: 'Country', datafield: 'Country' }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                localdata: [\n                    ['Alfreds Futterkiste', 'Maria Anders', 'Berlin', 'Germany'],\n                    ['Ana Trujillo Emparedados y helados', 'Ana Trujillo', 'Mxico D.F.', 'Mexico'],\n                    ['Antonio Moreno Taquera', 'Antonio Moreno', 'Mxico D.F.', 'Mexico'],\n                    ['Around the Horn', 'Thomas Hardy', 'London', 'UK'],\n                    ['Berglunds snabbkp', 'Christina Berglund', 'Lule', 'Sweden'],\n                    ['Blauer See Delikatessen', 'Hanna Moos', 'Mannheim', 'Germany'],\n                    ['Blondesddsl pre et fils', 'Frdrique Citeaux', 'Strasbourg', 'France'],\n                    ['Blido Comidas preparadas', 'Martn Sommer', 'Madrid', 'Spain'],\n                    ['Bon app', 'Laurence Lebihan', 'Marseille', 'France'],\n                    ['Bottom-Dollar Markets', 'Elizabeth Lincoln', 'Tsawassen', 'Canada'],\n                    ['B`s Beverages', 'Victoria Ashworth', 'London', 'UK'],\n                    ['Cactus Comidas para llelet', 'Patricio Simpson', 'Buenos Aires', 'Argentina'],\n                    ['Centro comercial Moctezuma', 'Francisco Chang', 'Mxico D.F.', 'Mexico'],\n                    ['Chop-suey Chinese', 'Yang Wang', 'Bern', 'Switzerland'],\n                    ['Comrcio Mineiro', 'Pedro Afonso', 'Sao Paulo', 'Brazil'],\n                    ['Consolidated Holdings', 'Elizabeth Brown', 'London', 'UK'],\n                    ['Drachenblut Delikatessen', 'Sven Ottlieb', 'Aachen', 'Germany'],\n                    ['Du monde entier', 'Janine Labrune', 'Nantes', 'France'],\n                    ['Eastern Connection', 'Ann Devon', 'London', 'UK'],\n                    ['Ernst Handel', 'Roland Mendel', 'Graz', 'Austria']\n                ],\n                datafields: [\n                    { name: 'ContactName', type: 'string', map: '0' },\n                    { name: 'Title', type: 'string', map: '1' },\n                    { name: 'City', type: 'string', map: '2' },\n                    { name: 'Country', type: 'string', map: '3' }\n                ],\n                datatype: 'array'\n            };\n        }\n    }\n<\/script>\n")])])])])],1),n("br"),t._v("\n        The Grid Page Size options are displayed in a DropDownList component in the pager area. By default, the size options are 5, 10 and 20.\n        The "),n("span",{staticClass:"keyword"},[t._v("pagesizeoptions")]),t._v(" property enables you to set new size options.\n        "),n("br"),n("br"),t._m(2),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("pagesize")]),t._v(" property sets the default page size when the paging functionality is enabled. By default the Grid displays 10 rows in a page."),n("br"),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("pagerrenderer")]),t._v(" property allows you to customize the UI of the Grid pager. In the sample below, we create a "),n("span",{staticClass:"keyword"},[t._v("pagerrenderer")]),t._v(" function and inside the function,\n        we build a DIV element with anchor tags. Each anchor tag has a page number as text. When the user clicks an anchor tag, the Grid calls the "),n("span",{staticClass:"keyword"},[t._v("gotopage")]),t._v(" function to navigate to a page.\n        The "),n("span",{staticClass:"keyword"},[t._v("pagerrenderer")]),t._v(" function returns the DIV element as a result. This element is then internally appended to the Grid's pager area.\n        "),n("br"),n("br"),n("strong",[t._v("Grid with Custom Paging")]),n("br"),n("br"),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid",attrs:{theme:"material",width:t.width,source:t.source,columns:t.columns,autoheight:!0,pageable:!0,pagerrenderer:t.pagerrenderer}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid ref=\"myGrid\" :theme=\"'material'\" :width=\"width\" :source=\"source\" :columns=\"columns\"\n             :autoheight=\"true\" :pageable=\"true\" :pagerrenderer=\"pagerrenderer\">\n    </JqxGrid>\n</template>\n<script>\nimport JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                source: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'Contact Name', datafield: 'ContactName' },\n                    { text: 'Contact Title', datafield: 'Title' },\n                    { text: 'City', datafield: 'City' },\n                    { text: 'Country', datafield: 'Country' }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                localdata: [\n                    ['Alfreds Futterkiste', 'Maria Anders', 'Berlin', 'Germany'],\n                    ['Ana Trujillo Emparedados y helados', 'Ana Trujillo', 'Mxico D.F.', 'Mexico'],\n                    ['Antonio Moreno Taquera', 'Antonio Moreno', 'Mxico D.F.', 'Mexico'],\n                    ['Around the Horn', 'Thomas Hardy', 'London', 'UK'],\n                    ['Berglunds snabbkp', 'Christina Berglund', 'Lule', 'Sweden'],\n                    ['Blauer See Delikatessen', 'Hanna Moos', 'Mannheim', 'Germany'],\n                    ['Blondesddsl pre et fils', 'Frdrique Citeaux', 'Strasbourg', 'France'],\n                    ['Blido Comidas preparadas', 'Martn Sommer', 'Madrid', 'Spain'],\n                    ['Bon app', 'Laurence Lebihan', 'Marseille', 'France'],\n                    ['Bottom-Dollar Markets', 'Elizabeth Lincoln', 'Tsawassen', 'Canada'],\n                    ['B`s Beverages', 'Victoria Ashworth', 'London', 'UK'],\n                    ['Cactus Comidas para llelet', 'Patricio Simpson', 'Buenos Aires', 'Argentina'],\n                    ['Centro comercial Moctezuma', 'Francisco Chang', 'Mxico D.F.', 'Mexico'],\n                    ['Chop-suey Chinese', 'Yang Wang', 'Bern', 'Switzerland'],\n                    ['Comrcio Mineiro', 'Pedro Afonso', 'Sao Paulo', 'Brazil'],\n                    ['Consolidated Holdings', 'Elizabeth Brown', 'London', 'UK'],\n                    ['Drachenblut Delikatessen', 'Sven Ottlieb', 'Aachen', 'Germany'],\n                    ['Du monde entier', 'Janine Labrune', 'Nantes', 'France'],\n                    ['Eastern Connection', 'Ann Devon', 'London', 'UK'],\n                    ['Ernst Handel', 'Roland Mendel', 'Graz', 'Austria']\n                ],\n                datafields: [\n                    { name: 'ContactName', type: 'string', map: '0' },\n                    { name: 'Title', type: 'string', map: '1' },\n                    { name: 'City', type: 'string', map: '2' },\n                    { name: 'Country', type: 'string', map: '3' }\n                ],\n                datatype: 'array'\n            };\n        },\n        methods: {\n            pagerrenderer: function () {\n                let element = $(\"<div style='margin-top: 5px; width: 100%; height: 100%;'></div>\");\n                let paginginfo = this.$refs.myGrid.getpaginginformation();\n                for (i = 0; i < paginginfo.pagescount; i++) {\n                    // add anchor tag with the page number for each page.\n                    let anchor = $(\"<a style='padding: 5px;' href='#\" + i + \"'>\" + i + \"</a>\");\n                    anchor.appendTo(element);\n                    anchor.click((event) => {\n                        // go to a page.\n                        let pagenum = parseInt($(event.target).text());\n                        this.$refs.myGrid.gotopage(pagenum);\n                    });\n                }\n                return element;\n            }\n        }\n    }\n<\/script>\n")])])])])],1),n("br"),t._v("\n        To navigate to a page with the Grid API, use the "),n("span",{staticClass:"keyword"},[t._v("gotopage")]),t._v(" function.\n        "),n("br"),n("br"),t._m(3),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("gotoprevpage")]),t._v(" function navigates with 1 page before the current page."),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("gotonextpage")]),t._v(" function navigates with 1 page after the current page.\n    ")])},we=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v('<JqxGrid @pagechanged="onPageChanged($event)" @pagesizechanged="onPageSizeChanged($event)"\n         :width="width" :source="source" :columns="columns"\n         :pageable="true">\n</JqxGrid>')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("methods: {\n    onPageChanged: function(event) {\n        let args = event.args;\n        let pagenumber = args.pagenum;\n        let pagesize = args.pagesize;\n    },\n    onPageSizeChanged: function (event) {\n       let args = event.args;\n       let pagenumber = args.pagenum;\n       let pagesize = args.pagesize; \n    }\n}")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v('<JqxGrid :width="width" :source="source" :columns="columns"\n         :pageable="true" :pagesizeoptions="[\'10\', \'20\', \'30\']">\n</JqxGrid>')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("this.$refs.myGrid.gotopage(1);")])])}],_e={components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{width:"99%",source:new jqx.dataAdapter(this.source),columns:[{text:"Contact Name",datafield:"ContactName"},{text:"Contact Title",datafield:"Title"},{text:"City",datafield:"City"},{text:"Country",datafield:"Country"}]}},beforeCreate:function(){this.source={localdata:[["Alfreds Futterkiste","Maria Anders","Berlin","Germany"],["Ana Trujillo Emparedados y helados","Ana Trujillo","Mxico D.F.","Mexico"],["Antonio Moreno Taquera","Antonio Moreno","Mxico D.F.","Mexico"],["Around the Horn","Thomas Hardy","London","UK"],["Berglunds snabbkp","Christina Berglund","Lule","Sweden"],["Blauer See Delikatessen","Hanna Moos","Mannheim","Germany"],["Blondesddsl pre et fils","Frdrique Citeaux","Strasbourg","France"],["Blido Comidas preparadas","Martn Sommer","Madrid","Spain"],["Bon app","Laurence Lebihan","Marseille","France"],["Bottom-Dollar Markets","Elizabeth Lincoln","Tsawassen","Canada"],["B`s Beverages","Victoria Ashworth","London","UK"],["Cactus Comidas para llelet","Patricio Simpson","Buenos Aires","Argentina"],["Centro comercial Moctezuma","Francisco Chang","Mxico D.F.","Mexico"],["Chop-suey Chinese","Yang Wang","Bern","Switzerland"],["Comrcio Mineiro","Pedro Afonso","Sao Paulo","Brazil"],["Consolidated Holdings","Elizabeth Brown","London","UK"],["Drachenblut Delikatessen","Sven Ottlieb","Aachen","Germany"],["Du monde entier","Janine Labrune","Nantes","France"],["Eastern Connection","Ann Devon","London","UK"],["Ernst Handel","Roland Mendel","Graz","Austria"]],datafields:[{name:"ContactName",type:"string",map:"0"},{name:"Title",type:"string",map:"1"},{name:"City",type:"string",map:"2"},{name:"Country",type:"string",map:"3"}],datatype:"array"}},mounted:function(){for(var t=document.getElementsByClassName("code"),e=0;e<t.length;e++)t[e].innerHTML=formatCode(t[e].innerHTML);for(var n=document.getElementsByClassName("jqx-button"),a=0;a<n.length;a++)n[a].removeAttribute("type")},methods:{pagerrenderer:function(){for(var t=this,e=$("<div style='margin-top: 5px; width: 100%; height: 100%;'></div>"),n=this.$refs.myGrid.getpaginginformation(),a=0;a<n.pagescount;a++){var i=$("<a style='padding: 5px;' href='#"+a+"'>"+a+"</a>");i.appendTo(e),i.click(function(e){var n=parseInt($(e.target).text());t.$refs.myGrid.gotopage(n)})}return e}}},qe=_e,Ge=Object(c["a"])(qe,Ce,we,!1,null,null,null);Ge.options.__file="Paging.vue";var be=Ge.exports,Me=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"grouping-docs"},[n("h1",[t._v("Vue Grid - Grouping")]),n("br"),t._v("\n        The jqxGrid component supports data grouping against one or more columns.\n        "),n("br"),n("br"),t._v("\n        Grouping is allowed if the "),n("span",{staticClass:"keyword"},[t._v("groupable")]),t._v(" property is set to true. End-users can group data by dragging column headers to the Group Panel.\n        This panel's visibility is controlled by the "),n("span",{staticClass:"keyword"},[t._v("showgroupsheader")]),t._v(" property.\n        "),n("br"),n("br"),t._v("\n        The code example below shows a Grid templatate with one grouping column:\n        "),t._m(0),n("br"),n("strong",[t._v("Basic Grid with Grouping")]),n("br"),n("br"),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{ref:"myGrid",attrs:{theme:"material",width:t.width,source:t.source,columns:t.columns,groupable:!0,groups:["Title"]}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid ref=\"myGrid\" :theme=\"'material'\" :width=\"width\" :source=\"source\" :columns=\"columns\" \n             :groupable=\"true\" :groups=\"['Title']\">\n    </JqxGrid>\n</template>\n<script>\nimport JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                source: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'Contact Name', datafield: 'ContactName' },\n                    { text: 'Contact Title', datafield: 'Title' },\n                    { text: 'City', datafield: 'City' },\n                    { text: 'Country', datafield: 'Country' }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                localdata: [\n                    ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n                    ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n                    ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n                    ['Thomas Hardy', 'Sales Representative', 'London', 'UK'],\n                    ['Christina Berglund', 'Order Administrator', 'Lule', 'Sweden'],\n                    ['Hanna Moos', 'Sales Representative', 'Mannheim', 'Germany'],\n                    ['Frdrique Citeaux', 'Marketing Manager', 'Strasbourg', 'France'],\n                    ['Martn Sommer', 'Owner', 'Madrid', 'Spain'],\n                    ['Laurence Lebihan', 'Owner', 'Marseille', 'France'],\n                    ['Elizabeth Lincoln', 'Accounting Manager', 'Tsawassen', 'Canada'],\n                    ['Victoria Ashworth', 'Sales Representative', 'London', 'UK'],\n                    ['Patricio Simpson', 'Sales Agent', 'Buenos Aires', 'Argentina']\n                ],\n                datafields: [\n                    { name: 'ContactName', type: 'string', map: '0' },\n                    { name: 'Title', type: 'string', map: '1' },\n                    { name: 'City', type: 'string', map: '2' },\n                    { name: 'Country', type: 'string', map: '3' }\n                ],\n                datatype: 'array'\n            };\n        }\n    }\n<\/script>\n")])])])])],1),n("br"),t._v("\n        To hide the grouping panel, set the "),n("span",{staticClass:"keyword"},[t._v("showgroupsheader")]),t._v(" property to false.\n        "),n("br"),n("br"),t._m(1),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("addgroup")]),t._v(", "),n("span",{staticClass:"keyword"},[t._v("insertgroup")]),t._v(", "),n("span",{staticClass:"keyword"},[t._v("removegroup")]),t._v(" and "),n("span",{staticClass:"keyword"},[t._v("removegroupat")]),t._v("\n        functions enable groups manipulation with the Grid API.\n        "),n("br"),n("br"),t._m(2),n("br"),t._v("\n        *The functions should be called after the Grid data is loaded. When the data is loaded and the Grid is ready, the "),n("span",{staticClass:"keyword"},[t._v("bindingcomplete")]),t._v(" event is raised."),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("closeablegroups")]),t._v(" property enables or disables the close buttons displayed in each group header.\n        "),n("br"),n("br"),t._m(3),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("expandgroup")]),t._v(" and "),n("span",{staticClass:"keyword"},[t._v("collapsegroup")]),t._v(" functions expand or collapse a group at a specific index. The code below expands the second group:\n        "),n("br"),n("br"),t._m(4),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("expandallgroups")]),t._v(" and "),n("span",{staticClass:"keyword"},[t._v("collapseallgroups")]),t._v(" functions expand or collapse all groups in the Grid.\n        "),n("br"),n("br"),t._m(5),n("br"),t._v("\n        When a group is expanded or collapsed, the "),n("span",{staticClass:"keyword"},[t._v("groupexpand")]),t._v(" or "),n("span",{staticClass:"keyword"},[t._v("groupcollapse")]),t._v(" event is raised.\n        "),n("br"),n("br"),t._m(6),n("br"),t._m(7),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("groupsexpandedbydefault")]),t._v(" boolean property specifies the default state of the groups when displayed in the Grid. By default all groups are collapsed.\n")])},je=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v('<JqxGrid ref="myGrid" :width="width" :source="dataAdapter" :columns="columns"\n         :groupable="true" :groups="[\'Title\']">\n</JqxGrid>')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v('<template>\n    <JqxGrid ref="myGrid" :width="800" :source="dataAdapter" :columns="columns"\n             :groupable="true" :groups="[\'Title\']" :showgroupsheader="false" /> \n</template>')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("this.$refs.myGrid.addgroup('City');")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v('<template>\n    <JqxGrid ref="myGrid" :width="800" :source="dataAdapter" :columns="columns"\n             :groupable="true" :groups="[\'Title\']" :closeablegroups="false" />\n</template>')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("this.$refs.myGrid.expandgroup(1);")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("this.$refs.myGrid.expandallgroups();")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v('<JqxGrid ref="myGrid" @groupexpand="onGroupExpand($event)"\n         :width="width" :source="dataAdapter" :columns="columns"\n         :groupable="true" :groups="[\'Title\']">\n</JqxGrid>')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("methods: {\n    onExpandGroup: function (event) {\n        let args = event.args;\n        let group = args.group;\n        let level = args.level;\n    }\n}")])])}],Se={components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{width:"99%",source:new jqx.dataAdapter(this.source),columns:[{text:"Contact Name",datafield:"ContactName"},{text:"Contact Title",datafield:"Title"},{text:"City",datafield:"City"},{text:"Country",datafield:"Country"}]}},beforeCreate:function(){this.source={localdata:[["Maria Anders","Sales Representative","Berlin","Germany"],["Ana Trujillo","Owner","Mxico D.F.","Mexico"],["Antonio Moreno","Owner","Mxico D.F.","Mexico"],["Thomas Hardy","Sales Representative","London","UK"],["Christina Berglund","Order Administrator","Lule","Sweden"],["Hanna Moos","Sales Representative","Mannheim","Germany"],["Frdrique Citeaux","Marketing Manager","Strasbourg","France"],["Martn Sommer","Owner","Madrid","Spain"],["Laurence Lebihan","Owner","Marseille","France"],["Elizabeth Lincoln","Accounting Manager","Tsawassen","Canada"],["Victoria Ashworth","Sales Representative","London","UK"],["Patricio Simpson","Sales Agent","Buenos Aires","Argentina"]],datafields:[{name:"ContactName",type:"string",map:"0"},{name:"Title",type:"string",map:"1"},{name:"City",type:"string",map:"2"},{name:"Country",type:"string",map:"3"}],datatype:"array"}},mounted:function(){for(var t=document.getElementsByClassName("code"),e=0;e<t.length;e++)t[e].innerHTML=formatCode(t[e].innerHTML)}},Te=Se,Ae=Object(c["a"])(Te,Me,je,!1,null,null,null);Ae.options.__file="Grouping.vue";var Ne=Ae.exports,Je=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"editing-docs"},[n("h1",[t._v("Vue Grid - Editing")]),n("br"),t._v("\n        jqxGrid Cell Editing feature much resembles the data entering experience in an Excel Spreadsheet - once you select a grid cell,\n        you can enter data when you start typing text."),n("br"),t._v("\n        The Grid's "),n("span",{staticClass:"keyword"},[t._v("editable")]),t._v(" property specifies whether the editing is enabled or not.\n        "),n("br"),n("br"),n("strong",[t._v("Mouse Edit Actions")]),n("br"),n("br"),t._m(0),n("strong",[t._v("Keyboard Edit Actions and Navigation")]),n("br"),n("br"),t._v("\n        If the user starts typing text, the cell's content is replaced with the text entered from the user.\n        "),t._m(1),n("strong",[t._v("Programmatic Editing")]),n("br"),n("br"),t._v("\n        The Grid have APIs for showing and hiding the cell editors."),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("begincelledit")]),t._v(" method allows you to put a specific cell into edit mode.\n        "),n("br"),n("br"),t._m(2),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("endcelledit")]),t._v(" method ends the edit operation and confirms or cancels the changes. "),n("br"),t._v("\n        The following code cancels the changes:\n        "),n("br"),n("br"),t._m(3),n("br"),t._v("\n        The following code cancels the changes:\n        "),n("br"),n("br"),t._m(4),n("br"),t._v("\n        To set a new value to a Grid cell, you can use the "),n("span",{staticClass:"keyword"},[t._v("setcellvalue")]),t._v(" method:\n        "),n("br"),n("br"),t._m(5),n("br"),t._v("\n        To get the value of a Grid cell, you can use the "),n("span",{staticClass:"keyword"},[t._v("getcellvalue")]),t._v(" method:\n        "),n("br"),n("br"),t._m(6),n("br"),t._v("\n        The "),n("span",{staticClass:"keyword"},[t._v("cellbeginedit")]),t._v(" and "),n("span",{staticClass:"keyword"},[t._v("cellendedit")]),t._v(" events are raised when the edit operation begins or ends.\n        "),n("br"),n("br"),t._m(7),n("br"),t._m(8),n("br"),n("strong",[t._v("Editor Types")]),n("br"),n("br"),t._v("\n        jqxGrid supports the following types of editors:\n        "),t._m(9),t._v("\n        To specify the column's editor, you should set the column's "),n("span",{staticClass:"keyword"},[t._v("columntype")]),t._v(" property to 'textbox', 'dropdownlist', 'numberinput', 'checkbox' or 'datetimeinput'.\n        To disable the editing of a specific grid column, you can set the column's "),n("span",{staticClass:"keyword"},[t._v("editable")]),t._v(" property to false. The "),n("span",{staticClass:"keyword"},[t._v("initeditor")]),t._v(" function is called when the editor's widget\n        is initialized. It allows you to use the properties of the widget and make it best fit your application's scenario.\n        "),n("br"),n("br"),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.width,source:t.source,columns:t.columns,editable:!0}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid :theme=\"'material'\" :width=\"width\" :source=\"source\" :columns=\"columns\"\n             :editable=\"true\">\n    </JqxGrid>\n</template>\n<script>\nimport JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                source: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'First Name', columntype: 'textbox', datafield: 'firstname' },\n                    { text: 'Last Name', datafield: 'lastname', columntype: 'textbox' },\n                    { text: 'Product', columntype: 'dropdownlist', datafield: 'productname', width: 195 },\n                    { text: 'Available', datafield: 'available', columntype: 'checkbox', width: 67 },\n                    { text: 'Ship Date', datafield: 'date', columntype: 'datetimeinput', width: 110, align: 'right', cellsalign: 'right', cellsformat: 'd' },\n                    {\n                        text: 'Quantity', datafield: 'quantity', width: 70, align: 'right', cellsalign: 'right', columntype: 'numberinput',\n                        initeditor: (row, cellvalue, editor) => {\n                            editor.jqxNumberInput({ decimalDigits: 0, digits: 3 });\n                        }\n                    },\n                    {\n                        text: 'Price', datafield: 'price', align: 'right', cellsalign: 'right', cellsformat: 'c2', columntype: 'numberinput',\n                        createeditor: (row, cellvalue, editor) => {\n                            editor.jqxNumberInput({ digits: 3 });\n                        }\n                    }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                localdata: generatedata(50, false),\n                datatype: 'array',\n                datafields: [\n                    { name: 'firstname', type: 'string' },\n                    { name: 'lastname', type: 'string' },\n                    { name: 'productname', type: 'string' },\n                    { name: 'date', type: 'date' },\n                    { name: 'available', type: 'bool' },\n                    { name: 'quantity', type: 'number' },\n                    { name: 'price', type: 'number' },                   \n                ]\n            };\n        }\n    }\n<\/script>\n")])])])]),n("p",[t._v("*generatedata function is implemented in the generatedata.js. The file is included in the download package and can be found in the installation_folder/demos/jqxgrid folder.")])],1),n("br"),n("strong",[t._v("Validation")]),n("br"),n("br"),t._v('\n\n        The Grid will display a validation popup message when the new cell\'s value is not valid. The developers are able to set a custom validation logic and error messages\n        for each grid column. The Grid will stay in edit mode until a correct value is entered or the user presses the "Esc" key.\n        '),n("br"),n("br"),t._v('\n        In following code, the "Ship Date", "Quantity" and "Price" columns define custom validation functions. Each function has 2 parameters - the edit cell and its value.\n        Depending on your logic, you can validate the value and return true if the value is correct or false, if the value is not correct.\n        You can also return an object with 2 members - result and message. The message member represents the message that your users will see, if the validation fails.\n        '),n("br"),n("br"),n("div",[n("JqxTabs",{attrs:{theme:"material",width:"100%",height:"100%"}},[n("ul",[n("li",{staticStyle:{"margin-left":"30px"}},[t._v("Preview")]),n("li",[t._v("Source")])]),n("div",[n("JqxGrid",{attrs:{theme:"material",width:t.width,source:t.source,columns:t.columns2,editable:!0}})],1),n("div",[n("pre",[n("code",{staticClass:"code"},[t._v("<template>\n    <JqxGrid :theme=\"'material'\" :width=\"width\" :source=\"source\" :columns=\"columns\"\n             :editable=\"true\">\n    </JqxGrid>\n</template>\n<script>\nimport JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n    export default {\n        components: {\n            JqxGrid\n        },\n        data: function () {\n            return {\n                width: '99%',\n                source: new jqx.dataAdapter(this.source),\n                columns: [\n                    { text: 'First Name', columntype: 'textbox', datafield: 'firstname' },\n                    { text: 'Last Name', datafield: 'lastname', columntype: 'textbox' },\n                    { text: 'Product', columntype: 'dropdownlist', datafield: 'productname', width: 195 },\n                    { text: 'Available', datafield: 'available', columntype: 'checkbox', width: 67 },\n                    {\n                        text: 'Ship Date', datafield: 'date', columntype: 'datetimeinput', width: 110, cellsalign: 'right', cellsformat: 'd',\n                        validation: function (cell, value) {\n                            var year = value.getFullYear();\n                            if (year >= 2013) {\n                                return { result: false, message: \"Ship Date should be before 1/1/2013\" };\n                            }\n                            return true;\n                        }\n                    },\n                    {\n                        text: 'Quantity', datafield: 'quantity', width: 70, cellsalign: 'right', columntype: 'numberinput',\n                        validation: function (cell, value) {\n                            if (value < 0 || value > 100) {\n                                return { result: false, message: \"Quantity should be in the 0-100 interval\" };\n                            }\n                            return true;\n                        },\n                        initeditor: function (row, cellvalue, editor) {\n                            editor.jqxNumberInput({ decimalDigits: 0 });\n                        }\n                    },\n                    {\n                        text: 'Price', datafield: 'price', cellsalign: 'right', cellsformat: 'c2', columntype: 'numberinput',\n                        validation: function (cell, value) {\n                            if (value < 0 || value > 15) {\n                                return { result: false, message: \"Price should be in the 0-15 interval\" };\n                            }\n                            return true;\n                        },\n                        initeditor: function (row, cellvalue, editor) {\n                            editor.jqxNumberInput({ digits: 3 });\n                        }\n                    }\n                ]\n            }\n        },\n        beforeCreate: function () {\n            this.source = {\n                localdata: generatedata(50, false),\n                datatype: 'array',\n                datafields: [\n                    { name: 'firstname', type: 'string' },\n                    { name: 'lastname', type: 'string' },\n                    { name: 'productname', type: 'string' },\n                    { name: 'date', type: 'date' },\n                    { name: 'available', type: 'bool' },\n                    { name: 'quantity', type: 'number' },\n                    { name: 'price', type: 'number' },                   \n                ]\n            };\n        }\n    }\n<\/script>\n")])])])])],1)])},De=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("Single mouse click: Marks the clicked cell as selected and shows the editor. The editor's value is equal to the cell's value.")]),n("li",[t._v("Single mouse click on a selected cell: Marks the cell as selected and shows the editor.")]),n("li",[t._v("Double mouse click on a cell: Marks the cell as selected and shows the editor. The editor's value is equal to the cell's value.")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("Left Arrow key is pressed - Selects the left cell, when the Grid is not in edit mode. Otherwise, the key stroke is handled by the editor.")]),n("li",[t._v("Right Arrow key is pressed - Selects the right cell, when the Grid is not in edit mode. Otherwise, the key stroke is handled by the editor.")]),n("li",[t._v("Up Arrow key is pressed - Selects the cell above, when the Grid is not in edit mode. Otherwise, the key stroke is handled by the editor.")]),n("li",[t._v("Down Arrow key is pressed - Selects the cell below, when the Grid is not in edit mode. Otherwise, the key stroke is handled by the editor.")]),n("li",[t._v("Page Up/Down is pressed - Navigate Up or Down with one page, when the Grid is not in edit mode. Otherwise, the key stroke is handled by the editor.")]),n("li",[t._v("Home/End is pressed - Navigate to the first or last row, when the Grid is not in edit mode. Otherwise, the key stroke is handled by the editor.")]),n("li",[t._v("Enter key is pressed - Shows the selected cell's editor. If the cell is in edit mode, hides the cell's editor and saves the new value. The editor's value is equal to the cell's value.")]),n("li",[t._v("Esc key is pressed - Hides the cell's editor and cancels the changes.")]),n("li",[t._v("Tab key is pressed - Selects the right cell. If the Grid is in edit mode, saves the edit cell's value, closes its editor, selects the right cell and opens its editor.")]),n("li",[t._v("Shift+Tab keys are pressed - Selects the left cell. If the Grid is in edit mode, saves the edit cell's value, closes its editor, selects the left cell and opens its editor.")]),n("li",[t._v("F2 key is pressed - shows the selected cell's editor.")]),n("li",[t._v("Space key is pressed - Toggles the checkbox editor's check state when the selected cell's column is a checkbox column.")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("this.$refs.myGrid.begincelledit(0, 'firstname');")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("this.$refs.myGrid.endcelledit(0, 'firstname', true);")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("this.$refs.myGrid.endcelledit(0, 'firstname', false);")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("// the first parameter is the row's index.\n// the second parameter is the column's datafield.\n// the third parameter is the new cell's value.\nthis.$refs.myGrid.setcellvalue(0, 'lastname', 'My Value');")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("// the first parameter is the row's index.\n// the second parameter is the column's datafield.\nlet value = this.$refs.myGrid.getcellvalue(0, 'lastname');")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v('<JqxGrid @cellbeginedit="onCellBeginEdit($event)" @cellendedit="onCellEndEdit($event)"\n         :width="width" :source="dataAdapter" :columns="columns"\n         :editable="true">\n</JqxGrid>')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("pre",{staticClass:"preCode"},[n("code",{staticClass:"code"},[t._v("methods: {\n    onCellBeginEdit: function (event) {\n        let args = event.args;\n        let columnDataField = args.datafield;\n        let rowIndex = args.rowindex;\n        let cellValue = args.value;\n    },\n    onCellEndEdit: function (event) {\n        let args = event.args;\n        let columnDataField = args.datafield;\n        let rowIndex = args.rowindex;\n        let cellValue = args.value;\n        let oldValue = args.oldvalue;\n    }\n}")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("ul",[n("li",[t._v("TextBox")]),n("li",[t._v("CheckBox(uses the jqxCheckBox widget)")]),n("li",[t._v("NumberInput(uses the jqxNumberInput widget and edits currency, percentange and any type of numeric information)")]),n("li",[t._v("DateTimeInput(uses the jqxDateTimeInput widget and edits date and time values)")]),n("li",[t._v("DropDownList(uses the jqxDropDownList widget and selects a single value from a list of values)")])])}],Ee={components:{JqxTabs:Y["a"],JqxGrid:b["a"]},data:function(){return{width:"99%",source:new jqx.dataAdapter(this.source),columns:[{text:"First Name",columntype:"textbox",datafield:"firstname"},{text:"Last Name",datafield:"lastname",columntype:"textbox"},{text:"Product",columntype:"dropdownlist",datafield:"productname",width:195},{text:"Available",datafield:"available",columntype:"checkbox",width:67},{text:"Ship Date",datafield:"date",columntype:"datetimeinput",width:110,align:"right",cellsalign:"right",cellsformat:"d"},{text:"Quantity",datafield:"quantity",width:70,align:"right",cellsalign:"right",columntype:"numberinput",initeditor:function(t,e,n){n.jqxNumberInput({decimalDigits:0,digits:3})}},{text:"Price",datafield:"price",align:"right",cellsalign:"right",cellsformat:"c2",columntype:"numberinput",createeditor:function(t,e,n){n.jqxNumberInput({digits:3})}}],columns2:[{text:"First Name",columntype:"textbox",datafield:"firstname"},{text:"Last Name",datafield:"lastname",columntype:"textbox"},{text:"Product",columntype:"dropdownlist",datafield:"productname",width:195},{text:"Available",datafield:"available",columntype:"checkbox",width:67},{text:"Ship Date",datafield:"date",columntype:"datetimeinput",width:110,cellsalign:"right",cellsformat:"d",validation:function(t,e){var n=e.getFullYear();return!(n>=2013)||{result:!1,message:"Ship Date should be before 1/1/2013"}}},{text:"Quantity",datafield:"quantity",width:70,cellsalign:"right",columntype:"numberinput",validation:function(t,e){return!(e<0||e>100)||{result:!1,message:"Quantity should be in the 0-100 interval"}},initeditor:function(t,e,n){n.jqxNumberInput({decimalDigits:0})}},{text:"Price",datafield:"price",cellsalign:"right",cellsformat:"c2",columntype:"numberinput",validation:function(t,e){return!(e<0||e>15)||{result:!1,message:"Price should be in the 0-15 interval"}},initeditor:function(t,e,n){n.jqxNumberInput({digits:3})}}]}},beforeCreate:function(){this.source={localdata:generatedata(50,!1),datatype:"array",datafields:[{name:"firstname",type:"string"},{name:"lastname",type:"string"},{name:"productname",type:"string"},{name:"date",type:"date"},{name:"available",type:"bool"},{name:"quantity",type:"number"},{name:"price",type:"number"}]}},mounted:function(){for(var t=document.getElementsByClassName("code"),e=0;e<t.length;e++)t[e].innerHTML=formatCode(t[e].innerHTML)}},Be=Ee,Fe=Object(c["a"])(Be,Je,De,!1,null,null,null);Fe.options.__file="Editing.vue";var ke=Fe.exports,Oe=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",{staticClass:"api-reference-docs"},[n("div",{attrs:{id:"properties"}},[n("h3",{staticClass:"documentation-top-header"},[t._v("Properties")]),n("table",{staticClass:"documentation-table"},[n("tbody",[t._m(0),t._m(1),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the alternating rows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :altrows=\"true\"\n  />\n</template>\n  \n  \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(2),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This property specifies the first alternating row. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :altrows=\"true\"\n    :altstart=\"2\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(3),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the alternating step ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :altrows=\"true\"\n    :altstart=\"0\" :altstep=\"2\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(4),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Determines whether the loading image should be displayed until the Grid's data is loaded. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :autoshowloadelement=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(5),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Displays the filter icon only when the column is filtered. When the value of this property is set to false, all grid columns will display a filter icon when the filtering is enabled. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :filterable=\"true\"\n    :autoshowfiltericon=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(6),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets whether the columns menu button will be displayed only when the mouse cursor is over a columns header or will be always displayed. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :filterable=\"true\"\n    :autoshowcolumnsmenubutton=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(7),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets whether the columns lines are displayed. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showcolumnlines=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(8),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets whether the row lines are displayed. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showrowlines=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(9),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets whether the column header lines are displayed. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showcolumnheaderlines=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(10),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets whether adaptive mode is enabled. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :adaptive=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(11),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the Grid's breakpoint width when adaptive mode is actived. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :adaptive=\"true\"\n    :adaptivewidth=\"400\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(12),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the clipboard operations ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :clipboard=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(13),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("When the value of this property is true, a close button is displayed in each grouping column. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupable=\"true\"\n    :groups=\" ['City'] \" :closeablegroups=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(14),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the columns menu width. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :filterable=\"true\"\n    :autoshowcolumnsmenubutton=\"false\" :columnsmenuwidth=\"40\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(15),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Callback called when a column menu is opening. You can use it for changing the size of the menu or cancelling the opening. Three params are passed - menu, datafield and menu's height. If you return false, the opening will be cancelled. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :columnmenuopening=\"columnmenuopening\"\n    :filterable=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      columnmenuopening: function (menu, datafield, height) {\n        alert('Menu Opening');\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(16),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Callback called when a column menu is opening. You can use it for changing the size of the menu or cancelling the opening. Three params are passed - menu, datafield and menu's height. If you return false, the opening will be cancelled. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :columnmenuclosing=\"columnmenuclosing\"\n    :filterable=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      columnmenuclosing: function (menu, datafield, height) {\n        alert('Menu Closing');\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(17),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Callback called when a cell is hovered. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :cellhover=\"cellhover\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      cellhover: function (cellhtmlElement, x, y) {\n        alert('Cell Hovered!');\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(18),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v('Enables or disables the delete of a cell/row values by using the "delete" key. ')]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :editable=\"true\"\n    :enablekeyboarddelete=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(19),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Determines whether ellipsis will be displayed, if the cells or columns content overflows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :enableellipsis=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(20),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Determines whether mousewheel scrolling is enabled. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"false\" :height=\"100\"\n    :enablemousewheel=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(21),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the grid animations. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :filterable=\"true\"\n    :enableanimations=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(22),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the grid tooltips. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :enabletooltips=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(23),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the grid rows hover state. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :enablehover=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(24),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables the text selection of the browser. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :enablebrowserselection=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(25),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v('Sets the position of the ever present row. Possible values: "top", "bottom", "topAboveFilterRow". ')]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showeverpresentrow=\"true\"\n    :everpresentrowposition=\"'bottom'\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(26),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets the height of the ever present row. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showeverpresentrow=\"true\"\n    :everpresentrowheight=\"40\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(27),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v('Sets the actions of the ever present row. Possible values: "add", "reset", "update", "delete". Instead of "add", you can also use "addBottom" which is the same as "add", but adds the new row to the bottom of the Grid. ')]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showeverpresentrow=\"true\"\n    :everpresentrowactions=\"'add update delete reset'\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(28),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v('Sets the actions display mode. By default they are displayed in a popup. You can set the property to "columns" and define columns with datafields - addButtonColumn, resetButtonColumn, updateButtonColumn and deleteButtonColumn to display the actions in columns. ')]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showeverpresentrow=\"true\"\n       :everpresentrowactionsmode=\"'columns'\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' },\n          { datafield: 'addButtonColumn', width: 50 },\n          { datafield: 'resetButtonColumn', width: 50 }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(29),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the filter row's height. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :filterable=\"true\"\n    :showfilterrow=\"true\" :filterrowheight=\"40\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(30),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v('The property specifies the type of rendering of the Filter Menu. Possible values: "default" and "excel". In "excel" mode, the Filter Menu displays a ListBox with Checkboxes with all unique cell values. ')]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :filterable=\"true\"\n    :filtermode=\"'excel'\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(31),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This function is called when a group is rendered. You can use it to customize the default group rendering. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupsrenderer=\"groupsrenderer\"\n    :groupable=\"true\" :groups=\" ['City'] \"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      groupsrenderer: function (text, group, expanded) {\n        return 'City: ' + group;\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(32),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets a custom renderer for the grouping columns displayed in the grouping header when the grouping feature is enabled. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupcolumnrenderer=\"groupcolumnrenderer\"\n    :groupable=\"true\" :groups=\" ['City'] \"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      groupcolumnrenderer: function (text) {\n        return 'Grouped By: ' + text;\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(33),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the default state of the grouped rows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupable=\"true\"\n    :groups=\" ['ContactName'] \" :groupsexpandedbydefault=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(34),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The function is called when a key is pressed. If the result of the function is true, the default keyboard navigation will be overriden for the pressed key. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :handlekeyboardnavigation=\"handlekeyboardnavigation\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      handlekeyboardnavigation: function () {\n        const key = event.charCode ? event.charCode : event.keyCode ? event.keyCode : 0;\n        alert(key);\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(35),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The function is called when the Grid Pager is rendered. This allows you to customize the default rendering of the pager. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :pagerrenderer=\"pagerrenderer\"\n    :pageable=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      pagerrenderer: function () {\n        const element = document.createElement('div');\n        element.innerHTML = 'Custom Render of the JqxGrid Pager!';\n        return element;\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(36),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets a value indicating whether widget's elements are aligned to support locales using right-to-left fonts.")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :rtl=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(37),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Determines whether the Grid should display the built-in loading element or should use a DIV tag with class 'jqx-grid-load' ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showdefaultloadelement=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(38),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("When this property is true, the Grid adds an additional visual style to the grid cells in the filter column(s). ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :filterable=\"true\"\n    :showfiltercolumnbackground=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(39),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Determines whether to display the filtering items in the column's menu. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :filterable=\"true\"\n    :showfiltermenuitems=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(40),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("When this property is true, the Grid adds an additional visual style to the grid cells in the pinned column(s). ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"500\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showpinnedcolumnbackground=\"false\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { pinned: 'true', text: 'Contact Name', datafield: 'ContactName', width: 150 },\n          { text: 'Contact Title', datafield: 'Title', width: 150 },\n          { text: 'City', datafield: 'City', width: 150 },\n          { text: 'Country', datafield: 'Country', width: 150 },\n          { text: 'Country1', width: 150 },\n          { text: 'Country2', width: 150 },\n          { text: 'Country3', width: 150 },\n          { text: 'Country4', width: 150 },\n          { text: 'Country5', width: 150 }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(41),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("When this property is true, the Grid adds an additional visual style to the grid cells in the sort column. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :sortable=\"true\"\n    :showsortcolumnbackground=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(42),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Determines whether to display the sort menu items. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :sortable=\"true\"\n    :showsortmenuitems=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(43),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Determines whether to display the group menu items. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupable=\"true\"\n    :showgroupmenuitems=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(44),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows an additional column with expand/collapse toggle buttons when the Row details feature is enabled. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :rowdetails=\"true\"\n    :showrowdetailscolumn=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(45),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows or hides the columns header. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showheader=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(46),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows or hides the groups header area. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupable=\"true\"\n    :showgroupsheader=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(47),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows or hides the aggregates in the grid's statusbar. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showaggregates=\"true\" :showstatusbar=\"true\" :statusbarheight=\"50\"/>\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          {\n            text: 'Contact Title', datafield: 'Title', aggregates: ['count', {\n              'Owners': function (aggregatedValue, currentValue) {\n                if (currentValue == 'Owner') {\n                  return aggregatedValue + 1;\n                }\n                return aggregatedValue;\n              }\n            }]\n          },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country', aggregates: ['count'] }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(48),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows or hides the aggregates in Grid groups. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupable=\"true\" \n       :showaggregates=\"true\" :showgroupaggregates=\"true\" :showstatusbar=\"true\" :statusbarheight=\"50\" />\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          {\n            text: 'Contact Title', datafield: 'Title', aggregates: ['count', {\n              'Owners': function (aggregatedValue, currentValue) {\n                if (currentValue == 'Owner') {\n                  return aggregatedValue + 1;\n                }\n                return aggregatedValue;\n              }\n            }]\n          },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country', aggregates: ['count'] }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(49),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows or hides an additional row in jqxGrid which allows you to easily add new rows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showeverpresentrow=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(50),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows or hides the filter row. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :filterable=\"true\"\n    :showfilterrow=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(51),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows or hides the empty row label when the Grid has no records to display. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :columns=\"columns\" :autoheight=\"true\" :showemptyrow=\"false\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(52),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows or hides the grid's statusbar. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showstatusbar=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(53),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets the statusbar's height. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showstatusbar=\"true\"\n    :statusbarheight=\"50\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(54),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows or hides the grid's toolbar. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showtoolbar=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(55),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the selection mode. ")]),n("B",[t._v("Possible Values:")]),n("PRE",[n("CODE",[t._v("'none'-disables the selection")])],1),n("PRE",[n("CODE",[t._v("'singlerow'- full row selection")])],1),n("PRE",[n("CODE",[t._v("'multiplerows' - each click selects a new row. Click on a selected row unselects it")])],1),n("PRE",[n("CODE",[t._v("'multiplerowsextended' - multiple rows selection with drag and drop. The selection behavior resembles the selection of icons on your desktop")])],1),n("PRE",[n("CODE",[t._v("'singlecell' - single cell selection")])],1),n("PRE",[n("CODE",[t._v("'multiplecells' - each click selects a new cell. Click on a selected cell unselects it")])],1),n("PRE",[n("CODE",[t._v("'multiplecellsextended' - in this mode, users can select multiple cells with a drag and drop. The selection behavior resembles the selection of icons on your desktop")])],1),n("PRE",[n("CODE",[t._v("'multiplecellsadvanced' - this mode is the most advanced cells selection mode. In this mode, users can select multiple cells with a drag and drop. The selection behavior resembles the selection of cells in a spreadsheet")])],1),n("PRE",[n("CODE",[t._v("'checkbox' - multiple rows selection through a checkbox.")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :selectionmode=\"'multiplerows'\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(56),t._m(57),t._m(58),t._m(59),t._m(60),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets the widget's theme. ")]),n("UL",[n("LI",[t._v("\n                                        Include the theme's CSS file after jqx.base.css."),n("BR"),t._v("The following code example adds the 'material' theme. "),n("PRE",[n("CODE",[n("PRE",[n("CODE",[t._v('<link rel="stylesheet" href="../../jqwidgets/styles/jqx.base.css" type="text/css" />\n<link rel="stylesheet" href="../../jqwidgets/styles/jqx.material.css" type="text/css" />\n')])],1)],1)],1)],1),n("LI",[t._v("Set the widget's theme property to 'material' when you initialize it. ")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :theme=\"'material'\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(61),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the toolbar's height. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showtoolbar=\"true\"\n    :toolbarheight=\"40\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(62),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the height of the grid to be equal to the summary height of the grid rows. This option should be set when the Grid is in paging mode. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(63),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v('This property works along with the "autoheight" property. When it is set to true, the height of the Grid rows is dynamically changed depending on the cell values. ')]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :autorowheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(64),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the columns height. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :columnsheight=\"40\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(65),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v('Determines the cell values displayed in a tooltip next to the scrollbar when the "scrollmode" is set to "deferred". ')]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"false\" :height=\"100\"\n    :scrollmode=\"'deferred'\" :deferreddatafields=\" ['ContactName'] \"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(66),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the height of the Grid Groups Header. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupable=\"true\"\n    :groupsheaderheight=\"60\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(67),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the group indent size. This size is used when the grid is grouped. This is the size of the columns with expand/collapse toggle buttons. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupable=\"true\"\n    :groupindentwidth=\"40\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(68),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the Grid's height. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"false\" :height=\"500\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(69),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the height of the Grid Pager. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :pageable=\"true\"\n    :pagerheight=\"50\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(70),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the height of the grid rows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :rowsheight=\"30\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(71),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the scrollbars size. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"false\" :height=\"100\"\n    :scrollbarsize=\"20\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(72),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Determines the scrolling mode. ")]),n("B",[t._v("Possible Values:")]),n("PRE",[n("CODE",[t._v("'default'")])],1),n("PRE",[n("CODE",[t._v("'logical'- the movement of the scrollbar thumb is by row, not by pixel")])],1),n("PRE",[n("CODE",[t._v("'deferred'-content is stationary when the user drags the Thumb of a ScrollBar")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"false\" :height=\"100\"\n    :scrollmode=\"'logical'\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(73),t._m(74),t._m(75),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the Grid's width. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(76),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Determines whether the Grid automatically saves its current state. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :autoloadstate=\"true\"\n    :autosavestate=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(77),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Determines whether the Grid automatically loads its current state(if there's already saved one). The Grid's state is loaded when the page is refreshed. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :autoloadstate=\"true\"\n    :autosavestate=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(78),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets the Grid columns. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(79),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("UL",[n("LI",[t._v("parentgroup - sets the column header's parent group name.")]),n("LI",[t._v("name - sets the column header's name.")]),n("LI",[t._v("align - sets the column header's alignment to 'left', 'center' or 'right'. ")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :columngroups=\"columngroups\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', columngroup: 'ContactInfo' },\n          { text: 'Contact Title', datafield: 'Title', columngroup: 'ContactInfo' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        columngroups: [{ text: 'Contact Info', name: 'ContactInfo', align: 'center' }]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(80),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the columns dropdown menu. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :sortable=\"true\"\n    :columnsmenu=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(81),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the columns resizing. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :columnsresize=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(82),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the columns resizing when the column's border is double-clicked and "),n("CODE",[t._v("columnsresize")]),t._v(" is set to true. ")],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :columnsresize=\"true\"\n    :columnsautoresize=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(83),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the columns reordering. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :columnsreorder=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(84),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the Grid's plugin. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :disabled=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(85),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The editable property enables or disables the Grid editing feature. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :editable=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(86),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The editmode property specifies the action that the end-user should make to open an editor. ")]),n("B",[t._v("Possible Values:")]),n("PRE",[n("CODE",[t._v("'click' - Marks the clicked cell as selected and shows the editor. The editor's value is equal to the cell's value")])],1),n("PRE",[n("CODE",[t._v("'selectedcell' - Marks the cell as selected. A second click on the selected cell shows the editor. The editor's value is equal to the cell's value")])],1),n("PRE",[n("CODE",[t._v("'selectedrow' - A second click on a selected row shows the row editors.")])],1),n("PRE",[n("CODE",[t._v("'dblclick' - Marks the clicked cell as selected and shows the editor. The editor's value is equal to the cell's value")])],1),n("PRE",[n("CODE",[t._v("'programmatic' - Cell editors are activated and deactivated only through the API(see begincelledit and endcelledit methods)")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :editable=\"true\"\n    :editmode=\"'dblclick'\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(87),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Custom Filtering function. It overrides the built-in Filtering. When the user filters, the Grid calls this function, when it is implemented. The function is expected to return a boolean value or undefined. ")]),n("UL",[n("LI",[t._v("cellValue - current cell's value.")]),n("LI",[t._v("rowData - JSON object which contains the current row's data.")]),n("LI",[t._v("dataField - filter column's field.")]),n("LI",[t._v("filterGroup - group of filters.")]),n("LI",[t._v("defaultFilterResult - the default filter result. ")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :filterable=\"true\"\n    :filter=\"filter\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      filter: function (cellValue, rowData, dataField, filterGroup, defaultFilterResult) {\n        // implements a custom filter for the \"Contactname\" field. \n        if (dataField === \"ContactName\") {\n          var filters = filterGroup.getfilters();\n          for (var i = 0; i < filters.length; i++) {\n            var filter = filters[i];\n            var filterValue = filter.value;\n            var filterCondition = filter.condition;\n            var filterType = filter.type;\n\n            if (cellValue.indexOf(\"Ana\") >= 0) {\n              return true;\n            }\n          }\n\n          return false;\n        }\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(88),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the Grid Filtering feature. When the value of this property is true, the Grid displays a filtering panel in the columns popup menus. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :filterable=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(89),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This property enables or disables the grouping feature. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupable=\"true\"\n    :groups=\" ['ContactName'] \"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(90),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the Grid groups when the Grouping feature is enabled. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :groupable=\"true\"\n    :groups=\" ['ContactName'] \"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(91),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the scrollbar's step when the user clicks the scroll arrows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"400\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :horizontalscrollbarstep=\"200\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: '100' },\n          { text: 'Contact Title', datafield: 'Title', width: '100' },\n          { text: 'City', datafield: 'City', width: '100' },\n          { text: 'Country', datafield: 'Country', width: '100' },\n          { text: 'Column5', width: '100' },\n          { text: 'Column6', width: '100' },\n          { text: 'Column7', width: '100' },\n          { text: 'Column8', width: '100' },\n          { text: 'Column9', width: '100' },\n          { text: 'Column10', width: '100' },\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(92),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the scrollbar's large step. This property specifies the step with which the horizontal scrollbar's value is changed when the user clicks the area above or below the thumb. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"400\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :horizontalscrollbarlargestep=\"600\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: '100' },\n          { text: 'Contact Title', datafield: 'Title', width: '100' },\n          { text: 'City', datafield: 'City', width: '100' },\n          { text: 'Country', datafield: 'Country', width: '100' },\n          { text: 'Column5', width: '100' },\n          { text: 'Column6', width: '100' },\n          { text: 'Column7', width: '100' },\n          { text: 'Column8', width: '100' },\n          { text: 'Column9', width: '100' },\n          { text: 'Column10', width: '100' },\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(93),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This function is called when the user expands the row details and the details are going to be rendered. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" \n       :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"<div style='margin: 10px;'>Row Details</div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function(index, parentElement, gridElement, datarecord) {\n        var details = $($(parentElement).children()[0]);\n        details.html(\"Details: \" + index);\n      }      \n    }\n  }\n<\/script>\n")])],1)])]),t._m(94),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the keyboard navigation. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :keyboardnavigation=\"false\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(95),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Localizes the Grid.")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :pageable=\"true\"\n    :localization=\"localization\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        localization: getLocalization('de'),\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(96),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the number of visible rows per page when the Grid paging is enabled. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :pageable=\"true\"\n    :pagesize=\"2\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(97),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the available page size options. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :pageable=\"true\"\n    :pagesizeoptions=\" ['15', '30', '50'] \"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(98),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v('Sets or gets the rendering mode of the pager. Available values - "simple" and "default". ')]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :pageable=\"true\"\n    :pagermode=\"'simple'\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(99),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v('Sets or gets the buttons displayed in the pager when the "pagermode" is set to "simple". ')]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :pageable=\"true\"\n       :pagermode=\"'simple'\" :pagesize=\"1\" :pagerbuttonscount=\"10\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico'],\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(100),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the Grid Paging feature. When the value of this property is true, the Grid displays a pager below the rows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :pageable=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(101),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the row details. When this option is enabled, the Grid can show additional information below each grid row. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" \n       :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"<div style='margin: 10px;'>Row Details</div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function(index, parentElement, gridElement, datarecord) {\n        var details = $($(parentElement).children()[0]);\n        details.html(\"Details: \" + index);\n      }      \n    }\n  }\n<\/script>\n")])],1)])]),t._m(102),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Determines the template of the row details. The rowdetails field specifies the HTML used for details. The rowdetailsheight specifies the height of the details. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" \n       :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"<div style='margin: 10px;'>Row Details</div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function(index, parentElement, gridElement, datarecord) {\n        var details = $($(parentElement).children()[0]);\n        details.html(\"Details: \" + index);\n      }      \n    }\n  }\n<\/script>\n")])],1)])]),t._m(103),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This function is called when the grid is initialized and the binding is complete. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :ready=\"ready\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      ready: function () {\n        alert('ready!')\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(104),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Callback function which is called when the jqxGrid's render function is called either internally or not. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :rendered=\"rendered\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      rendered: function () {\n        alert('rendered!')\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(105),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Callback function which allows you to customize the rendering of the Grid's statusbar. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showstatusbar=\"true\"\n    :renderstatusbar=\"renderstatusbar\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      renderstatusbar: function (statusbar) {\n        statusbar.append($(\"<span style='margin: 5px;'>Status Bar</span>\"));\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(106),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Callback function which allows you to customize the rendering of the Grid's toolbar. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :showtoolbar=\"true\"\n    :rendertoolbar=\"rendertoolbar\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      rendertoolbar: function (toolbar) {\n        toolbar.append($(\"<span style='margin: 5px;'>Tool Bar</span>\"));\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(107),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This is a function called when the grid is used in virtual mode. The function should return an array of rows which will be rendered by the Grid. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div style=\"font-size: 13px; font-family: Verdana; float: left\">\n    <JqxGrid :width=\"800\" :source=\"dataAdapter\" :columns=\"columns\"\n         :autoheight=\"true\" :virtualmode=\"true\" :pageable=\"true\"\n         :rendergridrows=\"rendergridrows\">\n    </JqxGrid>\n  </div>\n</template>\n<script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        dataAdapter: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Id', datafield: 'id', width: 50 },\n          { text: 'First Name', datafield: 'firstname', width: 120 },\n          { text: 'Last Name', datafield: 'lastname', width: 120 },\n          { text: 'Product', datafield: 'productname', width: 180 },\n          { text: 'Quantity', datafield: 'quantity', width: 100, cellsalign: 'right' },\n          { text: 'Unit Price', datafield: 'price', width: 100, cellsalign: 'right', cellsformat: 'c2' },\n          { text: 'Total', datafield: 'total', cellsrenderer: this.totalcolumnrenderer, cellsalign: 'right' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        datatype: 'array',\n        localdata: {},\n        totalrecords: 1000000\n      }\n      this.firstNames = [\n        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n      ];\n      this.lastNames = [\n        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n      ];\n      this.productNames = [\n        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n      ];\n      this.priceValues = [\n        '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n      ];\n    },\n    methods: {\n      generateData: function(startindex, endindex) {\n        let data = {};\n        for (let i = startindex; i < endindex; i++) {\n          let row = {};\n          let productindex = Math.floor(Math.random() * this.productNames.length);\n          let price = parseFloat(this.priceValues[productindex]);\n          let quantity = 1 + Math.round(Math.random() * 10);\n          row['id'] = i;\n          row['firstname'] = this.firstNames[Math.floor(Math.random() * this.firstNames.length)];\n          row['lastname'] = this.lastNames[Math.floor(Math.random() * this.lastNames.length)];\n          row['productname'] = this.productNames[productindex];\n          row['price'] = price;\n          row['quantity'] = quantity;\n          row['total'] = price * quantity;\n          data[i] = row;\n        }\n        return data;\n      },\n      rendergridrows: function (params) {\n        let data = this.generateData(params.startindex, params.endindex);\n        return data;\n      },\n      totalcolumnrenderer: function (row, column, cellvalue) {\n        let newCellValue = jqx.dataFormat.formatnumber(cellvalue, 'c2');\n        return '<span style=\"margin: 6px 3px; font-size: 12px; float: right; font-weight: bold;\">' + newCellValue + '</span>';\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(108),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The sortable property enables or disables the sorting feature. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :sortable=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(109),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The sortmode property determines the Grid can sort by single or multiple columns. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :sortable=\"true\"\n    :sortmode=\"'many'\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(110),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Selects a row at a specified index. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :selectedrowindex=\"2\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(111),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Selects single or multiple rows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :selectionmode=\"'multiplerows'\"\n    :selectedrowindexes=\" [0, 2] \"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(112),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets and gets the source. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(113),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("B",[t._v("Possible Values:")]),n("PRE",[n("CODE",[t._v("'0'-disables toggling")])],1),n("PRE",[n("CODE"),t._v("'1'-enables togging. Click on a column toggles the sort direction")],1),n("PRE",[n("CODE",[t._v("'2'-enables remove sorting option")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :sortable=\"true\"\n    :sorttogglestates=\"1\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(114),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the rendering update delay. This could be used for deferred scrolling scenarios. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" :updatedelay=\"20\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(115),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Enables or disables the virtual data mode. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div style=\"font-size: 13px; font-family: Verdana; float: left\">\n    <JqxGrid :width=\"800\" :source=\"dataAdapter\" :columns=\"columns\"\n         :autoheight=\"true\" :virtualmode=\"true\" :pageable=\"true\"\n         :rendergridrows=\"rendergridrows\">\n    </JqxGrid>\n  </div>\n</template>\n<script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        dataAdapter: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Id', datafield: 'id', width: 50 },\n          { text: 'First Name', datafield: 'firstname', width: 120 },\n          { text: 'Last Name', datafield: 'lastname', width: 120 },\n          { text: 'Product', datafield: 'productname', width: 180 },\n          { text: 'Quantity', datafield: 'quantity', width: 100, cellsalign: 'right' },\n          { text: 'Unit Price', datafield: 'price', width: 100, cellsalign: 'right', cellsformat: 'c2' },\n          { text: 'Total', datafield: 'total', cellsrenderer: this.totalcolumnrenderer, cellsalign: 'right' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        datatype: 'array',\n        localdata: {},\n        totalrecords: 1000000\n      }\n      this.firstNames = [\n        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n      ];\n      this.lastNames = [\n        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n      ];\n      this.productNames = [\n        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n      ];\n      this.priceValues = [\n        '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n      ];\n    },\n    methods: {\n      generateData: function(startindex, endindex) {\n        let data = {};\n        for (let i = startindex; i < endindex; i++) {\n          let row = {};\n          let productindex = Math.floor(Math.random() * this.productNames.length);\n          let price = parseFloat(this.priceValues[productindex]);\n          let quantity = 1 + Math.round(Math.random() * 10);\n          row['id'] = i;\n          row['firstname'] = this.firstNames[Math.floor(Math.random() * this.firstNames.length)];\n          row['lastname'] = this.lastNames[Math.floor(Math.random() * this.lastNames.length)];\n          row['productname'] = this.productNames[productindex];\n          row['price'] = price;\n          row['quantity'] = quantity;\n          row['total'] = price * quantity;\n          data[i] = row;\n        }\n        return data;\n      },\n      rendergridrows: function (params) {\n        let data = this.generateData(params.startindex, params.endindex);\n        return data;\n      },\n      totalcolumnrenderer: function (row, column, cellvalue) {\n        let newCellValue = jqx.dataFormat.formatnumber(cellvalue, 'c2');\n        return '<span style=\"margin: 6px 3px; font-size: 12px; float: right; font-weight: bold;\">' + newCellValue + '</span>';\n      }\n    }\n  }\n<\/script>\n")])],1)])]),t._m(116),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the scrollbar's step when the user clicks the scroll arrows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid :width=\"getWidth\" :source=\"dataAdapter\" :columns=\"columns\" :columnsresize=\"true\" :verticalscrollbarstep=\"200\">\n  </JqxGrid>\n</template>\n<script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        getWidth: getWidth('grid'),\n        dataAdapter: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Name', datafield: 'firstname', width: 120 },\n          { text: 'Last Name', datafield: 'lastname', width: 120 },\n          { text: 'Product', datafield: 'productname', width: 180 },\n          { text: 'Quantity', datafield: 'quantity', width: 80, cellsalign: 'right' },\n          { text: 'Unit Price', datafield: 'price', width: 90, cellsalign: 'right', cellsformat: 'c2' },\n          { text: 'Total', datafield: 'total', cellsalign: 'right', cellsformat: 'c2' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.firstNames = [\n        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n      ];\n      this.lastNames = [\n        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n      ];\n      this.productNames = [\n        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n      ];\n      this.priceValues = [\n        '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n      ];\n\n      let generateData = () => {\n        let data = {};\n        for (let i = 0; i < 200; i++) {\n          let row = {};\n          let productindex = Math.floor(Math.random() * this.productNames.length);\n          let price = parseFloat(this.priceValues[productindex]);\n          let quantity = 1 + Math.round(Math.random() * 10);\n          row['id'] = i;\n          row['firstname'] = this.firstNames[Math.floor(Math.random() * this.firstNames.length)];\n          row['lastname'] = this.lastNames[Math.floor(Math.random() * this.lastNames.length)];\n          row['productname'] = this.productNames[productindex];\n          row['price'] = price;\n          row['quantity'] = quantity;\n          row['total'] = price * quantity;\n          data[i] = row;\n        }\n        return data;\n      };\n\n      this.source = {\n        localdata: generateData(),\n        datatype: 'array',\n        datafields:\n          [\n            { name: 'firstname', type: 'string' },\n            { name: 'lastname', type: 'string' },\n            { name: 'productname', type: 'string' },\n            { name: 'quantity', type: 'number' },\n            { name: 'price', type: 'number' },\n            { name: 'total', type: 'number' }\n          ]\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(117),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets or gets the scrollbar's large step. This property specifies the step with which the vertical scrollbar's value is changed when the user clicks the area above or below the thumb. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid :width=\"getWidth\" :source=\"dataAdapter\" :columns=\"columns\" :columnsresize=\"true\" :verticalscrollbarlargestep=\"2000\">\n  </JqxGrid>\n</template>\n<script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        getWidth: getWidth('grid'),\n        dataAdapter: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Name', datafield: 'firstname', width: 120 },\n          { text: 'Last Name', datafield: 'lastname', width: 120 },\n          { text: 'Product', datafield: 'productname', width: 180 },\n          { text: 'Quantity', datafield: 'quantity', width: 80, cellsalign: 'right' },\n          { text: 'Unit Price', datafield: 'price', width: 90, cellsalign: 'right', cellsformat: 'c2' },\n          { text: 'Total', datafield: 'total', cellsalign: 'right', cellsformat: 'c2' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.firstNames = [\n        'Andrew', 'Nancy', 'Shelley', 'Regina', 'Yoshi', 'Antoni', 'Mayumi', 'Ian', 'Peter', 'Lars', 'Petra', 'Martin', 'Sven', 'Elio', 'Beate', 'Cheryl', 'Michael', 'Guylene'\n      ];\n      this.lastNames = [\n        'Fuller', 'Davolio', 'Burke', 'Murphy', 'Nagase', 'Saavedra', 'Ohno', 'Devling', 'Wilson', 'Peterson', 'Winkler', 'Bein', 'Petersen', 'Rossi', 'Vileid', 'Saylor', 'Bjorn', 'Nodier'\n      ];\n      this.productNames = [\n        'Black Tea', 'Green Tea', 'Caffe Espresso', 'Doubleshot Espresso', 'Caffe Latte', 'White Chocolate Mocha', 'Cramel Latte', 'Caffe Americano', 'Cappuccino', 'Espresso Truffle', 'Espresso con Panna', 'Peppermint Mocha Twist'\n      ];\n      this.priceValues = [\n        '2.25', '1.5', '3.0', '3.3', '4.5', '3.6', '3.8', '2.5', '5.0', '1.75', '3.25', '4.0'\n      ];\n\n      let generateData = () => {\n        let data = {};\n        for (let i = 0; i < 200; i++) {\n          let row = {};\n          let productindex = Math.floor(Math.random() * this.productNames.length);\n          let price = parseFloat(this.priceValues[productindex]);\n          let quantity = 1 + Math.round(Math.random() * 10);\n          row['id'] = i;\n          row['firstname'] = this.firstNames[Math.floor(Math.random() * this.firstNames.length)];\n          row['lastname'] = this.lastNames[Math.floor(Math.random() * this.lastNames.length)];\n          row['productname'] = this.productNames[productindex];\n          row['price'] = price;\n          row['quantity'] = quantity;\n          row['total'] = price * quantity;\n          data[i] = row;\n        }\n        return data;\n      };\n\n      this.source = {\n        localdata: generateData(),\n        datatype: 'array',\n        datafields:\n          [\n            { name: 'firstname', type: 'string' },\n            { name: 'lastname', type: 'string' },\n            { name: 'productname', type: 'string' },\n            { name: 'quantity', type: 'number' },\n            { name: 'price', type: 'number' },\n            { name: 'total', type: 'number' }\n          ]\n      };\n    }\n  }\n<\/script>\n")])],1)])]),t._m(118),t._m(119),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v('This event is triggered when the binding is completed. Note: Bind to that event before the Grid\'s initialization, because if you data bind the Grid to a local data source and bind to the "bindingcomplete" event after the initializaation, the data binding will be already completed. ')]),n("h4",[t._v("Code examples")]),t._m(120),t._m(121)],1)])]),t._m(122),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a Grid Column is resized. ")]),n("h4",[t._v("Code examples")]),t._m(123),t._m(124)],1)])]),t._m(125),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a Grid Column is moved to a new position. ")]),n("h4",[t._v("Code examples")]),t._m(126),t._m(127)],1)])]),t._m(128),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a column is clicked. ")]),n("h4",[t._v("Code examples")]),t._m(129),t._m(130)],1)])]),t._m(131),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a cell is clicked. ")]),n("h4",[t._v("Code examples")]),t._m(132),t._m(133)],1)])]),t._m(134),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a cell is double-clicked. ")]),n("h4",[t._v("Code examples")]),t._m(135),t._m(136)],1)])]),t._m(137),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a cell is selected. ")]),n("h4",[t._v("Code examples")]),t._m(138),t._m(139)],1)])]),t._m(140),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a cell is unselected. ")]),n("h4",[t._v("Code examples")]),t._m(141),t._m(142)],1)])]),t._m(143),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a cell's value is changed. ")]),n("h4",[t._v("Code examples")]),t._m(144),t._m(145)],1)])]),t._m(146),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a cell's editor is displayed. ")]),n("h4",[t._v("Code examples")]),t._m(147),t._m(148)],1)])]),t._m(149),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a cell's edit operation has ended. ")]),n("h4",[t._v("Code examples")]),t._m(150),t._m(151)],1)])]),t._m(152),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when the Grid is filtered. ")]),n("h4",[t._v("Code examples")]),t._m(153),t._m(154)],1)])]),t._m(155),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a group is added, inserted or removed. ")]),n("h4",[t._v("Code examples")]),t._m(156),t._m(157)],1)])]),t._m(158),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a group is expanded. ")]),n("h4",[t._v("Code examples")]),t._m(159),t._m(160)],1)])]),t._m(161),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a group is collapsed. ")]),n("h4",[t._v("Code examples")]),t._m(162),t._m(163)],1)])]),t._m(164),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when the current page is changed. ")]),n("h4",[t._v("Code examples")]),t._m(165),t._m(166)],1)])]),t._m(167),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when the page size is changed. ")]),n("h4",[t._v("Code examples")]),t._m(168),t._m(169)],1)])]),t._m(170),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a row is clicked. ")]),n("h4",[t._v("Code examples")]),t._m(171),t._m(172)],1)])]),t._m(173),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a row is double clicked. ")]),n("h4",[t._v("Code examples")]),t._m(174),t._m(175)],1)])]),t._m(176),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a row is selected. ")]),n("h4",[t._v("Code examples")]),t._m(177),t._m(178)],1)])]),t._m(179),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a row is unselected. ")]),n("h4",[t._v("Code examples")]),t._m(180),t._m(181)],1)])]),t._m(182),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a row with details is expanded. ")]),n("h4",[t._v("Code examples")]),t._m(183),t._m(184)],1)])]),t._m(185),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when a row with details is collapsed. ")]),n("h4",[t._v("Code examples")]),t._m(186),t._m(187)],1)])]),t._m(188),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("This event is triggered when the Grid is sorted. ")]),n("h4",[t._v("Code examples")]),t._m(189),t._m(190)],1)])]),t._m(191),t._m(192),t._m(193),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Auto-resizes all columns. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"410\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-top: 20px;\" :width=\"150\" @click=\"resizeColumns()\">Auto Resize Columns</JqxButton>\n  </div>\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: 50 },\n          { text: 'Contact Title', datafield: 'Title', width: 50 },\n          { text: 'City', datafield: 'City', width: 50 },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      resizeColumns: function () {\n        this.$refs.myGrid.autoresizecolumns();\n      }\n    }\n  }\n<\/script>")])],1)])]),t._m(194),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Auto-resizes a column. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"500\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-top: 20px;\" :width=\"200\" @click=\"resizeColumn()\">Auto Resize Second Column</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: 150 },\n          { text: 'Contact Title', datafield: 'Title', width: 50 },\n          { text: 'City', datafield: 'City', width: 100 },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      resizeColumn: function () {\n        this.$refs.myGrid.autoresizecolumn('Title');\n      }\n    }\n  }\n<\/script>")])],1)])]),t._m(195),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Starts an update operation. This is appropriate when calling multiple methods or set multiple properties at once. Optional boolean parameter: suspendAllActions. When you call beginupdate with parameter equal to "),n("CODE",[t._v("true")]),t._v(', the jqxGrid stops all rendering processes and when you call "endupdate", it will call the "render" method. Otherwise, it will try to resume its state with minimial performance impact. Use the suspendAllActions when you make multiple changes which require full-rerender such as changing the Grid\'s source, columns, groups. ')],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :sortable=\"true\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"beginUpdate()\">Begin Update</JqxButton>\n    <JqxButton :width=\"100\" @click=\"endUpdate()\">End Update</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      beginUpdate: function () {\n        this.$refs.myGrid.beginupdate();\n      },\n      endUpdate: function () {\n        this.$refs.myGrid.endupdate();\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(196),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Clears the Grid contents. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.clear();\n    }\n  }\n<\/script>")])],1)])]),t._m(197),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Removes the Grid from the document and releases its resources. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.destroy();\n    }\n  }\n<\/script>")])],1)])]),t._m(198),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Ends the update operation. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :sortable=\"true\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"beginUpdate()\">Begin Update</JqxButton>\n    <JqxButton :width=\"100\" @click=\"endUpdate()\">End Update</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      beginUpdate: function () {\n        this.$refs.myGrid.beginupdate();\n      },\n      endUpdate: function () {\n        this.$refs.myGrid.endupdate();\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(199),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Scrolls to a row. The parameter is a bound index. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :height=\"70\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.ensurerowvisible(2);\n    }\n  }\n<\/script>")])],1)])]),t._m(200),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets the keyboard Focus to the jqxGrid widget. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.focus();\n    }\n  }\n<\/script>")])],1)])]),t._m(201),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the index of a column in the columns collection. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getcolumnindex('Title');\n    }\n  }\n<\/script>")])],1)])]),t._m(202),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets a column by datafield value.Column's fields: ")]),n("UL",[n("LI",[t._v('datafield - column\'s datafield. To get the cells labels and values from the data source, the Grid uses the "datafield" and "displayfield" properties. If the "displayfield" is not set, the "displayfield" is equal to the "datafield\'.')]),n("LI",[t._v("text - column's text.")]),n("LI",[t._v('displayfield - column\'s displayfield. To get the cells labels and values from the data source, the Grid uses the "datafield" and "displayfield" properties. If the "displayfield" is not set, the "displayfield" is equal to the "datafield\'.')]),n("LI",[t._v("sortable - determines whether the column is sortable.")]),n("LI",[t._v("filterable - determines whether the column is filterable.")]),n("LI",[t._v('exportable - determines whether the column will be exported through the "exportdata" method.')]),n("LI",[t._v("editable - determines whether the column is editable.")]),n("LI",[t._v("groupable - determines whether the column is groupable.")]),n("LI",[t._v("resizable - determines whether the column is resizable.")]),n("LI",[t._v("draggable - determines whether the column is draggable.")]),n("LI",[t._v("classname - determines the column's header classname.")]),n("LI",[t._v("cellclassname - determines the column's cells classname.")]),n("LI",[t._v("width - determines the column's width.")]),n("LI",[t._v("menu - determines whether the column has an associated popup menu or not. ")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getcolumn('Title');\n    }\n  }\n<\/script>")])],1)])]),t._m(203),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets a property of a column. Possible property names: 'text', 'hidden', 'hideable', 'renderer', 'cellsrenderer', 'align', 'cellsalign', 'cellsformat', 'pinned', 'contenttype', 'resizable', 'filterable', 'editable', 'cellclassname', 'classname', 'width', 'minwidth', 'maxwidth' ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getcolumnproperty('Title','text');\n    }\n  }\n<\/script>")])],1)])]),t._m(204),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the id of a row. The returned value is a 'string' or 'number' depending on the id's type. The parameter is the row's bound index. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getrowid(0);\n    }\n  }\n<\/script>")])],1)])]),t._m(205),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the data of a row. The returned value is a JSON object. The parameter is the row's bound index. Note: If you pass a bound index of a row which is not visible in the Grid, the method returns null. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getrowdata(0);\n    }\n  }\n<\/script>")])],1)])]),t._m(206),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the data of a row. The returned value is a JSON object. The parameter is the row's id. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getrowdatabyid(0);\n    }\n  }\n<\/script>")])],1)])]),t._m(207),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the index of a row in the array returned by the "),n("CODE",[t._v("getboundrows")]),t._v(" method. ")],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getrowboundindexbyid(0);\n    }\n  }\n<\/script>")])],1)])]),t._m(208),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the index of a row in the array returned by the "),n("CODE",[t._v("getboundrows")]),t._v(" method. ")],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getrowboundindex(0);\n    }\n  }\n<\/script>")])],1)])]),t._m(209),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets all rows. Returns an array of all rows loaded in the Grid. If the Grid is filtered, the returned value is an array of the filtered records. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getrows();\n    }\n  }\n<\/script>")])],1)])]),t._m(210),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets all rows loaded from the data source. The method returns an Array of all rows. The Grid's sorting, filtering, grouping and paging will not affect the result of this method. It will always return the rows collection loaded from the data source. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getboundrows();\n    }\n  }\n<\/script>")])],1)])]),t._m(211),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets all rows that are currently displayed in the Grid. The method returns an Array of the displayed rows. The Grid's sorting, filtering, grouping and paging will affect the result of this method. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getdisplayrows();\n    }\n  }\n<\/script>")])],1)])]),t._m(212),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets bound data information. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.pageable = true;\n      this.$refs.myGrid.sortable = true;\n\n      const value = this.$refs.myGrid.getdatainformation();\n    }\n  }\n<\/script>")])],1)])]),t._m(213),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the sort information. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.sortable = true;\n\n      const value = this.$refs.myGrid.getsortinformation();\n    }\n  }\n<\/script>")])],1)])]),t._m(214),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the paging information. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.pageable = true;\n\n      const value = this.$refs.myGrid.getpaginginformation();\n    }\n  }\n<\/script>")])],1)])]),t._m(215),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Hides a column. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"showColumn()\">Show Column</JqxButton>\n    <JqxButton :width=\"100\" @click=\"hideColumn()\">Hide Column</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName'},\n          { text: 'Contact Title', datafield: 'Title'},\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      showColumn: function () {\n        this.$refs.myGrid.showcolumn('ContactName');\n      },\n      hideColumn: function () {\n        this.$refs.myGrid.hidecolumn('ContactName');\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(216),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Hides the data loading image. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"150\" @click=\"showElement()\">Show Load Element</JqxButton>\n    <JqxButton :width=\"150\" @click=\"hideElement()\">Hide Load Element</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      showElement: function () {\n        this.$refs.myGrid.showloadelement();\n      },\n      hideElement: function () {\n        this.$refs.myGrid.hideloadelement();\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(217),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Hides the details of a row. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n         :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"150\" @click=\"showDetails()\">Show Row Details</JqxButton>\n    <JqxButton :width=\"150\" @click=\"hideDetails()\">Hide Row Details</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"<div style='margin: 10px;'>Row Details</div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function (index, parentElement, gridElement, datarecord) {\n        var details = $($(parentElement).children()[0]);\n        details.html(\"Details: \" + index);\n      },\n      showDetails: function () {\n        this.$refs.myGrid.showrowdetails(0);\n      },\n      hideDetails: function () {\n        this.$refs.myGrid.hiderowdetails(0);\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(218),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets whether a column is visible. Returns a boolean value. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.iscolumnvisible('ContactName');\n    }\n  }\n<\/script>")])],1)])]),t._m(219),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets whether a column is pinned. Returns a boolean value. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.iscolumnpinned('ContactName');\n    }\n  }\n<\/script>")])],1)])]),t._m(220),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Localizes the grid strings. This method allows you to change the valus of all Grid strings and also to change the cells formatting settings. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.pageable = true;\n\n      this.$refs.myGrid.localizestrings(getLocalization('de'));\n    }\n  }\n<\/script>")])],1)])]),t._m(221),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Pins the column. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"pinColumn()\">Pin Column</JqxButton>\n    <JqxButton :width=\"100\" @click=\"unpinColumn()\">Unpin Column</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      pinColumn: function () {\n        this.$refs.myGrid.pincolumn('ContactName');\n      },\n      unpinColumn: function () {\n        this.$refs.myGrid.unpincolumn('ContactName');\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(222),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Refreshes the data. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.refreshdata();\n    }\n  }\n<\/script>")])],1)])]),t._m(223),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Repaints the Grid View. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.refresh();\n    }\n  }\n<\/script>")])],1)])]),t._m(224),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Renders the Grid contents. This method completely refreshes the Grid cells, columns, layout and repaints the view. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.render();\n    }\n  }\n<\/script>")])],1)])]),t._m(225),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Scrolls the grid contents. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"400\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: 150 },\n          { text: 'Contact Title', datafield: 'Title', width: 150 },\n          { text: 'City', datafield: 'City', width: 150 },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.scrolloffset(0, 100);\n    }\n  }\n<\/script>")])],1)])]),t._m(226),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Returns the scrollbars position. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"400\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName', width: 150 },\n          { text: 'Contact Title', datafield: 'Title', width: 150 },\n          { text: 'City', datafield: 'City', width: 150 },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      let position = this.$refs.myGrid.scrollposition();\n      let left = position.left;\n      let top = position.top;\n      alert('Left: ' + left + \", Top: \" + top);\n    }\n  }\n<\/script>")])],1)])]),t._m(227),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows the data loading image. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"150\" @click=\"showElement()\">Show Load Element</JqxButton>\n    <JqxButton :width=\"150\" @click=\"hideElement()\">Hide Load Element</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      showElement: function () {\n        this.$refs.myGrid.showloadelement();\n      },\n      hideElement: function () {\n        this.$refs.myGrid.hideloadelement();\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(228),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows the details of a row. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n         :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"150\" @click=\"showDetails()\">Show Row Details</JqxButton>\n    <JqxButton :width=\"150\" @click=\"hideDetails()\">Hide Row Details</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"<div style='margin: 10px;'>Row Details</div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function (index, parentElement, gridElement, datarecord) {\n        var details = $($(parentElement).children()[0]);\n        details.html(\"Details: \" + index);\n      },\n      showDetails: function () {\n        this.$refs.myGrid.showrowdetails(0);\n      },\n      hideDetails: function () {\n        this.$refs.myGrid.hiderowdetails(0);\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(229),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[t._v("\n                                n"),n("P",[t._v("Sets the index of a column in the columns collection. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.setcolumnindex('Title',0);\n    }\n  }\n<\/script>")])],1)])]),t._m(230),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets a property of a column.Possible property names: 'text', 'hidden', 'hideable', 'renderer', 'cellsrenderer', 'align', 'cellsalign', 'cellsformat', 'pinned', 'contenttype', 'resizable', 'filterable', 'editable', 'cellclassname', 'classname', 'width', 'minwidth', 'maxwidth' ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.setcolumnproperty('Title','text','New Name');\n    }\n  }\n<\/script>")])],1)])]),t._m(231),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows a column. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"showColumn()\">Show Column</JqxButton>\n    <JqxButton :width=\"100\" @click=\"hideColumn()\">Hide Column</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName'},\n          { text: 'Contact Title', datafield: 'Title'},\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      showColumn: function () {\n        this.$refs.myGrid.showcolumn('ContactName');\n      },\n      hideColumn: function () {\n        this.$refs.myGrid.hidecolumn('ContactName');\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(232),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Unpins the column. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"pinColumn()\">Pin Column</JqxButton>\n    <JqxButton :width=\"100\" @click=\"unpinColumn()\">Unpin Column</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      pinColumn: function () {\n        this.$refs.myGrid.pincolumn('ContactName');\n      },\n      unpinColumn: function () {\n        this.$refs.myGrid.unpincolumn('ContactName');\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(233),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Updates the bound data and refreshes the grid. You can pass 'filter' or 'sort' as parameter, if the update reason is change in 'filtering' or 'sorting'. To update only the data without the columns, use the 'data' parameter. To make a quick update of the cells, pass \"cells\" as parameter. Passing \"cells\" will refresh only the cells values when the new rows count is equal to the previous rows count. To make a full update, do not pass any parameter. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.updatebounddata();\n    }\n  }\n<\/script>")])],1)])]),t._m(234),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the updating operation state. Returns a boolean value. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.updating();\n    }\n  }\n<\/script>")])],1)])]),t._m(235),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the sort column. Returns the column's datafield or null, if sorting is not applied. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.sortable = true;\n\n      const value = this.$refs.myGrid.getsortcolumn();\n    }\n  }\n<\/script>")])],1)])]),t._m(236),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Removes the sorting. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"850\" :source=\"source\" :columns=\"columns\" :sortable=\"true\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-top: 20px;\" :width=\"150\" @click=\"removeSort()\">Remove Sort</JqxButton>\n  </div>\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      removeSort: function () {\n        this.$refs.myGrid.removesort();\n      }\n    }\n  }\n<\/script>")])],1)])]),t._m(237),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sorts the Grid data. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.sortable = true;\n\n      this.$refs.myGrid.sortby('ContactName','asc');\n    }\n  }\n<\/script>")])],1)])]),t._m(238),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Groups by a column. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"addGroup()\">Add Group</JqxButton>\n    <JqxButton :width=\"100\" @click=\"removeGroup()\">Remove Group</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      addGroup: function () {\n        this.$refs.myGrid.addgroup('ContactName');\n      },\n      removeGroup: function () {\n        this.$refs.myGrid.removegroup('ContactName');\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(239),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Clears all groups. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"clearGroups()\">Clear Groups</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      clearGroups: function () {\n        this.$refs.myGrid.cleargroups();\n      }\n    }\n  }\n<\/script>")])],1)])]),t._m(240),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Collapses a group. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :groups=\" ['ContactName'] \" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"expandGroup()\">Expand Group</JqxButton>\n    <JqxButton :width=\"100\" @click=\"collapseGroup()\">Collapse Group</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      expandGroup: function () {\n        this.$refs.myGrid.expandgroup(0);\n      },\n      collapseGroup: function () {\n        this.$refs.myGrid.collapsegroup(0);\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(241),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Collapses all groups. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :groups=\" ['ContactName'] \" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"110\" @click=\"expandGroup()\">Expand Groups</JqxButton>\n    <JqxButton :width=\"110\" @click=\"collapseGroup()\">Collapse Groups</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      expandGroup: function () {\n        this.$refs.myGrid.expandallgroups();\n      },\n      collapseGroup: function () {\n        this.$refs.myGrid.collapseallgroups();\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(242),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Expands all groups. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :groups=\" ['ContactName'] \" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"110\" @click=\"expandGroup()\">Expand Groups</JqxButton>\n    <JqxButton :width=\"110\" @click=\"collapseGroup()\">Collapse Groups</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      expandGroup: function () {\n        this.$refs.myGrid.expandallgroups();\n      },\n      collapseGroup: function () {\n        this.$refs.myGrid.collapseallgroups();\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(243),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Expands a group. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :groups=\" ['ContactName'] \" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"expandGroup()\">Expand Group</JqxButton>\n    <JqxButton :width=\"100\" @click=\"collapseGroup()\">Collapse Group</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      expandGroup: function () {\n        this.$refs.myGrid.expandgroup(0);\n      },\n      collapseGroup: function () {\n        this.$refs.myGrid.collapsegroup(0);\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(244),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the number of root groups. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.groupable = true;\n      this.$refs.myGrid.groups = ['ContactName'];\n\n      const value = this.$refs.myGrid.getrootgroupscount();\n    }\n  }\n<\/script>")])],1)])]),t._m(245),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets a group. The method returns an object with details about the Group. The object has the following fields: ")]),n("UL",[n("LI",[t._v("group - group's name.")]),n("LI",[t._v("level - group's level in the group's hierarchy.")]),n("LI",[t._v("expanded - group's expand state.")]),n("LI",[t._v("subgroups - an array of sub groups or null.")]),n("LI",[t._v("subrows - an array of rows or null. ")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.groupable = true;\n      this.$refs.myGrid.groups = ['ContactName'];\n\n      const value = this.$refs.myGrid.getgroup(0);\n    }\n  }\n<\/script>")])],1)])]),t._m(246),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Groups by a column. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.groupable = true;\n      this.$refs.myGrid.groups = ['ContactName'];\n\n      this.$refs.myGrid.insertgroup(0,'Title');\n    }\n  }\n<\/script>")])],1)])]),t._m(247),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets whether the user can group by a column. Returns a boolean value. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.groupable = true;\n\n      const value = this.$refs.myGrid.iscolumngroupable('ContactName');\n    }\n  }\n<\/script>")])],1)])]),t._m(248),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Removes a group at specific index. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-top: 20px;\" :width=\"150\" @click=\"removeGroupAt()\">Remove First Group</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      removeGroupAt: function () {\n        this.$refs.myGrid.removegroupat('0');\n      }\n    }\n  }\n<\/script>")])],1)])]),t._m(249),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Removes a group. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :groupable=\"true\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;\" :width=\"100\" @click=\"addGroup()\">Add Group</JqxButton>\n    <JqxButton :width=\"100\" @click=\"removeGroup()\">Remove Group</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      addGroup: function () {\n        this.$refs.myGrid.addgroup('ContactName');\n      },\n      removeGroup: function () {\n        this.$refs.myGrid.removegroup('ContactName');\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n    margin-top: 20px;\n  }\n</style>")])],1)])]),t._m(250),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Adds a filter to the Grid. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :autoheight=\"true\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      let filtergroup = new jqx.filter();\n      let filter_or_operator = 1;\n      let filtervalue = 'Maria';\n      let filtercondition = 'contains';\n      let filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n      filtergroup.addfilter(filter_or_operator, filter);\n      this.$refs.myGrid.addfilter('ContactName', filtergroup);\n      this.$refs.myGrid.applyfilters();\n    }\n  }\n<\/script>")])],1)])]),t._m(251),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Applies all filters to the Grid. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :autoheight=\"true\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      let filtergroup = new jqx.filter();\n      let filter_or_operator = 1;\n      let filtervalue = 'Maria';\n      let filtercondition = 'contains';\n      let filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n      filtergroup.addfilter(filter_or_operator, filter);\n      this.$refs.myGrid.addfilter('ContactName', filtergroup);\n      this.$refs.myGrid.applyfilters();\n    }\n  }\n<\/script>")])],1)])]),t._m(252),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v('Clears all filters from the Grid. You can call the method with optional boolean parameter. If the parameter is "true" or you call the method without parameter, the Grid will clear the filters and refresh the Grid(default behavior). If the parameter is "false", the method will clear the filters without refreshing the Grid. ')]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-top: 20px;\" :width=\"100\" @click=\"clearFilters()\">Clear Filters</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      clearFilters: function () {\n        this.$refs.myGrid.clearfilters();\n      }\n    }\n  }\n<\/script>")])],1)])]),t._m(253),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the information about the Grid filters. The method returns an array of the applied filters. The returned information includes the filter objects and filter columns. Each filter in the Array has the following fields: ")]),n("UL",[n("LI",[t._v("\n                                        filter - a filter object which may contain one or more filters. "),n("BR"),t._v("Properties and Methods of the filter object.\n                                        "),n("UL",[n("LI",[t._v("\n                                                getfilters - returns an array of all filters in the filter object. Each filter in the Array has:\n                                                "),n("UL",[n("LI",[t._v("value - filter's value.")]),n("LI",[t._v("id - filter's id.")]),n("LI",[t._v("condition - filter's operator. For string filter the value could be: 'EMPTY', 'NOT_EMPTY', 'CONTAINS', 'CONTAINS_CASE_SENSITIVE', 'DOES_NOT_CONTAIN', 'DOES_NOT_CONTAIN_CASE_SENSITIVE', 'STARTS_WITH', 'STARTS_WITH_CASE_SENSITIVE', 'ENDS_WITH', 'ENDS_WITH_CASE_SENSITIVE', 'EQUAL', 'EQUAL_CASE_SENSITIVE', 'NULL', 'NOT_NULL. For Date and number filter the value could be: 'EQUAL', 'NOT_EQUAL', 'LESS_THAN', 'LESS_THAN_OR_EQUAL', 'GREATER_THAN', 'GREATER_THAN_OR_EQUAL', 'NULL', 'NOT_NULL'. For boolean filter, the value could be: 'EQUAL', 'NOT_EQUAL'")]),n("LI",[t._v("type - filter's type - 'stringfilter', 'numericfilter', 'booleanfilter' or 'datefilter'. ")])],1)],1),n("LI",[t._v("operator - 'and' or 'or'. Determines the connection between the filters in the group. ")])],1)],1),n("LI",[t._v("datafield - the column's datafield.")]),n("LI",[t._v("displayfield - the column's display field. ")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.filterable = true;\n\n      const value = this.$refs.myGrid.getfilterinformation();\n    }\n  }\n<\/script>")])],1)])]),t._m(254),t._m(255),t._m(256),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Removes a filter from the Grid. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-top: 20px;\" :width=\"200\" @click=\"removeFilter()\">Remove Contact Name Filter</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      removeFilter: function () {\n        this.$refs.myGrid.removefilter('ContactName');\n      }\n    }\n  }\n<\/script>")])],1)])]),t._m(257),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Refreshes the filter row and updates the filter widgets. The filter row's widgets are synchronized with the applied filters. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :filterable=\"true\" :showfilterrow=\"true\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-top: 20px;\" :width=\"200\" @click=\"refresh()\">Refresh filter row</JqxButton>\n  </div>\n</template>\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      addFilters: function() {\n        let filtergroup = new jqx.filter();\n        let filter_or_operator = 1;\n        let filtervalue = 'Maria';\n        let filtercondition = 'contains';\n        let filter = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n        filtergroup.addfilter(filter_or_operator, filter);\n        this.$refs.myGrid.addfilter('ContactName', filtergroup);\n        this.$refs.myGrid.applyfilters();\n      },\n      refresh: function () {\n        this.addFilters()\n        this.$refs.myGrid.refreshfilterrow();\n      }\n    }\n  }\n<\/script>")])],1)])]),t._m(258),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Navigates to a page when the Grid paging is enabled i.e when the pageable property value is true. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.pageable = true;\n      this.$refs.myGrid.pagesize = 1;\n\n      this.$refs.myGrid.gotopage(2);\n    }\n  }\n<\/script>")])],1)])]),t._m(259),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Navigates to a previous page when the Grid paging is enabled i.e when the pageable property value is true. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :pageable=\"true\" :pagesize=\"1\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;margin-top: 20px;\" :width=\"100\" @click=\"prevPage()\">Previous Page</JqxButton>\n    <JqxButton style=\"margin-top: 20px;\":width=\"100\" @click=\"nextPage()\">Next Page</JqxButton>\n  </div>\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      prevPage: function () {\n        this.$refs.myGrid.gotoprevpage();\n      },\n      nextPage: function () {\n        this.$refs.myGrid.gotonextpage();\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n  }\n</style>")])],1)])]),t._m(260),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Navigates to a next page when the Grid paging is enabled i.e when the pageable property value is true. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <div>\n    <JqxGrid ref=\"myGrid\"\n         :width=\"800\" :source=\"source\" :columns=\"columns\" :pageable=\"true\" :pagesize=\"1\" :autoheight=\"true\" />\n    <JqxButton style=\"margin-right: 20px;margin-top: 20px;\" :width=\"100\" @click=\"prevPage()\">Previous Page</JqxButton>\n    <JqxButton style=\"margin-top: 20px;\":width=\"100\" @click=\"nextPage()\">Next Page</JqxButton>\n  </div>\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n  import JqxButton from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxbuttons.vue';\n\n  export default {\n    components: {\n      JqxGrid,\n      JqxButton\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      prevPage: function () {\n        this.$refs.myGrid.gotoprevpage();\n      },\n      nextPage: function () {\n        this.$refs.myGrid.gotonextpage();\n      }\n    }\n  }\n<\/script>\n<style>\n  .jqx-button {\n    display: inline-block;\n  }\n</style>")])],1)])]),t._m(261),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Adds a new row or multiple rows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.addrow(1,{});\n    }\n  }\n<\/script>")])],1)])]),t._m(262),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows the cell's editor. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.begincelledit(1,'firstname');\n    }\n  }\n<\/script>")])],1)])]),t._m(263),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Shows the cell editors for an entire row. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.beginrowedit(1);\n    }\n  }\n<\/script>")])],1)])]),t._m(264),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Closes a column's menu. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.closemenu();\n    }\n  }\n<\/script>")])],1)])]),t._m(265),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Deletes a row or multiple rows. Returns a boolean value. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.deleterow(1);\n    }\n  }\n<\/script>")])],1)])]),t._m(266),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Hides the edit cell's editor and saves or cancels the changes. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.endcelledit(1,'firstname',true);\n    }\n  }\n<\/script>")])],1)])]),t._m(267),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Hides the edited row's editors and saves or cancels the changes. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.endrowedit(1,true);\n    }\n  }\n<\/script>")])],1)])]),t._m(268),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets a cell. Returns an object with the following fields: ")]),n("UL",[n("LI",[t._v("value - cell's value.")]),n("LI",[t._v("row - cell's row number.")]),n("LI",[t._v("column - column's datafield. ")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getcell(1,'firstname');\n    }\n  }\n<\/script>")])],1)])]),t._m(269),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets a cell at specific position. Returns an object with the following fields: ")]),n("UL",[n("LI",[t._v("value - cell's value.")]),n("LI",[t._v("row - cell's row number.")]),n("LI",[t._v("column - column's datafield. ")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getcellatposition(10,100);\n    }\n  }\n<\/script>")])],1)])]),t._m(270),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the text of a cell. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getcelltext(1,'firstname');\n    }\n  }\n<\/script>")])],1)])]),t._m(271),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the text of a cell. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getcelltextbyid(1,'firstname');\n    }\n  }\n<\/script>")])],1)])]),t._m(272),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the value of a cell. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getcellvaluebyid(1,'firstname');\n    }\n  }\n<\/script>")])],1)])]),t._m(273),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the value of a cell. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getcellvalue(1,'firstname');\n    }\n  }\n<\/script>")])],1)])]),t._m(274),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Returns whether the binding is completed and if the result is true, this means that you can invoke methods and set properties. Otherwise, if the binding is not completed and you try to set a property or invoke a method, the widget will throw an exception. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.isBindingCompleted();\n    }\n  }\n<\/script>")])],1)])]),t._m(275),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Displays a column's menu. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.openmenu('firstname');\n    }\n  }\n<\/script>")])],1)])]),t._m(276),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets a new value to a cell. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.setcellvalue(1,'firstname','New Name');\n    }\n  }\n<\/script>")])],1)])]),t._m(277),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Sets a new value to a cell. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.setcellvaluebyid(1,'firstname','New Name');\n    }\n  }\n<\/script>")])],1)])]),t._m(278),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Displays a validation popup below a Grid cell. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.showvalidationpopup(1,'firstname','Error message');\n    }\n  }\n<\/script>")])],1)])]),t._m(279),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Updates a row or multiple rows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.updaterow(1,{firstname: 'New Name'});\n    }\n  }\n<\/script>")])],1)])]),t._m(280),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Clears the selection. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.clearselection();\n    }\n  }\n<\/script>")])],1)])]),t._m(281),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'")]),n("P",[t._v("Gets the bound index of the selected row. Returns -1, if there's no selection. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getselectedrowindex();\n    }\n  }\n<\/script>")])],1)])]),t._m(282),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'")]),n("P",[t._v("Gets the indexes of the selected rows. Returns an array of the selected rows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getselectedrowindexes();\n    }\n  }\n<\/script>")])],1)])]),t._m(283),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'")]),n("P",[t._v("Gets the selected cell. The returned value is an object with two fields: 'rowindex' - the row's bound index and 'datafield' - the column's datafield. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getselectedcell();\n    }\n  }\n<\/script>")])],1)])]),t._m(284),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'")]),n("P",[t._v("Gets all selected cells. Returns an array of all selected cells. Each cell in the array is an object with two fields: 'rowindex' - the row's bound index and 'datafield' - the column's datafield. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getselectedcells();\n    }\n  }\n<\/script>")])],1)])]),t._m(285),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'")]),n("P",[t._v("Selects a cell. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.selectcell(1,'firstname');\n    }\n  }\n<\/script>")])],1)])]),t._m(286),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The selection mode should be set to: 'multiplerows' or 'multiplerowsextended'")]),n("P",[t._v("Selects all Grid rows. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.selectallrows();\n    }\n  }\n<\/script>")])],1)])]),t._m(287),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'")]),n("P",[t._v("Selects a row. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.selectrow(1);\n    }\n  }\n<\/script>")])],1)])]),t._m(288),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The expected selection mode is 'singlerow', 'multiplerows' or 'multiplerowsextended'")]),n("P",[t._v("Unselects a row. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.unselectrow(1);\n    }\n  }\n<\/script>")])],1)])]),t._m(289),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("The expected selection mode is 'singlecell', 'multiplecells' or 'multiplecellsextended'")]),n("P",[t._v("Unselects a cell. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.unselectcell(1,'firstname');\n    }\n  }\n<\/script>")])],1)])]),t._m(290),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the aggregated data of a Grid column. Returns a JSON object. Each field name is the aggregate's type('min', 'max', 'sum', etc.).")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getcolumnaggregateddata();\n    }\n  }\n<\/script>")])],1)])]),t._m(291),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Refreshes the Aggregates in the Grid's status bar.")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.refreshaggregates();\n    }\n  }\n<\/script>")])],1)])]),t._m(292),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Renders the aggregates in the Grid's status bar.")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.renderaggregates();\n    }\n  }\n<\/script>")])],1)])]),t._m(293),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Exports all rows loaded within the Grid to Excel, XML, CSV, TSV, HTML or JSON. ")]),n("PRE",[n("CODE",[t._v("var data = $(\"#jqxgrid\").jqxGrid('exportdata', 'json');")])],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.exportdata('xls,'grid.xls');\n    }\n  }\n<\/script>")])],1)])]),t._m(294),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Gets the Grid's state. the getstate method gets the following information: 'sort column, sort order, page number, page size, applied filters and filter row values, column widths and visibility, cells and rows selection and groups. ")]),n("UL",[n("LI",[t._v("width - the Grid's width.")]),n("LI",[t._v("height - the Grid's height.")]),n("LI",[t._v("pagenum - the Grid's page number.")]),n("LI",[t._v("pagesize - the Grid's page size.")]),n("LI",[t._v("pagesizeoptions - the Grid's page size options - an array of the available page sizes.")]),n("LI",[t._v("sortcolumn - the Grid's sort column. The value is the column's datafield or null, if sorting is not applied.")]),n("LI",[t._v("sortdirection - JSON object with two boolean fields: 'ascending' and 'descending'.")]),n("LI",[t._v("filters - the applied filters. See the 'getfilterinformation' method.")]),n("LI",[t._v("groups - the Grid's groups array which contains the grouped columns data fields.")]),n("LI",[t._v("\n                                        columns - an array of Columns. Each column in the array has the following fields:\n                                        "),n("UL",[n("LI",[t._v("width - column's width.")]),n("LI",[t._v("hidden - column's visible state.")]),n("LI",[t._v("pinned - column's pinned state.")]),n("LI",[t._v("groupable - column's groupable state.")]),n("LI",[t._v("resizable - column's resizable state.")]),n("LI",[t._v("draggable - column's draggable state.")]),n("LI",[t._v("text - column's text.")]),n("LI",[t._v("align - column's align.")]),n("LI",[t._v("cellsalign - column's cells align. ")])],1)],1)],1),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getstate();\n    }\n  }\n<\/script>")])],1)])]),t._m(295),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Loads the Grid's state. the loadstate method loads the following information: 'sort column, sort order, page number, page size, applied filters and filter row values, column widths and visibility, cells and rows selection and groups. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.loadstate();\n    }\n  }\n<\/script>")])],1)])]),t._m(296),n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("P",[t._v("Saves the Grid's current state. the savestate method saves the following information: 'sort column, sort order, page number, page size, applied filters and filter row values, column widths and visibility, cells and rows selection and groups. ")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.savestate();\n    }\n  }\n<\/script>")])],1)])])])])])])},$e=[function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("th",[t._v("Name")]),n("th",[t._v("Type")]),n("th",[t._v("Default")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan0"}},[t._v("altrows")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan1"}},[t._v("altstart")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            1\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan2"}},[t._v("altstep")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            1\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan3"}},[t._v("autoshowloadelement")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan4"}},[t._v("autoshowfiltericon")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan5"}},[t._v("autoshowcolumnsmenubutton")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan6"}},[t._v("showcolumnlines")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan7"}},[t._v("showrowlines")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan8"}},[t._v("showcolumnheaderlines")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan9"}},[t._v("adaptive")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan10"}},[t._v("adaptivewidth")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            600\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan11"}},[t._v("clipboard")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan12"}},[t._v("closeablegroups")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan13"}},[t._v("columnsmenuwidth")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            15\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan14"}},[t._v("columnmenuopening")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan15"}},[t._v("columnmenuclosing")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan16"}},[t._v("cellhover")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan17"}},[t._v("enablekeyboarddelete")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan18"}},[t._v("enableellipsis")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan19"}},[t._v("enablemousewheel")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan20"}},[t._v("enableanimations")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan21"}},[t._v("enabletooltips")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan22"}},[t._v("enablehover")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan23"}},[t._v("enablebrowserselection")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan24"}},[t._v("everpresentrowposition")])]),n("td",[n("span",[t._v("String")])]),n("td",[t._v("\n                            'top'\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan25"}},[t._v("everpresentrowheight")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            30\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan26"}},[t._v("everpresentrowactions")])]),n("td",[n("span",[t._v("String")])]),n("td",[t._v('\n                            "add reset"\n                        ')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan27"}},[t._v("everpresentrowactionsmode")])]),n("td",[n("span",[t._v("String")])]),n("td",[t._v('\n                            "popup"\n                        ')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan28"}},[t._v("filterrowheight")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            36\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan29"}},[t._v("filtermode")])]),n("td",[n("span",[t._v("String")])]),n("td",[t._v('\n                            "default"\n                        ')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan30"}},[t._v("groupsrenderer")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan31"}},[t._v("groupcolumnrenderer")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan32"}},[t._v("groupsexpandedbydefault")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan33"}},[t._v("handlekeyboardnavigation")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan34"}},[t._v("pagerrenderer")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan35"}},[t._v("rtl")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan36"}},[t._v("showdefaultloadelement")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan37"}},[t._v("showfiltercolumnbackground")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan38"}},[t._v("showfiltermenuitems")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan39"}},[t._v("showpinnedcolumnbackground")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan40"}},[t._v("showsortcolumnbackground")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan41"}},[t._v("showsortmenuitems")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan42"}},[t._v("showgroupmenuitems")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan43"}},[t._v("showrowdetailscolumn")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan44"}},[t._v("showheader")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan45"}},[t._v("showgroupsheader")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan46"}},[t._v("showaggregates")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan47"}},[t._v("showgroupaggregates")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan48"}},[t._v("showeverpresentrow")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan49"}},[t._v("showfilterrow")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan50"}},[t._v("showemptyrow")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan51"}},[t._v("showstatusbar")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan52"}},[t._v("statusbarheight")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            34\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan53"}},[t._v("showtoolbar")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan54"}},[t._v("selectionmode")])]),n("td",[n("span",[t._v("String")])]),n("td",[t._v("\n                            'singlerow'\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan55"}},[t._v("updatefilterconditions")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("p"),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" \n       :width=\"800\" :source=\"source\" :autoheight=\"true\" :columns=\"columns\" \n       :filterable=\"true\" :autoshowfiltericon=\"true\" :ready=\"ready\"\n       :updatefilterconditions=\"updatefilterconditions\" :updatefilterpanel=\"updatefilterpanel\">\n  </JqxGrid>\n</template>\n<script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      addfilter: function () {\n        let filtergroup = new jqx.filter();\n        let filter_or_operator = 1;\n        let filtervalue = 'Beate';\n        let filtercondition = 'contains';\n        let filter1 = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n        filtervalue = 'Andrew';\n        filtercondition = 'contains';\n        let filter2 = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n        filtergroup.addfilter(filter_or_operator, filter1);\n        filtergroup.addfilter(filter_or_operator, filter2);\n        // add the filters.\n        this.$refs.myGrid.addfilter('firstname', filtergroup);\n        // apply the filters.\n        this.$refs.myGrid.applyfilters();\n      },\n      updatefilterconditions: function (type, defaultconditions) {\n        let stringcomparisonoperators = ['CONTAINS', 'DOES_NOT_CONTAIN'];\n        let numericcomparisonoperators = ['LESS_THAN', 'GREATER_THAN'];\n        let datecomparisonoperators = ['LESS_THAN', 'GREATER_THAN'];\n        let booleancomparisonoperators = ['EQUAL', 'NOT_EQUAL'];\n        switch (type) {\n          case 'stringfilter':\n            return stringcomparisonoperators;\n          case 'numericfilter':\n            return numericcomparisonoperators;\n          case 'datefilter':\n            return datecomparisonoperators;\n          case 'booleanfilter':\n            return booleancomparisonoperators;\n        }\n      },\n      updatefilterpanel: function (filtertypedropdown1, filtertypedropdown2, filteroperatordropdown, filterinputfield1,\n        filterinputfield2, filterbutton, clearbutton, columnfilter, filtertype, filterconditions) {\n        let index1 = 0;\n        let index2 = 0;\n        if (columnfilter != null) {\n          let filter1 = columnfilter.getfilterat(0);\n          let filter2 = columnfilter.getfilterat(1);\n          if (filter1) {\n            index1 = filterconditions.indexOf(filter1.comparisonoperator);\n            let value1 = filter1.filtervalue;\n            filterinputfield1.val(value1);\n          }\n          if (filter2) {\n            index2 = filterconditions.indexOf(filter2.comparisonoperator);\n            let value2 = filter2.filtervalue;\n            filterinputfield2.val(value2);\n          }\n        }\n        filtertypedropdown1.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: index1 });\n        filtertypedropdown2.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: index2 });\n      },\n      ready: function () {\n        this.addfilter();\n        let localizationObject = {\n          filterstringcomparisonoperators: ['contains', 'does not contain'],\n          // filter numeric comparison operators.\n          filternumericcomparisonoperators: ['less than', 'greater than'],\n          // filter date comparison operators.\n          filterdatecomparisonoperators: ['less than', 'greater than'],\n          // filter bool comparison operators.\n          filterbooleancomparisonoperators: ['equal', 'not equal']\n        }\n        this.$refs.myGrid.localizestrings(localizationObject);\n      }\n    }\n  }\n<\/script>\n")])])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan56"}},[t._v("updatefilterpanel")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("p"),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" \n       :width=\"800\" :source=\"source\" :autoheight=\"true\" :columns=\"columns\" \n       :filterable=\"true\" :autoshowfiltericon=\"true\" :ready=\"ready\"\n       :updatefilterconditions=\"updatefilterconditions\" :updatefilterpanel=\"updatefilterpanel\">\n  </JqxGrid>\n</template>\n<script>\n  import JqxGrid from \"jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue\";\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      addfilter: function () {\n        let filtergroup = new jqx.filter();\n        let filter_or_operator = 1;\n        let filtervalue = 'Beate';\n        let filtercondition = 'contains';\n        let filter1 = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n        filtervalue = 'Andrew';\n        filtercondition = 'contains';\n        let filter2 = filtergroup.createfilter('stringfilter', filtervalue, filtercondition);\n        filtergroup.addfilter(filter_or_operator, filter1);\n        filtergroup.addfilter(filter_or_operator, filter2);\n        // add the filters.\n        this.$refs.myGrid.addfilter('firstname', filtergroup);\n        // apply the filters.\n        this.$refs.myGrid.applyfilters();\n      },\n      updatefilterconditions: function (type, defaultconditions) {\n        let stringcomparisonoperators = ['CONTAINS', 'DOES_NOT_CONTAIN'];\n        let numericcomparisonoperators = ['LESS_THAN', 'GREATER_THAN'];\n        let datecomparisonoperators = ['LESS_THAN', 'GREATER_THAN'];\n        let booleancomparisonoperators = ['EQUAL', 'NOT_EQUAL'];\n        switch (type) {\n          case 'stringfilter':\n            return stringcomparisonoperators;\n          case 'numericfilter':\n            return numericcomparisonoperators;\n          case 'datefilter':\n            return datecomparisonoperators;\n          case 'booleanfilter':\n            return booleancomparisonoperators;\n        }\n      },\n      updatefilterpanel: function (filtertypedropdown1, filtertypedropdown2, filteroperatordropdown, filterinputfield1,\n        filterinputfield2, filterbutton, clearbutton, columnfilter, filtertype, filterconditions) {\n        let index1 = 0;\n        let index2 = 0;\n        if (columnfilter != null) {\n          let filter1 = columnfilter.getfilterat(0);\n          let filter2 = columnfilter.getfilterat(1);\n          if (filter1) {\n            index1 = filterconditions.indexOf(filter1.comparisonoperator);\n            let value1 = filter1.filtervalue;\n            filterinputfield1.val(value1);\n          }\n          if (filter2) {\n            index2 = filterconditions.indexOf(filter2.comparisonoperator);\n            let value2 = filter2.filtervalue;\n            filterinputfield2.val(value2);\n          }\n        }\n        filtertypedropdown1.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: index1 });\n        filtertypedropdown2.jqxDropDownList({ autoDropDownHeight: true, selectedIndex: index2 });\n      },\n      ready: function () {\n        this.addfilter();\n        let localizationObject = {\n          filterstringcomparisonoperators: ['contains', 'does not contain'],\n          // filter numeric comparison operators.\n          filternumericcomparisonoperators: ['less than', 'greater than'],\n          // filter date comparison operators.\n          filterdatecomparisonoperators: ['less than', 'greater than'],\n          // filter bool comparison operators.\n          filterbooleancomparisonoperators: ['equal', 'not equal']\n        }\n        this.$refs.myGrid.localizestrings(localizationObject);\n      }\n    }\n  }\n<\/script>\n")])])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan57"}},[t._v("theme")])]),n("td",[n("span",[t._v("String")])]),n("td",[t._v("\n                            ''\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan58"}},[t._v("toolbarheight")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            34\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan59"}},[t._v("autoheight")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan60"}},[t._v("autorowheight")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan61"}},[t._v("columnsheight")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            32\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan62"}},[t._v("deferreddatafields")])]),n("td",[n("span",[t._v("Array")])]),n("td",[t._v("\n                            []\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan63"}},[t._v("groupsheaderheight")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            34\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan64"}},[t._v("groupindentwidth")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            20\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan65"}},[t._v("height")])]),n("td",[n("span",[t._v("String | Number")])]),n("td",[t._v("\n                            400\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan66"}},[t._v("pagerheight")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            40\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan67"}},[t._v("rowsheight")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            32\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan68"}},[t._v("scrollbarsize")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            15\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan69"}},[t._v("scrollmode")])]),n("td",[n("span",[t._v("String")])]),n("td",[t._v('\n                            "default"\n                        ')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan70"}},[t._v("scrollfeedback")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[t._v('\n                                When the "scrollmode" is set to "deferred", the "scrollfeedback" function may be used to display custom UI Tooltip next to the scrollbar.\n                                '),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"false\" :height=\"100\"\n    :scrollmode=\"'deferred'\" :scrollfeedback=\"scrollfeedback\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      scrollfeedback: function (row) {\n        return 'row ' + row.uid;\n      }\n    }\n  }\n<\/script>\n")])])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan71"}},[t._v("width")])]),n("td",[n("span",[t._v("String | Number")])]),n("td",[t._v("\n                            600\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan72"}},[t._v("autosavestate")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan73"}},[t._v("autoloadstate")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan74"}},[t._v("columns")])]),n("td",[n("span",[t._v("Array")])]),n("td",[t._v("\n                            []\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan75"}},[t._v("columngroups")])]),n("td",[n("span",[t._v("Array")])]),n("td",[t._v("\n                            []\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan76"}},[t._v("columnsmenu")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan77"}},[t._v("columnsresize")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan78"}},[t._v("columnsautoresize")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan79"}},[t._v("columnsreorder")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan80"}},[t._v("disabled")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan81"}},[t._v("editable")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan82"}},[t._v("editmode")])]),n("td",[n("span",[t._v("String")])]),n("td",[t._v("\n                            'selectedcell'\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan83"}},[t._v("filter")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan84"}},[t._v("filterable")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan85"}},[t._v("groupable")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan86"}},[t._v("groups")])]),n("td",[n("span",[t._v("Array")])]),n("td",[t._v("\n                            []\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan87"}},[t._v("horizontalscrollbarstep")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            5\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan88"}},[t._v("horizontalscrollbarlargestep")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            50\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan89"}},[t._v("initrowdetails")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan90"}},[t._v("keyboardnavigation")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            true\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan91"}},[t._v("localization")])]),n("td",[n("span",[t._v("Object")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan92"}},[t._v("pagesize")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            10\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan93"}},[t._v("pagesizeoptions")])]),n("td",[n("span",[t._v("Array")])]),n("td",[t._v("\n                            ['5', '10', '20']\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan94"}},[t._v("pagermode")])]),n("td",[n("span",[t._v("String")])]),n("td",[t._v('\n                            "default"\n                        ')])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan95"}},[t._v("pagerbuttonscount")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            5\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan96"}},[t._v("pageable")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan97"}},[t._v("rowdetails")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan98"}},[t._v("rowdetailstemplate")])]),n("td",[n("span",[t._v("Object")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan99"}},[t._v("ready")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan100"}},[t._v("rendered")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan101"}},[t._v("renderstatusbar")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan102"}},[t._v("rendertoolbar")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan103"}},[t._v("rendergridrows")])]),n("td",[n("span",[t._v("Function")])]),n("td",[t._v("\n                            null\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan104"}},[t._v("sortable")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan105"}},[t._v("sortmode")])]),n("td",[n("span",[t._v("String")])]),n("td",[t._v("\n                            'one'\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan106"}},[t._v("selectedrowindex")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            -1\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan107"}},[t._v("selectedrowindexes")])]),n("td",[n("span",[t._v("Array")])]),n("td",[t._v("\n                            []\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan108"}},[t._v("source")])]),n("td",[n("span",[t._v("Object")])]),n("td",[t._v("\n                            {}\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan109"}},[t._v("sorttogglestates")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            2\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan110"}},[t._v("updatedelay")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            0\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan111"}},[t._v("virtualmode")])]),n("td",[n("span",[t._v("Boolean")])]),n("td",[t._v("\n                            false\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan112"}},[t._v("verticalscrollbarstep")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            5\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan113"}},[t._v("verticalscrollbarlargestep")])]),n("td",[n("span",[t._v("Number")])]),n("td",[t._v("\n                            400\n                        ")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("h3",{staticClass:"documentation-top-header"},[t._v("\n                                Events\n                            ")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan114"}},[t._v("bindingcomplete")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("bindingcomplete")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @bindingcomplete=\"onBindingcomplete($event)\"\n       :width=\"850\" :columns=\"columns\" :autoheight=\"true\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.source = this.source;\n    },\n    methods: {\n      onBindingcomplete: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan115"}},[t._v("columnresized")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("columnresized")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @columnresized=\"onColumnresized($event)\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :columnsresize=\"true\" :autoheight=\"true\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      onColumnresized: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan116"}},[t._v("columnreordered")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("columnreordered")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @columnreordered=\"onColumnreordered($event)\"\n       :width=\"850\" :source=\"source\" :columns=\"columns\" :columnsreorder=\"true\" :autoheight=\"true\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      onColumnreordered: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan117"}},[t._v("columnclick")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("columnclick")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @columnclick=\"onColumnclick($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      onColumnclick: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan118"}},[t._v("cellclick")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("cellclick")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @cellclick=\"onCellclick($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      onCellclick: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan119"}},[t._v("celldoubleclick")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("celldoubleclick")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @celldoubleclick=\"onCelldoubleclick($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      onCelldoubleclick: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan120"}},[t._v("cellselect")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("cellselect")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @cellselect=\"onCellselect($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.selectionmode = 'singlecell';\n\n    },\n    methods: {\n      onCellselect: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan121"}},[t._v("cellunselect")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("cellunselect")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @cellunselect=\"onCellunselect($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.selectionmode = 'singlecell';\n\n    },\n    methods: {\n      onCellunselect: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan122"}},[t._v("cellvaluechanged")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("cellvaluechanged")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @cellvaluechanged=\"onCellvaluechanged($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.editable = true;\n\n    },\n    methods: {\n      onCellvaluechanged: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan123"}},[t._v("cellbeginedit")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("cellbeginedit")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @cellbeginedit=\"onCellbeginedit($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.editable = true;\n\n    },\n    methods: {\n      onCellbeginedit: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan124"}},[t._v("cellendedit")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("cellendedit")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @cellendedit=\"onCellendedit($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.editable = true;\n\n    },\n    methods: {\n      onCellendedit: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan125"}},[t._v("filter")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("filter")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @filter=\"onFilter($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.filterable = true;\n\n    },\n    methods: {\n      onFilter: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan126"}},[t._v("groupschanged")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("groupschanged")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @groupschanged=\"onGroupschanged($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.groupable = true;\n\n    },\n    methods: {\n      onGroupschanged: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan127"}},[t._v("groupexpand")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("groupexpand")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @groupexpand=\"onGroupexpand($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.groupable = true;\n\n    },\n    methods: {\n      onGroupexpand: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan128"}},[t._v("groupcollapse")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("groupcollapse")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @groupcollapse=\"onGroupcollapse($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.groupable = true;\n\n    },\n    methods: {\n      onGroupcollapse: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan129"}},[t._v("pagechanged")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("pagechanged")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @pagechanged=\"onPagechanged($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.pageable = true;\n      this.$refs.myGrid.pagesize = 1;\n\n    },\n    methods: {\n      onPagechanged: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan130"}},[t._v("pagesizechanged")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("pagesizechanged")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @pagesizechanged=\"onPagesizechanged($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.pageable = true;\n\n    },\n    methods: {\n      onPagesizechanged: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan131"}},[t._v("rowclick")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("rowclick")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @rowclick=\"onRowclick($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      onRowclick: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan132"}},[t._v("rowdoubleclick")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("rowdoubleclick")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @rowdoubleclick=\"onRowdoubleclick($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      onRowdoubleclick: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan133"}},[t._v("rowselect")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("rowselect")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @rowselect=\"onRowselect($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      onRowselect: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan134"}},[t._v("rowunselect")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("rowunselect")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @rowunselect=\"onRowunselect($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      onRowunselect: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan135"}},[t._v("rowexpand")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("rowexpand")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @rowexpand=\"onRowexpand($event)\" :width=\"850\" :source=\"source\" :columns=\"columns\" \n       :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" :autoheight=\"true\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"<div style='margin: 10px;'>Row Details</div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function (index, parentElement, gridElement, datarecord) {\n        var details = $($(parentElement).children()[0]);\n        details.html(\"Details: \" + index);\n      },\n      onRowexpand: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan136"}},[t._v("rowcollapse")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("rowcollapse")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @rowcollapse=\"onRowcollapse($event)\" :width=\"850\" :source=\"source\" :columns=\"columns\" \n       :rowdetails=\"true\" :initrowdetails=\"initrowdetails\" :rowdetailstemplate=\"rowdetailstemplate\" :autoheight=\"true\" />\n</template>\n\n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n\n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ],\n        rowdetailstemplate: {\n          rowdetails: \"<div style='margin: 10px;'>Row Details</div>\",\n          rowdetailsheight: 50\n        }\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          ['Maria Anders', 'Sales Representative', 'Berlin', 'Germany'],\n          ['Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico'],\n          ['Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico']\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    methods: {\n      initrowdetails: function (index, parentElement, gridElement, datarecord) {\n        var details = $($(parentElement).children()[0]);\n        details.html(\"Details: \" + index);\n      },\n      onRowcollapse: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan137"}},[t._v("sort")])]),n("td",[n("span",[t._v("Event")])]),n("td")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[t._v("\n                                    Bind to the "),n("code",[t._v("sort")]),t._v(" event of jqxGrid.\n                                ")])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("p",[n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\" @sort=\"onSort($event)\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      this.$refs.myGrid.sortable = true;\n      this.$refs.myGrid.showsortmenuitems = true;\n\n    },\n    methods: {\n      onSort: function (event) {\n        alert('do something...');\n      }\n    }\n  }\n<\/script>\n")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("h3",{staticClass:"documentation-top-header"},[t._v("\n                                Methods\n                            ")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("th",[t._v("Name")]),n("th",[t._v("Arguments")]),n("th",[t._v("Return Type")])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan138"}},[t._v("autoresizecolumns")])]),n("td",[n("span",[t._v("type")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan139"}},[t._v("autoresizecolumn")])]),n("td",[n("span",[t._v("dataField, type")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan140"}},[t._v("beginupdate")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan141"}},[t._v("clear")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan142"}},[t._v("destroy")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan143"}},[t._v("endupdate")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan144"}},[t._v("ensurerowvisible")])]),n("td",[n("span",[t._v("rowBoundIndex")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan145"}},[t._v("focus")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan146"}},[t._v("getcolumnindex")])]),n("td",[n("span",[t._v("dataField")])]),n("td",[n("span",[t._v("Number")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan147"}},[t._v("getcolumn")])]),n("td",[n("span",[t._v("dataField")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan148"}},[t._v("getcolumnproperty")])]),n("td",[n("span",[t._v("dataField, propertyName")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan149"}},[t._v("getrowid")])]),n("td",[n("span",[t._v("rowBoundIndex")])]),n("td",[n("span",[t._v("String")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan150"}},[t._v("getrowdata")])]),n("td",[n("span",[t._v("rowBoundIndex")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan151"}},[t._v("getrowdatabyid")])]),n("td",[n("span",[t._v("rowID")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan152"}},[t._v("getrowboundindexbyid")])]),n("td",[n("span",[t._v("rowID")])]),n("td",[n("span",[t._v("Number")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan153"}},[t._v("getrowboundindex")])]),n("td",[n("span",[t._v("rowDisplayIndex")])]),n("td",[n("span",[t._v("Number")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan154"}},[t._v("getrows")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Array")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan155"}},[t._v("getboundrows")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Array")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan156"}},[t._v("getdisplayrows")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Array")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan157"}},[t._v("getdatainformation")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan158"}},[t._v("getsortinformation")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan159"}},[t._v("getpaginginformation")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan160"}},[t._v("hidecolumn")])]),n("td",[n("span",[t._v("dataField")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan161"}},[t._v("hideloadelement")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan162"}},[t._v("hiderowdetails")])]),n("td",[n("span",[t._v("rowBoundIndex")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan163"}},[t._v("iscolumnvisible")])]),n("td",[n("span",[t._v("dataField")])]),n("td",[n("span",[t._v("Boolean")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan164"}},[t._v("iscolumnpinned")])]),n("td",[n("span",[t._v("dataField")])]),n("td",[n("span",[t._v("Boolean")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan165"}},[t._v("localizestrings")])]),n("td",[n("span",[t._v("localizationobject")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan166"}},[t._v("pincolumn")])]),n("td",[n("span",[t._v("dataField")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan167"}},[t._v("refreshdata")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan168"}},[t._v("refresh")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan169"}},[t._v("render")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan170"}},[t._v("scrolloffset")])]),n("td",[n("span",[t._v("top, left")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan171"}},[t._v("scrollposition")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan172"}},[t._v("showloadelement")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan173"}},[t._v("showrowdetails")])]),n("td",[n("span",[t._v("rowBoundIndex")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan174"}},[t._v("setcolumnindex")])]),n("td",[n("span",[t._v("dataField, index")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan175"}},[t._v("setcolumnproperty")])]),n("td",[n("span",[t._v("dataField, propertyName, propertyValue")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan176"}},[t._v("showcolumn")])]),n("td",[n("span",[t._v("dataField")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan177"}},[t._v("unpincolumn")])]),n("td",[n("span",[t._v("dataField")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan178"}},[t._v("updatebounddata")])]),n("td",[n("span",[t._v("type")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan179"}},[t._v("updating")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Boolean")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan180"}},[t._v("getsortcolumn")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("String")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan181"}},[t._v("removesort")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan182"}},[t._v("sortby")])]),n("td",[n("span",[t._v("dataField, sortOrder")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan183"}},[t._v("addgroup")])]),n("td",[n("span",[t._v("dataField")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan184"}},[t._v("cleargroups")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan185"}},[t._v("collapsegroup")])]),n("td",[n("span",[t._v("group")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan186"}},[t._v("collapseallgroups")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan187"}},[t._v("expandallgroups")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan188"}},[t._v("expandgroup")])]),n("td",[n("span",[t._v("group")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan189"}},[t._v("getrootgroupscount")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Number")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan190"}},[t._v("getgroup")])]),n("td",[n("span",[t._v("groupIndex")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan191"}},[t._v("insertgroup")])]),n("td",[n("span",[t._v("groupIndex, dataField")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan192"}},[t._v("iscolumngroupable")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Boolean")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan193"}},[t._v("removegroupat")])]),n("td",[n("span",[t._v("groupIndex")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan194"}},[t._v("removegroup")])]),n("td",[n("span",[t._v("dataField")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan195"}},[t._v("addfilter")])]),n("td",[n("span",[t._v("dataField, filterGroup, refreshGrid")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan196"}},[t._v("applyfilters")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan197"}},[t._v("clearfilters")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan198"}},[t._v("getfilterinformation")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Any")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan199"}},[t._v("getcolumnat")])]),n("td",[n("span",[t._v("index")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticStyle:{width:"100%"},attrs:{colspan:"3"}},[n("div",{staticClass:"documentation-option-description property-content",staticStyle:{display:"none"}},[n("p",[t._v("Method: getcolumnat")]),n("pre",{staticClass:"code"},[t._v("<template>\n  <JqxGrid ref=\"myGrid\"\n    :width=\"850\" :source=\"source\" :columns=\"columns\" :autoheight=\"true\"\n  />\n</template>\n\n \n<script>\n  import JqxGrid from 'jqwidgets-scripts/jqwidgets-vue/vue_jqxgrid.vue';\n \n  export default {\n    components: {\n      JqxGrid\n    },\n    data: function () {\n      return  {\n        source: new jqx.dataAdapter(this.source),\n        columns: [\n          { text: 'Contact Name', datafield: 'ContactName' },\n          { text: 'Contact Title', datafield: 'Title' },\n          { text: 'City', datafield: 'City' },\n          { text: 'Country', datafield: 'Country' }\n        ]\n      }\n    },\n    beforeCreate: function () {\n      this.source = {\n        localdata: [\n          [ 'Maria Anders', 'Sales Representative', 'Berlin', 'Germany' ],\n          [ 'Ana Trujillo', 'Owner', 'Mxico D.F.', 'Mexico' ],\n          [ 'Antonio Moreno', 'Owner', 'Mxico D.F.', 'Mexico' ]\n        ],\n        datafields: [\n          { name: 'ContactName', type: 'string', map: '0' },\n          { name: 'Title', type: 'string', map: '1' },\n          { name: 'City', type: 'string', map: '2' },\n          { name: 'Country', type: 'string', map: '3' }\n        ],\n        datatype: 'array'\n      };\n    },\n    mounted: function () {\n      const value = this.$refs.myGrid.getcolumnat(3);\n    }\n  }\n<\/script>")])])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan200"}},[t._v("removefilter")])]),n("td",[n("span",[t._v("dataField, refreshGrid")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan201"}},[t._v("refreshfilterrow")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan202"}},[t._v("gotopage")])]),n("td",[n("span",[t._v("pagenumber")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan203"}},[t._v("gotoprevpage")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan204"}},[t._v("gotonextpage")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan205"}},[t._v("addrow")])]),n("td",[n("span",[t._v("rowIds, data, rowPosition")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan206"}},[t._v("begincelledit")])]),n("td",[n("span",[t._v("rowBoundIndex, dataField")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan207"}},[t._v("beginrowedit")])]),n("td",[n("span",[t._v("rowBoundIndex")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan208"}},[t._v("closemenu")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan209"}},[t._v("deleterow")])]),n("td",[n("span",[t._v("rowIds")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan210"}},[t._v("endcelledit")])]),n("td",[n("span",[t._v("rowBoundIndex, dataField, confirmChanges")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan211"}},[t._v("endrowedit")])]),n("td",[n("span",[t._v("rowBoundIndex, confirmChanges")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan212"}},[t._v("getcell")])]),n("td",[n("span",[t._v("rowBoundIndex, datafield")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan213"}},[t._v("getcellatposition")])]),n("td",[n("span",[t._v("left, top")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan214"}},[t._v("getcelltext")])]),n("td",[n("span",[t._v("rowBoundIndex, dataField")])]),n("td",[n("span",[t._v("String")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan215"}},[t._v("getcelltextbyid")])]),n("td",[n("span",[t._v("rowID, dataField")])]),n("td",[n("span",[t._v("String")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan216"}},[t._v("getcellvaluebyid")])]),n("td",[n("span",[t._v("rowID, dataField")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan217"}},[t._v("getcellvalue")])]),n("td",[n("span",[t._v("rowBoundIndex, dataField")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan218"}},[t._v("isBindingCompleted")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Boolean")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan219"}},[t._v("openmenu")])]),n("td",[n("span",[t._v("dataField")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan220"}},[t._v("setcellvalue")])]),n("td",[n("span",[t._v("rowBoundIndex, dataField, value")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan221"}},[t._v("setcellvaluebyid")])]),n("td",[n("span",[t._v("rowID, dataField, value")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan222"}},[t._v("showvalidationpopup")])]),n("td",[n("span",[t._v("rowBoundIndex, dataField, validationMessage")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan223"}},[t._v("updaterow")])]),n("td",[n("span",[t._v("rowIds, data")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan224"}},[t._v("clearselection")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan225"}},[t._v("getselectedrowindex")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Number")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan226"}},[t._v("getselectedrowindexes")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Array")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan227"}},[t._v("getselectedcell")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan228"}},[t._v("getselectedcells")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Array")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan229"}},[t._v("selectcell")])]),n("td",[n("span",[t._v("rowBoundIndex, dataField")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan230"}},[t._v("selectallrows")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan231"}},[t._v("selectrow")])]),n("td",[n("span",[t._v("rowBoundIndex")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan232"}},[t._v("unselectrow")])]),n("td",[n("span",[t._v("rowBoundIndex")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan233"}},[t._v("unselectcell")])]),n("td",[n("span",[t._v("rowBoundIndex, dataField")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan234"}},[t._v("getcolumnaggregateddata")])]),n("td",[n("span",[t._v("dataField, aggregates")])]),n("td",[n("span",[t._v("String")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan235"}},[t._v("refreshaggregates")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan236"}},[t._v("renderaggregates")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan237"}},[t._v("exportdata")])]),n("td",[n("span",[t._v("dataType, fileName, exportHeader, rows, exportHiddenColumns, serverURL, charSet")])]),n("td",[n("span",[t._v("Any")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan238"}},[t._v("getstate")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Object")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan239"}},[t._v("loadstate")])]),n("td",[n("span",[t._v("stateobject")])]),n("td",[n("span",[t._v("None")])])])},function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("tr",[n("td",{staticClass:"documentation-option-type-click"},[n("span",{attrs:{id:"propertiesSpan240"}},[t._v("savestate")])]),n("td",[n("span",[t._v("None")])]),n("td",[n("span",[t._v("Object")])])])}],Pe=(n("7514"),{mounted:function(){$(".documentation-option-type-click").click(function(t){$(t.target).parents("tr").next().find(".property-content").toggle()}),formatAPI()}}),Re=Pe,Le=(n("fdee"),Object(c["a"])(Re,Oe,$e,!1,null,"2fd7386c",null));Le.options.__file="ApiReference.vue";var Ie=Le.exports;a["a"].use(_["a"]);var ze=new _["a"]({routes:[{path:"/",component:T},{path:"/demos",component:B,children:[{path:"",component:tt,redirect:"default-functionality"},{path:"default-functionality",component:tt},{path:"data-editing",component:ot},{path:"data-export",component:mt},{path:"refresh-data",component:gt},{path:"row-details",component:bt},{path:"nested-grids",component:Nt},{path:"virtual-scrolling",component:kt},{path:"virtual-paging",component:It}]},{path:"/docs",component:R,children:[{path:"",component:Qt,redirect:"getting-started"},{path:"getting-started",component:Qt},{path:"fundamentals",component:ee},{path:"data-binding",component:se},{path:"sorting",component:me},{path:"filtering",component:ge},{path:"paging",component:be},{path:"grouping",component:Ne},{path:"editing",component:ke},{path:"api-reference",component:Ie}]},{path:"*",component:W}]}),He=n("9f7b");n("f9e3"),n("2dd8");a["a"].config.productionTip=!1,a["a"].use(He["a"]),new a["a"]({router:ze,render:function(t){return t(w)}}).$mount("#app")},5897:function(t,e,n){},"58fa":function(t,e,n){t.exports=n.p+"img/grid-pinned.890f7a99.png"},"5bcc":function(t,e,n){},"5fa5":function(t,e,n){t.exports=n.p+"img/grid-row-details.26bf4eea.png"},"64a9":function(t,e,n){},"682b":function(t,e,n){},"6ed6":function(t,e,n){},"72ce":function(t,e,n){},"72d7":function(t,e,n){"use strict";var a=n("682b"),i=n.n(a);i.a},"821c":function(t,e,n){t.exports=n.p+"img/grid-grouping.e1d2c441.png"},8453:function(t,e,n){t.exports=n.p+"img/grid-nested.8bf32c6d.png"},a48e:function(t,e,n){t.exports=n.p+"img/logo-jqwidgets.6d209e39.png"},a601:function(t,e,n){},a7ac:function(t,e,n){"use strict";var a=n("3cc5"),i=n.n(a);i.a},b2aa:function(t,e,n){},bc99:function(t,e,n){"use strict";var a=n("5bcc"),i=n.n(a);i.a},db02:function(t,e,n){"use strict";var a=n("6ed6"),i=n.n(a);i.a},dfa4:function(t,e,n){t.exports=n.p+"img/grid-columns.91d6b560.png"},e422:function(t,e,n){},e54c:function(t,e,n){"use strict";var a=n("b2aa"),i=n.n(a);i.a},e684:function(t,e,n){"use strict";var a=n("e422"),i=n.n(a);i.a},e805:function(t,e,n){t.exports=n.p+"img/grid-formatting.3d6e5bf0.png"},fdee:function(t,e,n){"use strict";var a=n("11ce"),i=n.n(a);i.a}});
//# sourceMappingURL=app.7c5cb82f.js.map